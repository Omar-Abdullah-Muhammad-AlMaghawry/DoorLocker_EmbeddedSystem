
MUC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f4  00800060  00003e8c  00003f20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800154  00800154  00004014  2**0
                  ALLOC
  3 .stab         000033f0  00000000  00000000  00004014  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000111b  00000000  00000000  00007404  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000851f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000865f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000087cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a418  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b303  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c0b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c210  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c49d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cc6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 02 1c 	jmp	0x3804	; 0x3804 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 cf 1b 	jmp	0x379e	; 0x379e <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e8       	ldi	r30, 0x8C	; 140
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 35       	cpi	r26, 0x54	; 84
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e5       	ldi	r26, 0x54	; 84
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 35       	cpi	r26, 0x59	; 89
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 87 0b 	call	0x170e	; 0x170e <main>
      8a:	0c 94 44 1f 	jmp	0x3e88	; 0x3e88 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bf 1e 	jmp	0x3d7e	; 0x3d7e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e4       	ldi	r26, 0x42	; 66
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 db 1e 	jmp	0x3db6	; 0x3db6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cb 1e 	jmp	0x3d96	; 0x3d96 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e7 1e 	jmp	0x3dce	; 0x3dce <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cb 1e 	jmp	0x3d96	; 0x3d96 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e7 1e 	jmp	0x3dce	; 0x3dce <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bf 1e 	jmp	0x3d7e	; 0x3d7e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	82 e4       	ldi	r24, 0x42	; 66
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 db 1e 	jmp	0x3db6	; 0x3db6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cb 1e 	jmp	0x3d96	; 0x3d96 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e7 1e 	jmp	0x3dce	; 0x3dce <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 cb 1e 	jmp	0x3d96	; 0x3d96 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e7 1e 	jmp	0x3dce	; 0x3dce <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 cb 1e 	jmp	0x3d96	; 0x3d96 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e7 1e 	jmp	0x3dce	; 0x3dce <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 cf 1e 	jmp	0x3d9e	; 0x3d9e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <KEYPAD_getPressed>:
static uint8 KEYPAD_4x4_adjustSwitchNumber(uint8 location); // static bec. it's not used in other file, it uses internal
#elif(NO_COL == 3)
static uint8 KEYPAD_4x3_adjustSwitchNumber(uint8 location);// static bec. it's not used in other file, it uses internal
#endif

uint8 KEYPAD_getPressed(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <KEYPAD_getPressed+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	uint8 col, row;
	while (1) {
	//	_delay_ms(700);
		for (col = 0; col < NO_COL; col++) {
     b50:	1a 82       	std	Y+2, r1	; 0x02
     b52:	4c c0       	rjmp	.+152    	; 0xbec <KEYPAD_getPressed+0xa6>
			KEYPAD_PORT_DIR = (0b00010000) << col; //one col is only o/p
     b54:	ea e3       	ldi	r30, 0x3A	; 58
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	80 e1       	ldi	r24, 0x10	; 16
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <KEYPAD_getPressed+0x22>
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	2a 95       	dec	r18
     b6a:	e2 f7       	brpl	.-8      	; 0xb64 <KEYPAD_getPressed+0x1e>
     b6c:	80 83       	st	Z, r24
			KEYPAD_PORT_IN = ~((0b00010000) << col); //this col is like connected to ground
     b6e:	e9 e3       	ldi	r30, 0x39	; 57
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	8a 81       	ldd	r24, Y+2	; 0x02
     b74:	28 2f       	mov	r18, r24
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	80 e1       	ldi	r24, 0x10	; 16
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	02 2e       	mov	r0, r18
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <KEYPAD_getPressed+0x3e>
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	0a 94       	dec	r0
     b86:	e2 f7       	brpl	.-8      	; 0xb80 <KEYPAD_getPressed+0x3a>
     b88:	80 95       	com	r24
     b8a:	80 83       	st	Z, r24
			for (row = 0; row < NO_ROW; row++) {
     b8c:	19 82       	std	Y+1, r1	; 0x01
     b8e:	28 c0       	rjmp	.+80     	; 0xbe0 <KEYPAD_getPressed+0x9a>
				if (!(KEYPAD_PORT_IN & (1 << row))) //which row is presses on this col
     b90:	e9 e3       	ldi	r30, 0x39	; 57
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	88 2f       	mov	r24, r24
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	a9 01       	movw	r20, r18
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <KEYPAD_getPressed+0x62>
     ba4:	55 95       	asr	r21
     ba6:	47 95       	ror	r20
     ba8:	8a 95       	dec	r24
     baa:	e2 f7       	brpl	.-8      	; 0xba4 <KEYPAD_getPressed+0x5e>
     bac:	ca 01       	movw	r24, r20
     bae:	81 70       	andi	r24, 0x01	; 1
     bb0:	90 70       	andi	r25, 0x00	; 0
     bb2:	00 97       	sbiw	r24, 0x00	; 0
     bb4:	91 f4       	brne	.+36     	; 0xbda <KEYPAD_getPressed+0x94>
#if (NO_COL == 4)
					return KEYPAD_4x4_adjustSwitchNumber(
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	88 2f       	mov	r24, r24
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	98 2f       	mov	r25, r24
     bc6:	8a 81       	ldd	r24, Y+2	; 0x02
     bc8:	89 0f       	add	r24, r25
     bca:	8f 5f       	subi	r24, 0xFF	; 255
     bcc:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <KEYPAD_4x4_adjustSwitchNumber>
#endif

			}
		}
	}
}
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	08 95       	ret
	while (1) {
	//	_delay_ms(700);
		for (col = 0; col < NO_COL; col++) {
			KEYPAD_PORT_DIR = (0b00010000) << col; //one col is only o/p
			KEYPAD_PORT_IN = ~((0b00010000) << col); //this col is like connected to ground
			for (row = 0; row < NO_ROW; row++) {
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	8f 5f       	subi	r24, 0xFF	; 255
     bde:	89 83       	std	Y+1, r24	; 0x01
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	84 30       	cpi	r24, 0x04	; 4
     be4:	a8 f2       	brcs	.-86     	; 0xb90 <KEYPAD_getPressed+0x4a>

uint8 KEYPAD_getPressed(void) {
	uint8 col, row;
	while (1) {
	//	_delay_ms(700);
		for (col = 0; col < NO_COL; col++) {
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	8f 5f       	subi	r24, 0xFF	; 255
     bea:	8a 83       	std	Y+2, r24	; 0x02
     bec:	8a 81       	ldd	r24, Y+2	; 0x02
     bee:	84 30       	cpi	r24, 0x04	; 4
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <KEYPAD_getPressed+0xae>
     bf2:	b0 cf       	rjmp	.-160    	; 0xb54 <KEYPAD_getPressed+0xe>
     bf4:	ad cf       	rjmp	.-166    	; 0xb50 <KEYPAD_getPressed+0xa>

00000bf6 <KEYPAD_4x4_adjustSwitchNumber>:
		}
	}
}

#if (NO_COL == 4)
static uint8 KEYPAD_4x4_adjustSwitchNumber(uint8 location) { // static bec. it's not used in other file, it uses internal
     bf6:	df 93       	push	r29
     bf8:	cf 93       	push	r28
     bfa:	00 d0       	rcall	.+0      	; 0xbfc <KEYPAD_4x4_adjustSwitchNumber+0x6>
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <KEYPAD_4x4_adjustSwitchNumber+0x8>
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	89 83       	std	Y+1, r24	; 0x01
	switch (location) {
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	3c 83       	std	Y+4, r19	; 0x04
     c0c:	2b 83       	std	Y+3, r18	; 0x03
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	9c 81       	ldd	r25, Y+4	; 0x04
     c12:	88 30       	cpi	r24, 0x08	; 8
     c14:	91 05       	cpc	r25, r1
     c16:	09 f4       	brne	.+2      	; 0xc1a <KEYPAD_4x4_adjustSwitchNumber+0x24>
     c18:	70 c0       	rjmp	.+224    	; 0xcfa <KEYPAD_4x4_adjustSwitchNumber+0x104>
     c1a:	2b 81       	ldd	r18, Y+3	; 0x03
     c1c:	3c 81       	ldd	r19, Y+4	; 0x04
     c1e:	29 30       	cpi	r18, 0x09	; 9
     c20:	31 05       	cpc	r19, r1
     c22:	5c f5       	brge	.+86     	; 0xc7a <KEYPAD_4x4_adjustSwitchNumber+0x84>
     c24:	8b 81       	ldd	r24, Y+3	; 0x03
     c26:	9c 81       	ldd	r25, Y+4	; 0x04
     c28:	84 30       	cpi	r24, 0x04	; 4
     c2a:	91 05       	cpc	r25, r1
     c2c:	09 f4       	brne	.+2      	; 0xc30 <KEYPAD_4x4_adjustSwitchNumber+0x3a>
     c2e:	59 c0       	rjmp	.+178    	; 0xce2 <KEYPAD_4x4_adjustSwitchNumber+0xec>
     c30:	2b 81       	ldd	r18, Y+3	; 0x03
     c32:	3c 81       	ldd	r19, Y+4	; 0x04
     c34:	25 30       	cpi	r18, 0x05	; 5
     c36:	31 05       	cpc	r19, r1
     c38:	9c f4       	brge	.+38     	; 0xc60 <KEYPAD_4x4_adjustSwitchNumber+0x6a>
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	9c 81       	ldd	r25, Y+4	; 0x04
     c3e:	82 30       	cpi	r24, 0x02	; 2
     c40:	91 05       	cpc	r25, r1
     c42:	09 f4       	brne	.+2      	; 0xc46 <KEYPAD_4x4_adjustSwitchNumber+0x50>
     c44:	48 c0       	rjmp	.+144    	; 0xcd6 <KEYPAD_4x4_adjustSwitchNumber+0xe0>
     c46:	2b 81       	ldd	r18, Y+3	; 0x03
     c48:	3c 81       	ldd	r19, Y+4	; 0x04
     c4a:	23 30       	cpi	r18, 0x03	; 3
     c4c:	31 05       	cpc	r19, r1
     c4e:	0c f0       	brlt	.+2      	; 0xc52 <KEYPAD_4x4_adjustSwitchNumber+0x5c>
     c50:	45 c0       	rjmp	.+138    	; 0xcdc <KEYPAD_4x4_adjustSwitchNumber+0xe6>
     c52:	8b 81       	ldd	r24, Y+3	; 0x03
     c54:	9c 81       	ldd	r25, Y+4	; 0x04
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	91 05       	cpc	r25, r1
     c5a:	09 f4       	brne	.+2      	; 0xc5e <KEYPAD_4x4_adjustSwitchNumber+0x68>
     c5c:	39 c0       	rjmp	.+114    	; 0xcd0 <KEYPAD_4x4_adjustSwitchNumber+0xda>
     c5e:	67 c0       	rjmp	.+206    	; 0xd2e <KEYPAD_4x4_adjustSwitchNumber+0x138>
     c60:	2b 81       	ldd	r18, Y+3	; 0x03
     c62:	3c 81       	ldd	r19, Y+4	; 0x04
     c64:	26 30       	cpi	r18, 0x06	; 6
     c66:	31 05       	cpc	r19, r1
     c68:	09 f4       	brne	.+2      	; 0xc6c <KEYPAD_4x4_adjustSwitchNumber+0x76>
     c6a:	41 c0       	rjmp	.+130    	; 0xcee <KEYPAD_4x4_adjustSwitchNumber+0xf8>
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	9c 81       	ldd	r25, Y+4	; 0x04
     c70:	87 30       	cpi	r24, 0x07	; 7
     c72:	91 05       	cpc	r25, r1
     c74:	0c f0       	brlt	.+2      	; 0xc78 <KEYPAD_4x4_adjustSwitchNumber+0x82>
     c76:	3e c0       	rjmp	.+124    	; 0xcf4 <KEYPAD_4x4_adjustSwitchNumber+0xfe>
     c78:	37 c0       	rjmp	.+110    	; 0xce8 <KEYPAD_4x4_adjustSwitchNumber+0xf2>
     c7a:	2b 81       	ldd	r18, Y+3	; 0x03
     c7c:	3c 81       	ldd	r19, Y+4	; 0x04
     c7e:	2c 30       	cpi	r18, 0x0C	; 12
     c80:	31 05       	cpc	r19, r1
     c82:	09 f4       	brne	.+2      	; 0xc86 <KEYPAD_4x4_adjustSwitchNumber+0x90>
     c84:	46 c0       	rjmp	.+140    	; 0xd12 <KEYPAD_4x4_adjustSwitchNumber+0x11c>
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	9c 81       	ldd	r25, Y+4	; 0x04
     c8a:	8d 30       	cpi	r24, 0x0D	; 13
     c8c:	91 05       	cpc	r25, r1
     c8e:	5c f4       	brge	.+22     	; 0xca6 <KEYPAD_4x4_adjustSwitchNumber+0xb0>
     c90:	2b 81       	ldd	r18, Y+3	; 0x03
     c92:	3c 81       	ldd	r19, Y+4	; 0x04
     c94:	2a 30       	cpi	r18, 0x0A	; 10
     c96:	31 05       	cpc	r19, r1
     c98:	b1 f1       	breq	.+108    	; 0xd06 <KEYPAD_4x4_adjustSwitchNumber+0x110>
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	9c 81       	ldd	r25, Y+4	; 0x04
     c9e:	8b 30       	cpi	r24, 0x0B	; 11
     ca0:	91 05       	cpc	r25, r1
     ca2:	a4 f5       	brge	.+104    	; 0xd0c <KEYPAD_4x4_adjustSwitchNumber+0x116>
     ca4:	2d c0       	rjmp	.+90     	; 0xd00 <KEYPAD_4x4_adjustSwitchNumber+0x10a>
     ca6:	2b 81       	ldd	r18, Y+3	; 0x03
     ca8:	3c 81       	ldd	r19, Y+4	; 0x04
     caa:	2e 30       	cpi	r18, 0x0E	; 14
     cac:	31 05       	cpc	r19, r1
     cae:	b9 f1       	breq	.+110    	; 0xd1e <KEYPAD_4x4_adjustSwitchNumber+0x128>
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	9c 81       	ldd	r25, Y+4	; 0x04
     cb4:	8e 30       	cpi	r24, 0x0E	; 14
     cb6:	91 05       	cpc	r25, r1
     cb8:	7c f1       	brlt	.+94     	; 0xd18 <KEYPAD_4x4_adjustSwitchNumber+0x122>
     cba:	2b 81       	ldd	r18, Y+3	; 0x03
     cbc:	3c 81       	ldd	r19, Y+4	; 0x04
     cbe:	2f 30       	cpi	r18, 0x0F	; 15
     cc0:	31 05       	cpc	r19, r1
     cc2:	79 f1       	breq	.+94     	; 0xd22 <KEYPAD_4x4_adjustSwitchNumber+0x12c>
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	9c 81       	ldd	r25, Y+4	; 0x04
     cc8:	80 31       	cpi	r24, 0x10	; 16
     cca:	91 05       	cpc	r25, r1
     ccc:	69 f1       	breq	.+90     	; 0xd28 <KEYPAD_4x4_adjustSwitchNumber+0x132>
     cce:	2f c0       	rjmp	.+94     	; 0xd2e <KEYPAD_4x4_adjustSwitchNumber+0x138>
	case 1:
		return 7;
     cd0:	97 e0       	ldi	r25, 0x07	; 7
     cd2:	9a 83       	std	Y+2, r25	; 0x02
     cd4:	2e c0       	rjmp	.+92     	; 0xd32 <KEYPAD_4x4_adjustSwitchNumber+0x13c>
	case 2:
		return 8;
     cd6:	28 e0       	ldi	r18, 0x08	; 8
     cd8:	2a 83       	std	Y+2, r18	; 0x02
     cda:	2b c0       	rjmp	.+86     	; 0xd32 <KEYPAD_4x4_adjustSwitchNumber+0x13c>
	case 3:
		return 9;
     cdc:	39 e0       	ldi	r19, 0x09	; 9
     cde:	3a 83       	std	Y+2, r19	; 0x02
     ce0:	28 c0       	rjmp	.+80     	; 0xd32 <KEYPAD_4x4_adjustSwitchNumber+0x13c>
	case 4:
		return '%';
     ce2:	85 e2       	ldi	r24, 0x25	; 37
     ce4:	8a 83       	std	Y+2, r24	; 0x02
     ce6:	25 c0       	rjmp	.+74     	; 0xd32 <KEYPAD_4x4_adjustSwitchNumber+0x13c>
	case 5:
		return 4;
     ce8:	94 e0       	ldi	r25, 0x04	; 4
     cea:	9a 83       	std	Y+2, r25	; 0x02
     cec:	22 c0       	rjmp	.+68     	; 0xd32 <KEYPAD_4x4_adjustSwitchNumber+0x13c>
	case 6:
		return 5;
     cee:	25 e0       	ldi	r18, 0x05	; 5
     cf0:	2a 83       	std	Y+2, r18	; 0x02
     cf2:	1f c0       	rjmp	.+62     	; 0xd32 <KEYPAD_4x4_adjustSwitchNumber+0x13c>
	case 7:
		return 6;
     cf4:	36 e0       	ldi	r19, 0x06	; 6
     cf6:	3a 83       	std	Y+2, r19	; 0x02
     cf8:	1c c0       	rjmp	.+56     	; 0xd32 <KEYPAD_4x4_adjustSwitchNumber+0x13c>
	case 8:
		return '*';
     cfa:	8a e2       	ldi	r24, 0x2A	; 42
     cfc:	8a 83       	std	Y+2, r24	; 0x02
     cfe:	19 c0       	rjmp	.+50     	; 0xd32 <KEYPAD_4x4_adjustSwitchNumber+0x13c>
	case 9:
		return 1;
     d00:	91 e0       	ldi	r25, 0x01	; 1
     d02:	9a 83       	std	Y+2, r25	; 0x02
     d04:	16 c0       	rjmp	.+44     	; 0xd32 <KEYPAD_4x4_adjustSwitchNumber+0x13c>
	case 10:
		return 2;
     d06:	22 e0       	ldi	r18, 0x02	; 2
     d08:	2a 83       	std	Y+2, r18	; 0x02
     d0a:	13 c0       	rjmp	.+38     	; 0xd32 <KEYPAD_4x4_adjustSwitchNumber+0x13c>
	case 11:
		return 3;
     d0c:	33 e0       	ldi	r19, 0x03	; 3
     d0e:	3a 83       	std	Y+2, r19	; 0x02
     d10:	10 c0       	rjmp	.+32     	; 0xd32 <KEYPAD_4x4_adjustSwitchNumber+0x13c>
	case 12:
		return '-';
     d12:	8d e2       	ldi	r24, 0x2D	; 45
     d14:	8a 83       	std	Y+2, r24	; 0x02
     d16:	0d c0       	rjmp	.+26     	; 0xd32 <KEYPAD_4x4_adjustSwitchNumber+0x13c>
	case 13:
		return 13; ///ascii for Enter
     d18:	9d e0       	ldi	r25, 0x0D	; 13
     d1a:	9a 83       	std	Y+2, r25	; 0x02
     d1c:	0a c0       	rjmp	.+20     	; 0xd32 <KEYPAD_4x4_adjustSwitchNumber+0x13c>
	case 14:
		return 0;
     d1e:	1a 82       	std	Y+2, r1	; 0x02
     d20:	08 c0       	rjmp	.+16     	; 0xd32 <KEYPAD_4x4_adjustSwitchNumber+0x13c>
	case 15:
		return '=';
     d22:	2d e3       	ldi	r18, 0x3D	; 61
     d24:	2a 83       	std	Y+2, r18	; 0x02
     d26:	05 c0       	rjmp	.+10     	; 0xd32 <KEYPAD_4x4_adjustSwitchNumber+0x13c>
	case 16:
		return '+';
     d28:	3b e2       	ldi	r19, 0x2B	; 43
     d2a:	3a 83       	std	Y+2, r19	; 0x02
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <KEYPAD_4x4_adjustSwitchNumber+0x13c>
	default:
		return location;
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	8a 83       	std	Y+2, r24	; 0x02
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <LCD_init>:
#include "lcd.h"
void LCD_init(void){
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
LCD_CTRL_PORT_DIR |=(1<<RS)|(1<<RW)|(1<<E);
     d4a:	a1 e3       	ldi	r26, 0x31	; 49
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e1 e3       	ldi	r30, 0x31	; 49
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	80 67       	ori	r24, 0x70	; 112
     d56:	8c 93       	st	X, r24
LCD_DATA_PORT_DIR=0xFF;
     d58:	e4 e3       	ldi	r30, 0x34	; 52
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	8f ef       	ldi	r24, 0xFF	; 255
     d5e:	80 83       	st	Z, r24
LCD_sendCommand(0x38);
     d60:	88 e3       	ldi	r24, 0x38	; 56
     d62:	0e 94 bb 06 	call	0xd76	; 0xd76 <LCD_sendCommand>
LCD_clearScreen();
     d66:	0e 94 66 0b 	call	0x16cc	; 0x16cc <LCD_clearScreen>
LCD_sendCommand(0x0C);
     d6a:	8c e0       	ldi	r24, 0x0C	; 12
     d6c:	0e 94 bb 06 	call	0xd76	; 0xd76 <LCD_sendCommand>
}
     d70:	cf 91       	pop	r28
     d72:	df 91       	pop	r29
     d74:	08 95       	ret

00000d76 <LCD_sendCommand>:
void LCD_sendCommand(uint8 command){
     d76:	df 93       	push	r29
     d78:	cf 93       	push	r28
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	e9 97       	sbiw	r28, 0x39	; 57
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	89 af       	std	Y+57, r24	; 0x39
LCD_CTRL_PORT_DATA &=~(1<<RS)&~(1<<RW);
     d8c:	a2 e3       	ldi	r26, 0x32	; 50
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e2 e3       	ldi	r30, 0x32	; 50
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	8f 7c       	andi	r24, 0xCF	; 207
     d98:	8c 93       	st	X, r24
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	a0 e8       	ldi	r26, 0x80	; 128
     da0:	bf e3       	ldi	r27, 0x3F	; 63
     da2:	8d ab       	std	Y+53, r24	; 0x35
     da4:	9e ab       	std	Y+54, r25	; 0x36
     da6:	af ab       	std	Y+55, r26	; 0x37
     da8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     daa:	6d a9       	ldd	r22, Y+53	; 0x35
     dac:	7e a9       	ldd	r23, Y+54	; 0x36
     dae:	8f a9       	ldd	r24, Y+55	; 0x37
     db0:	98 ad       	ldd	r25, Y+56	; 0x38
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	4a e7       	ldi	r20, 0x7A	; 122
     db8:	53 e4       	ldi	r21, 0x43	; 67
     dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dbe:	dc 01       	movw	r26, r24
     dc0:	cb 01       	movw	r24, r22
     dc2:	89 ab       	std	Y+49, r24	; 0x31
     dc4:	9a ab       	std	Y+50, r25	; 0x32
     dc6:	ab ab       	std	Y+51, r26	; 0x33
     dc8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     dca:	69 a9       	ldd	r22, Y+49	; 0x31
     dcc:	7a a9       	ldd	r23, Y+50	; 0x32
     dce:	8b a9       	ldd	r24, Y+51	; 0x33
     dd0:	9c a9       	ldd	r25, Y+52	; 0x34
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	40 e8       	ldi	r20, 0x80	; 128
     dd8:	5f e3       	ldi	r21, 0x3F	; 63
     dda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dde:	88 23       	and	r24, r24
     de0:	2c f4       	brge	.+10     	; 0xdec <LCD_sendCommand+0x76>
		__ticks = 1;
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	98 ab       	std	Y+48, r25	; 0x30
     de8:	8f a7       	std	Y+47, r24	; 0x2f
     dea:	3f c0       	rjmp	.+126    	; 0xe6a <LCD_sendCommand+0xf4>
	else if (__tmp > 65535)
     dec:	69 a9       	ldd	r22, Y+49	; 0x31
     dee:	7a a9       	ldd	r23, Y+50	; 0x32
     df0:	8b a9       	ldd	r24, Y+51	; 0x33
     df2:	9c a9       	ldd	r25, Y+52	; 0x34
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	3f ef       	ldi	r19, 0xFF	; 255
     df8:	4f e7       	ldi	r20, 0x7F	; 127
     dfa:	57 e4       	ldi	r21, 0x47	; 71
     dfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e00:	18 16       	cp	r1, r24
     e02:	4c f5       	brge	.+82     	; 0xe56 <LCD_sendCommand+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e04:	6d a9       	ldd	r22, Y+53	; 0x35
     e06:	7e a9       	ldd	r23, Y+54	; 0x36
     e08:	8f a9       	ldd	r24, Y+55	; 0x37
     e0a:	98 ad       	ldd	r25, Y+56	; 0x38
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	40 e2       	ldi	r20, 0x20	; 32
     e12:	51 e4       	ldi	r21, 0x41	; 65
     e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e18:	dc 01       	movw	r26, r24
     e1a:	cb 01       	movw	r24, r22
     e1c:	bc 01       	movw	r22, r24
     e1e:	cd 01       	movw	r24, r26
     e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	98 ab       	std	Y+48, r25	; 0x30
     e2a:	8f a7       	std	Y+47, r24	; 0x2f
     e2c:	0f c0       	rjmp	.+30     	; 0xe4c <LCD_sendCommand+0xd6>
     e2e:	89 e1       	ldi	r24, 0x19	; 25
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	9e a7       	std	Y+46, r25	; 0x2e
     e34:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e36:	8d a5       	ldd	r24, Y+45	; 0x2d
     e38:	9e a5       	ldd	r25, Y+46	; 0x2e
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	f1 f7       	brne	.-4      	; 0xe3a <LCD_sendCommand+0xc4>
     e3e:	9e a7       	std	Y+46, r25	; 0x2e
     e40:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e42:	8f a5       	ldd	r24, Y+47	; 0x2f
     e44:	98 a9       	ldd	r25, Y+48	; 0x30
     e46:	01 97       	sbiw	r24, 0x01	; 1
     e48:	98 ab       	std	Y+48, r25	; 0x30
     e4a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e4c:	8f a5       	ldd	r24, Y+47	; 0x2f
     e4e:	98 a9       	ldd	r25, Y+48	; 0x30
     e50:	00 97       	sbiw	r24, 0x00	; 0
     e52:	69 f7       	brne	.-38     	; 0xe2e <LCD_sendCommand+0xb8>
     e54:	14 c0       	rjmp	.+40     	; 0xe7e <LCD_sendCommand+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e56:	69 a9       	ldd	r22, Y+49	; 0x31
     e58:	7a a9       	ldd	r23, Y+50	; 0x32
     e5a:	8b a9       	ldd	r24, Y+51	; 0x33
     e5c:	9c a9       	ldd	r25, Y+52	; 0x34
     e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e62:	dc 01       	movw	r26, r24
     e64:	cb 01       	movw	r24, r22
     e66:	98 ab       	std	Y+48, r25	; 0x30
     e68:	8f a7       	std	Y+47, r24	; 0x2f
     e6a:	8f a5       	ldd	r24, Y+47	; 0x2f
     e6c:	98 a9       	ldd	r25, Y+48	; 0x30
     e6e:	9c a7       	std	Y+44, r25	; 0x2c
     e70:	8b a7       	std	Y+43, r24	; 0x2b
     e72:	8b a5       	ldd	r24, Y+43	; 0x2b
     e74:	9c a5       	ldd	r25, Y+44	; 0x2c
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	f1 f7       	brne	.-4      	; 0xe76 <LCD_sendCommand+0x100>
     e7a:	9c a7       	std	Y+44, r25	; 0x2c
     e7c:	8b a7       	std	Y+43, r24	; 0x2b
_delay_ms(1);
LCD_CTRL_PORT_DATA |=(1<<E);
     e7e:	a2 e3       	ldi	r26, 0x32	; 50
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e2 e3       	ldi	r30, 0x32	; 50
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	80 64       	ori	r24, 0x40	; 64
     e8a:	8c 93       	st	X, r24
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	a0 e8       	ldi	r26, 0x80	; 128
     e92:	bf e3       	ldi	r27, 0x3F	; 63
     e94:	8f a3       	std	Y+39, r24	; 0x27
     e96:	98 a7       	std	Y+40, r25	; 0x28
     e98:	a9 a7       	std	Y+41, r26	; 0x29
     e9a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e9c:	6f a1       	ldd	r22, Y+39	; 0x27
     e9e:	78 a5       	ldd	r23, Y+40	; 0x28
     ea0:	89 a5       	ldd	r24, Y+41	; 0x29
     ea2:	9a a5       	ldd	r25, Y+42	; 0x2a
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	4a e7       	ldi	r20, 0x7A	; 122
     eaa:	53 e4       	ldi	r21, 0x43	; 67
     eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	8b a3       	std	Y+35, r24	; 0x23
     eb6:	9c a3       	std	Y+36, r25	; 0x24
     eb8:	ad a3       	std	Y+37, r26	; 0x25
     eba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     ebc:	6b a1       	ldd	r22, Y+35	; 0x23
     ebe:	7c a1       	ldd	r23, Y+36	; 0x24
     ec0:	8d a1       	ldd	r24, Y+37	; 0x25
     ec2:	9e a1       	ldd	r25, Y+38	; 0x26
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e8       	ldi	r20, 0x80	; 128
     eca:	5f e3       	ldi	r21, 0x3F	; 63
     ecc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ed0:	88 23       	and	r24, r24
     ed2:	2c f4       	brge	.+10     	; 0xede <LCD_sendCommand+0x168>
		__ticks = 1;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	9a a3       	std	Y+34, r25	; 0x22
     eda:	89 a3       	std	Y+33, r24	; 0x21
     edc:	3f c0       	rjmp	.+126    	; 0xf5c <LCD_sendCommand+0x1e6>
	else if (__tmp > 65535)
     ede:	6b a1       	ldd	r22, Y+35	; 0x23
     ee0:	7c a1       	ldd	r23, Y+36	; 0x24
     ee2:	8d a1       	ldd	r24, Y+37	; 0x25
     ee4:	9e a1       	ldd	r25, Y+38	; 0x26
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	3f ef       	ldi	r19, 0xFF	; 255
     eea:	4f e7       	ldi	r20, 0x7F	; 127
     eec:	57 e4       	ldi	r21, 0x47	; 71
     eee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ef2:	18 16       	cp	r1, r24
     ef4:	4c f5       	brge	.+82     	; 0xf48 <LCD_sendCommand+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef6:	6f a1       	ldd	r22, Y+39	; 0x27
     ef8:	78 a5       	ldd	r23, Y+40	; 0x28
     efa:	89 a5       	ldd	r24, Y+41	; 0x29
     efc:	9a a5       	ldd	r25, Y+42	; 0x2a
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	40 e2       	ldi	r20, 0x20	; 32
     f04:	51 e4       	ldi	r21, 0x41	; 65
     f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	bc 01       	movw	r22, r24
     f10:	cd 01       	movw	r24, r26
     f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	9a a3       	std	Y+34, r25	; 0x22
     f1c:	89 a3       	std	Y+33, r24	; 0x21
     f1e:	0f c0       	rjmp	.+30     	; 0xf3e <LCD_sendCommand+0x1c8>
     f20:	89 e1       	ldi	r24, 0x19	; 25
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	98 a3       	std	Y+32, r25	; 0x20
     f26:	8f 8f       	std	Y+31, r24	; 0x1f
     f28:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f2a:	98 a1       	ldd	r25, Y+32	; 0x20
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	f1 f7       	brne	.-4      	; 0xf2c <LCD_sendCommand+0x1b6>
     f30:	98 a3       	std	Y+32, r25	; 0x20
     f32:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f34:	89 a1       	ldd	r24, Y+33	; 0x21
     f36:	9a a1       	ldd	r25, Y+34	; 0x22
     f38:	01 97       	sbiw	r24, 0x01	; 1
     f3a:	9a a3       	std	Y+34, r25	; 0x22
     f3c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3e:	89 a1       	ldd	r24, Y+33	; 0x21
     f40:	9a a1       	ldd	r25, Y+34	; 0x22
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	69 f7       	brne	.-38     	; 0xf20 <LCD_sendCommand+0x1aa>
     f46:	14 c0       	rjmp	.+40     	; 0xf70 <LCD_sendCommand+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f48:	6b a1       	ldd	r22, Y+35	; 0x23
     f4a:	7c a1       	ldd	r23, Y+36	; 0x24
     f4c:	8d a1       	ldd	r24, Y+37	; 0x25
     f4e:	9e a1       	ldd	r25, Y+38	; 0x26
     f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	9a a3       	std	Y+34, r25	; 0x22
     f5a:	89 a3       	std	Y+33, r24	; 0x21
     f5c:	89 a1       	ldd	r24, Y+33	; 0x21
     f5e:	9a a1       	ldd	r25, Y+34	; 0x22
     f60:	9e 8f       	std	Y+30, r25	; 0x1e
     f62:	8d 8f       	std	Y+29, r24	; 0x1d
     f64:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f66:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	f1 f7       	brne	.-4      	; 0xf68 <LCD_sendCommand+0x1f2>
     f6c:	9e 8f       	std	Y+30, r25	; 0x1e
     f6e:	8d 8f       	std	Y+29, r24	; 0x1d
_delay_ms(1);
LCD_DATA_PORT_DATA =command;
     f70:	e5 e3       	ldi	r30, 0x35	; 53
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	89 ad       	ldd	r24, Y+57	; 0x39
     f76:	80 83       	st	Z, r24
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	a0 e8       	ldi	r26, 0x80	; 128
     f7e:	bf e3       	ldi	r27, 0x3F	; 63
     f80:	89 8f       	std	Y+25, r24	; 0x19
     f82:	9a 8f       	std	Y+26, r25	; 0x1a
     f84:	ab 8f       	std	Y+27, r26	; 0x1b
     f86:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f88:	69 8d       	ldd	r22, Y+25	; 0x19
     f8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	4a e7       	ldi	r20, 0x7A	; 122
     f96:	53 e4       	ldi	r21, 0x43	; 67
     f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9c:	dc 01       	movw	r26, r24
     f9e:	cb 01       	movw	r24, r22
     fa0:	8d 8b       	std	Y+21, r24	; 0x15
     fa2:	9e 8b       	std	Y+22, r25	; 0x16
     fa4:	af 8b       	std	Y+23, r26	; 0x17
     fa6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fa8:	6d 89       	ldd	r22, Y+21	; 0x15
     faa:	7e 89       	ldd	r23, Y+22	; 0x16
     fac:	8f 89       	ldd	r24, Y+23	; 0x17
     fae:	98 8d       	ldd	r25, Y+24	; 0x18
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	40 e8       	ldi	r20, 0x80	; 128
     fb6:	5f e3       	ldi	r21, 0x3F	; 63
     fb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fbc:	88 23       	and	r24, r24
     fbe:	2c f4       	brge	.+10     	; 0xfca <LCD_sendCommand+0x254>
		__ticks = 1;
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	9c 8b       	std	Y+20, r25	; 0x14
     fc6:	8b 8b       	std	Y+19, r24	; 0x13
     fc8:	3f c0       	rjmp	.+126    	; 0x1048 <LCD_sendCommand+0x2d2>
	else if (__tmp > 65535)
     fca:	6d 89       	ldd	r22, Y+21	; 0x15
     fcc:	7e 89       	ldd	r23, Y+22	; 0x16
     fce:	8f 89       	ldd	r24, Y+23	; 0x17
     fd0:	98 8d       	ldd	r25, Y+24	; 0x18
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	3f ef       	ldi	r19, 0xFF	; 255
     fd6:	4f e7       	ldi	r20, 0x7F	; 127
     fd8:	57 e4       	ldi	r21, 0x47	; 71
     fda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fde:	18 16       	cp	r1, r24
     fe0:	4c f5       	brge	.+82     	; 0x1034 <LCD_sendCommand+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe2:	69 8d       	ldd	r22, Y+25	; 0x19
     fe4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fe6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fe8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	40 e2       	ldi	r20, 0x20	; 32
     ff0:	51 e4       	ldi	r21, 0x41	; 65
     ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	bc 01       	movw	r22, r24
     ffc:	cd 01       	movw	r24, r26
     ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1002:	dc 01       	movw	r26, r24
    1004:	cb 01       	movw	r24, r22
    1006:	9c 8b       	std	Y+20, r25	; 0x14
    1008:	8b 8b       	std	Y+19, r24	; 0x13
    100a:	0f c0       	rjmp	.+30     	; 0x102a <LCD_sendCommand+0x2b4>
    100c:	89 e1       	ldi	r24, 0x19	; 25
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	9a 8b       	std	Y+18, r25	; 0x12
    1012:	89 8b       	std	Y+17, r24	; 0x11
    1014:	89 89       	ldd	r24, Y+17	; 0x11
    1016:	9a 89       	ldd	r25, Y+18	; 0x12
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	f1 f7       	brne	.-4      	; 0x1018 <LCD_sendCommand+0x2a2>
    101c:	9a 8b       	std	Y+18, r25	; 0x12
    101e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1020:	8b 89       	ldd	r24, Y+19	; 0x13
    1022:	9c 89       	ldd	r25, Y+20	; 0x14
    1024:	01 97       	sbiw	r24, 0x01	; 1
    1026:	9c 8b       	std	Y+20, r25	; 0x14
    1028:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    102a:	8b 89       	ldd	r24, Y+19	; 0x13
    102c:	9c 89       	ldd	r25, Y+20	; 0x14
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	69 f7       	brne	.-38     	; 0x100c <LCD_sendCommand+0x296>
    1032:	14 c0       	rjmp	.+40     	; 0x105c <LCD_sendCommand+0x2e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1034:	6d 89       	ldd	r22, Y+21	; 0x15
    1036:	7e 89       	ldd	r23, Y+22	; 0x16
    1038:	8f 89       	ldd	r24, Y+23	; 0x17
    103a:	98 8d       	ldd	r25, Y+24	; 0x18
    103c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	9c 8b       	std	Y+20, r25	; 0x14
    1046:	8b 8b       	std	Y+19, r24	; 0x13
    1048:	8b 89       	ldd	r24, Y+19	; 0x13
    104a:	9c 89       	ldd	r25, Y+20	; 0x14
    104c:	98 8b       	std	Y+16, r25	; 0x10
    104e:	8f 87       	std	Y+15, r24	; 0x0f
    1050:	8f 85       	ldd	r24, Y+15	; 0x0f
    1052:	98 89       	ldd	r25, Y+16	; 0x10
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	f1 f7       	brne	.-4      	; 0x1054 <LCD_sendCommand+0x2de>
    1058:	98 8b       	std	Y+16, r25	; 0x10
    105a:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(1);
LCD_CTRL_PORT_DATA &=~(1<<E);
    105c:	a2 e3       	ldi	r26, 0x32	; 50
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e2 e3       	ldi	r30, 0x32	; 50
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	8f 7b       	andi	r24, 0xBF	; 191
    1068:	8c 93       	st	X, r24
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	a0 e8       	ldi	r26, 0x80	; 128
    1070:	bf e3       	ldi	r27, 0x3F	; 63
    1072:	8b 87       	std	Y+11, r24	; 0x0b
    1074:	9c 87       	std	Y+12, r25	; 0x0c
    1076:	ad 87       	std	Y+13, r26	; 0x0d
    1078:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    107a:	6b 85       	ldd	r22, Y+11	; 0x0b
    107c:	7c 85       	ldd	r23, Y+12	; 0x0c
    107e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1080:	9e 85       	ldd	r25, Y+14	; 0x0e
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	4a e7       	ldi	r20, 0x7A	; 122
    1088:	53 e4       	ldi	r21, 0x43	; 67
    108a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	8f 83       	std	Y+7, r24	; 0x07
    1094:	98 87       	std	Y+8, r25	; 0x08
    1096:	a9 87       	std	Y+9, r26	; 0x09
    1098:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    109a:	6f 81       	ldd	r22, Y+7	; 0x07
    109c:	78 85       	ldd	r23, Y+8	; 0x08
    109e:	89 85       	ldd	r24, Y+9	; 0x09
    10a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e8       	ldi	r20, 0x80	; 128
    10a8:	5f e3       	ldi	r21, 0x3F	; 63
    10aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10ae:	88 23       	and	r24, r24
    10b0:	2c f4       	brge	.+10     	; 0x10bc <LCD_sendCommand+0x346>
		__ticks = 1;
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	9e 83       	std	Y+6, r25	; 0x06
    10b8:	8d 83       	std	Y+5, r24	; 0x05
    10ba:	3f c0       	rjmp	.+126    	; 0x113a <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    10bc:	6f 81       	ldd	r22, Y+7	; 0x07
    10be:	78 85       	ldd	r23, Y+8	; 0x08
    10c0:	89 85       	ldd	r24, Y+9	; 0x09
    10c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	3f ef       	ldi	r19, 0xFF	; 255
    10c8:	4f e7       	ldi	r20, 0x7F	; 127
    10ca:	57 e4       	ldi	r21, 0x47	; 71
    10cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10d0:	18 16       	cp	r1, r24
    10d2:	4c f5       	brge	.+82     	; 0x1126 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10da:	9e 85       	ldd	r25, Y+14	; 0x0e
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	40 e2       	ldi	r20, 0x20	; 32
    10e2:	51 e4       	ldi	r21, 0x41	; 65
    10e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	bc 01       	movw	r22, r24
    10ee:	cd 01       	movw	r24, r26
    10f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f4:	dc 01       	movw	r26, r24
    10f6:	cb 01       	movw	r24, r22
    10f8:	9e 83       	std	Y+6, r25	; 0x06
    10fa:	8d 83       	std	Y+5, r24	; 0x05
    10fc:	0f c0       	rjmp	.+30     	; 0x111c <LCD_sendCommand+0x3a6>
    10fe:	89 e1       	ldi	r24, 0x19	; 25
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	9c 83       	std	Y+4, r25	; 0x04
    1104:	8b 83       	std	Y+3, r24	; 0x03
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	9c 81       	ldd	r25, Y+4	; 0x04
    110a:	01 97       	sbiw	r24, 0x01	; 1
    110c:	f1 f7       	brne	.-4      	; 0x110a <LCD_sendCommand+0x394>
    110e:	9c 83       	std	Y+4, r25	; 0x04
    1110:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1112:	8d 81       	ldd	r24, Y+5	; 0x05
    1114:	9e 81       	ldd	r25, Y+6	; 0x06
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	9e 83       	std	Y+6, r25	; 0x06
    111a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    111c:	8d 81       	ldd	r24, Y+5	; 0x05
    111e:	9e 81       	ldd	r25, Y+6	; 0x06
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	69 f7       	brne	.-38     	; 0x10fe <LCD_sendCommand+0x388>
    1124:	14 c0       	rjmp	.+40     	; 0x114e <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1126:	6f 81       	ldd	r22, Y+7	; 0x07
    1128:	78 85       	ldd	r23, Y+8	; 0x08
    112a:	89 85       	ldd	r24, Y+9	; 0x09
    112c:	9a 85       	ldd	r25, Y+10	; 0x0a
    112e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	9e 83       	std	Y+6, r25	; 0x06
    1138:	8d 83       	std	Y+5, r24	; 0x05
    113a:	8d 81       	ldd	r24, Y+5	; 0x05
    113c:	9e 81       	ldd	r25, Y+6	; 0x06
    113e:	9a 83       	std	Y+2, r25	; 0x02
    1140:	89 83       	std	Y+1, r24	; 0x01
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	9a 81       	ldd	r25, Y+2	; 0x02
    1146:	01 97       	sbiw	r24, 0x01	; 1
    1148:	f1 f7       	brne	.-4      	; 0x1146 <LCD_sendCommand+0x3d0>
    114a:	9a 83       	std	Y+2, r25	; 0x02
    114c:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(1);
}
    114e:	e9 96       	adiw	r28, 0x39	; 57
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	f8 94       	cli
    1154:	de bf       	out	0x3e, r29	; 62
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	cd bf       	out	0x3d, r28	; 61
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <LCD_displayChar>:
void LCD_displayChar(char data){
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	e9 97       	sbiw	r28, 0x39	; 57
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	89 af       	std	Y+57, r24	; 0x39
	LCD_CTRL_PORT_DATA |=(1<<RS);
    1176:	a2 e3       	ldi	r26, 0x32	; 50
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e2 e3       	ldi	r30, 0x32	; 50
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	80 61       	ori	r24, 0x10	; 16
    1182:	8c 93       	st	X, r24
	LCD_CTRL_PORT_DATA &=~(1<<RW);
    1184:	a2 e3       	ldi	r26, 0x32	; 50
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e2 e3       	ldi	r30, 0x32	; 50
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	8f 7d       	andi	r24, 0xDF	; 223
    1190:	8c 93       	st	X, r24
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	a0 e8       	ldi	r26, 0x80	; 128
    1198:	bf e3       	ldi	r27, 0x3F	; 63
    119a:	8d ab       	std	Y+53, r24	; 0x35
    119c:	9e ab       	std	Y+54, r25	; 0x36
    119e:	af ab       	std	Y+55, r26	; 0x37
    11a0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a2:	6d a9       	ldd	r22, Y+53	; 0x35
    11a4:	7e a9       	ldd	r23, Y+54	; 0x36
    11a6:	8f a9       	ldd	r24, Y+55	; 0x37
    11a8:	98 ad       	ldd	r25, Y+56	; 0x38
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	4a e7       	ldi	r20, 0x7A	; 122
    11b0:	53 e4       	ldi	r21, 0x43	; 67
    11b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b6:	dc 01       	movw	r26, r24
    11b8:	cb 01       	movw	r24, r22
    11ba:	89 ab       	std	Y+49, r24	; 0x31
    11bc:	9a ab       	std	Y+50, r25	; 0x32
    11be:	ab ab       	std	Y+51, r26	; 0x33
    11c0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11c2:	69 a9       	ldd	r22, Y+49	; 0x31
    11c4:	7a a9       	ldd	r23, Y+50	; 0x32
    11c6:	8b a9       	ldd	r24, Y+51	; 0x33
    11c8:	9c a9       	ldd	r25, Y+52	; 0x34
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	40 e8       	ldi	r20, 0x80	; 128
    11d0:	5f e3       	ldi	r21, 0x3F	; 63
    11d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11d6:	88 23       	and	r24, r24
    11d8:	2c f4       	brge	.+10     	; 0x11e4 <LCD_displayChar+0x84>
		__ticks = 1;
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	98 ab       	std	Y+48, r25	; 0x30
    11e0:	8f a7       	std	Y+47, r24	; 0x2f
    11e2:	3f c0       	rjmp	.+126    	; 0x1262 <LCD_displayChar+0x102>
	else if (__tmp > 65535)
    11e4:	69 a9       	ldd	r22, Y+49	; 0x31
    11e6:	7a a9       	ldd	r23, Y+50	; 0x32
    11e8:	8b a9       	ldd	r24, Y+51	; 0x33
    11ea:	9c a9       	ldd	r25, Y+52	; 0x34
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	3f ef       	ldi	r19, 0xFF	; 255
    11f0:	4f e7       	ldi	r20, 0x7F	; 127
    11f2:	57 e4       	ldi	r21, 0x47	; 71
    11f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11f8:	18 16       	cp	r1, r24
    11fa:	4c f5       	brge	.+82     	; 0x124e <LCD_displayChar+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11fc:	6d a9       	ldd	r22, Y+53	; 0x35
    11fe:	7e a9       	ldd	r23, Y+54	; 0x36
    1200:	8f a9       	ldd	r24, Y+55	; 0x37
    1202:	98 ad       	ldd	r25, Y+56	; 0x38
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	40 e2       	ldi	r20, 0x20	; 32
    120a:	51 e4       	ldi	r21, 0x41	; 65
    120c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	bc 01       	movw	r22, r24
    1216:	cd 01       	movw	r24, r26
    1218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    121c:	dc 01       	movw	r26, r24
    121e:	cb 01       	movw	r24, r22
    1220:	98 ab       	std	Y+48, r25	; 0x30
    1222:	8f a7       	std	Y+47, r24	; 0x2f
    1224:	0f c0       	rjmp	.+30     	; 0x1244 <LCD_displayChar+0xe4>
    1226:	89 e1       	ldi	r24, 0x19	; 25
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	9e a7       	std	Y+46, r25	; 0x2e
    122c:	8d a7       	std	Y+45, r24	; 0x2d
    122e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1230:	9e a5       	ldd	r25, Y+46	; 0x2e
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	f1 f7       	brne	.-4      	; 0x1232 <LCD_displayChar+0xd2>
    1236:	9e a7       	std	Y+46, r25	; 0x2e
    1238:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    123a:	8f a5       	ldd	r24, Y+47	; 0x2f
    123c:	98 a9       	ldd	r25, Y+48	; 0x30
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	98 ab       	std	Y+48, r25	; 0x30
    1242:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1244:	8f a5       	ldd	r24, Y+47	; 0x2f
    1246:	98 a9       	ldd	r25, Y+48	; 0x30
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	69 f7       	brne	.-38     	; 0x1226 <LCD_displayChar+0xc6>
    124c:	14 c0       	rjmp	.+40     	; 0x1276 <LCD_displayChar+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    124e:	69 a9       	ldd	r22, Y+49	; 0x31
    1250:	7a a9       	ldd	r23, Y+50	; 0x32
    1252:	8b a9       	ldd	r24, Y+51	; 0x33
    1254:	9c a9       	ldd	r25, Y+52	; 0x34
    1256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	98 ab       	std	Y+48, r25	; 0x30
    1260:	8f a7       	std	Y+47, r24	; 0x2f
    1262:	8f a5       	ldd	r24, Y+47	; 0x2f
    1264:	98 a9       	ldd	r25, Y+48	; 0x30
    1266:	9c a7       	std	Y+44, r25	; 0x2c
    1268:	8b a7       	std	Y+43, r24	; 0x2b
    126a:	8b a5       	ldd	r24, Y+43	; 0x2b
    126c:	9c a5       	ldd	r25, Y+44	; 0x2c
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	f1 f7       	brne	.-4      	; 0x126e <LCD_displayChar+0x10e>
    1272:	9c a7       	std	Y+44, r25	; 0x2c
    1274:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_CTRL_PORT_DATA |=(1<<E);
    1276:	a2 e3       	ldi	r26, 0x32	; 50
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e2 e3       	ldi	r30, 0x32	; 50
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	80 64       	ori	r24, 0x40	; 64
    1282:	8c 93       	st	X, r24
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	a0 e8       	ldi	r26, 0x80	; 128
    128a:	bf e3       	ldi	r27, 0x3F	; 63
    128c:	8f a3       	std	Y+39, r24	; 0x27
    128e:	98 a7       	std	Y+40, r25	; 0x28
    1290:	a9 a7       	std	Y+41, r26	; 0x29
    1292:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1294:	6f a1       	ldd	r22, Y+39	; 0x27
    1296:	78 a5       	ldd	r23, Y+40	; 0x28
    1298:	89 a5       	ldd	r24, Y+41	; 0x29
    129a:	9a a5       	ldd	r25, Y+42	; 0x2a
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	4a e7       	ldi	r20, 0x7A	; 122
    12a2:	53 e4       	ldi	r21, 0x43	; 67
    12a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	8b a3       	std	Y+35, r24	; 0x23
    12ae:	9c a3       	std	Y+36, r25	; 0x24
    12b0:	ad a3       	std	Y+37, r26	; 0x25
    12b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12b4:	6b a1       	ldd	r22, Y+35	; 0x23
    12b6:	7c a1       	ldd	r23, Y+36	; 0x24
    12b8:	8d a1       	ldd	r24, Y+37	; 0x25
    12ba:	9e a1       	ldd	r25, Y+38	; 0x26
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	40 e8       	ldi	r20, 0x80	; 128
    12c2:	5f e3       	ldi	r21, 0x3F	; 63
    12c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12c8:	88 23       	and	r24, r24
    12ca:	2c f4       	brge	.+10     	; 0x12d6 <LCD_displayChar+0x176>
		__ticks = 1;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	9a a3       	std	Y+34, r25	; 0x22
    12d2:	89 a3       	std	Y+33, r24	; 0x21
    12d4:	3f c0       	rjmp	.+126    	; 0x1354 <LCD_displayChar+0x1f4>
	else if (__tmp > 65535)
    12d6:	6b a1       	ldd	r22, Y+35	; 0x23
    12d8:	7c a1       	ldd	r23, Y+36	; 0x24
    12da:	8d a1       	ldd	r24, Y+37	; 0x25
    12dc:	9e a1       	ldd	r25, Y+38	; 0x26
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	3f ef       	ldi	r19, 0xFF	; 255
    12e2:	4f e7       	ldi	r20, 0x7F	; 127
    12e4:	57 e4       	ldi	r21, 0x47	; 71
    12e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12ea:	18 16       	cp	r1, r24
    12ec:	4c f5       	brge	.+82     	; 0x1340 <LCD_displayChar+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ee:	6f a1       	ldd	r22, Y+39	; 0x27
    12f0:	78 a5       	ldd	r23, Y+40	; 0x28
    12f2:	89 a5       	ldd	r24, Y+41	; 0x29
    12f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	40 e2       	ldi	r20, 0x20	; 32
    12fc:	51 e4       	ldi	r21, 0x41	; 65
    12fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	bc 01       	movw	r22, r24
    1308:	cd 01       	movw	r24, r26
    130a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	9a a3       	std	Y+34, r25	; 0x22
    1314:	89 a3       	std	Y+33, r24	; 0x21
    1316:	0f c0       	rjmp	.+30     	; 0x1336 <LCD_displayChar+0x1d6>
    1318:	89 e1       	ldi	r24, 0x19	; 25
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	98 a3       	std	Y+32, r25	; 0x20
    131e:	8f 8f       	std	Y+31, r24	; 0x1f
    1320:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1322:	98 a1       	ldd	r25, Y+32	; 0x20
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	f1 f7       	brne	.-4      	; 0x1324 <LCD_displayChar+0x1c4>
    1328:	98 a3       	std	Y+32, r25	; 0x20
    132a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132c:	89 a1       	ldd	r24, Y+33	; 0x21
    132e:	9a a1       	ldd	r25, Y+34	; 0x22
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	9a a3       	std	Y+34, r25	; 0x22
    1334:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1336:	89 a1       	ldd	r24, Y+33	; 0x21
    1338:	9a a1       	ldd	r25, Y+34	; 0x22
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	69 f7       	brne	.-38     	; 0x1318 <LCD_displayChar+0x1b8>
    133e:	14 c0       	rjmp	.+40     	; 0x1368 <LCD_displayChar+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1340:	6b a1       	ldd	r22, Y+35	; 0x23
    1342:	7c a1       	ldd	r23, Y+36	; 0x24
    1344:	8d a1       	ldd	r24, Y+37	; 0x25
    1346:	9e a1       	ldd	r25, Y+38	; 0x26
    1348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	9a a3       	std	Y+34, r25	; 0x22
    1352:	89 a3       	std	Y+33, r24	; 0x21
    1354:	89 a1       	ldd	r24, Y+33	; 0x21
    1356:	9a a1       	ldd	r25, Y+34	; 0x22
    1358:	9e 8f       	std	Y+30, r25	; 0x1e
    135a:	8d 8f       	std	Y+29, r24	; 0x1d
    135c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    135e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	f1 f7       	brne	.-4      	; 0x1360 <LCD_displayChar+0x200>
    1364:	9e 8f       	std	Y+30, r25	; 0x1e
    1366:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_DATA_PORT_DATA =data;
    1368:	e5 e3       	ldi	r30, 0x35	; 53
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	89 ad       	ldd	r24, Y+57	; 0x39
    136e:	80 83       	st	Z, r24
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	a0 e8       	ldi	r26, 0x80	; 128
    1376:	bf e3       	ldi	r27, 0x3F	; 63
    1378:	89 8f       	std	Y+25, r24	; 0x19
    137a:	9a 8f       	std	Y+26, r25	; 0x1a
    137c:	ab 8f       	std	Y+27, r26	; 0x1b
    137e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1380:	69 8d       	ldd	r22, Y+25	; 0x19
    1382:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1384:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1386:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	4a e7       	ldi	r20, 0x7A	; 122
    138e:	53 e4       	ldi	r21, 0x43	; 67
    1390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	8d 8b       	std	Y+21, r24	; 0x15
    139a:	9e 8b       	std	Y+22, r25	; 0x16
    139c:	af 8b       	std	Y+23, r26	; 0x17
    139e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13a0:	6d 89       	ldd	r22, Y+21	; 0x15
    13a2:	7e 89       	ldd	r23, Y+22	; 0x16
    13a4:	8f 89       	ldd	r24, Y+23	; 0x17
    13a6:	98 8d       	ldd	r25, Y+24	; 0x18
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	40 e8       	ldi	r20, 0x80	; 128
    13ae:	5f e3       	ldi	r21, 0x3F	; 63
    13b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13b4:	88 23       	and	r24, r24
    13b6:	2c f4       	brge	.+10     	; 0x13c2 <LCD_displayChar+0x262>
		__ticks = 1;
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	9c 8b       	std	Y+20, r25	; 0x14
    13be:	8b 8b       	std	Y+19, r24	; 0x13
    13c0:	3f c0       	rjmp	.+126    	; 0x1440 <LCD_displayChar+0x2e0>
	else if (__tmp > 65535)
    13c2:	6d 89       	ldd	r22, Y+21	; 0x15
    13c4:	7e 89       	ldd	r23, Y+22	; 0x16
    13c6:	8f 89       	ldd	r24, Y+23	; 0x17
    13c8:	98 8d       	ldd	r25, Y+24	; 0x18
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	3f ef       	ldi	r19, 0xFF	; 255
    13ce:	4f e7       	ldi	r20, 0x7F	; 127
    13d0:	57 e4       	ldi	r21, 0x47	; 71
    13d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13d6:	18 16       	cp	r1, r24
    13d8:	4c f5       	brge	.+82     	; 0x142c <LCD_displayChar+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13da:	69 8d       	ldd	r22, Y+25	; 0x19
    13dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e2       	ldi	r20, 0x20	; 32
    13e8:	51 e4       	ldi	r21, 0x41	; 65
    13ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ee:	dc 01       	movw	r26, r24
    13f0:	cb 01       	movw	r24, r22
    13f2:	bc 01       	movw	r22, r24
    13f4:	cd 01       	movw	r24, r26
    13f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	9c 8b       	std	Y+20, r25	; 0x14
    1400:	8b 8b       	std	Y+19, r24	; 0x13
    1402:	0f c0       	rjmp	.+30     	; 0x1422 <LCD_displayChar+0x2c2>
    1404:	89 e1       	ldi	r24, 0x19	; 25
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	9a 8b       	std	Y+18, r25	; 0x12
    140a:	89 8b       	std	Y+17, r24	; 0x11
    140c:	89 89       	ldd	r24, Y+17	; 0x11
    140e:	9a 89       	ldd	r25, Y+18	; 0x12
    1410:	01 97       	sbiw	r24, 0x01	; 1
    1412:	f1 f7       	brne	.-4      	; 0x1410 <LCD_displayChar+0x2b0>
    1414:	9a 8b       	std	Y+18, r25	; 0x12
    1416:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1418:	8b 89       	ldd	r24, Y+19	; 0x13
    141a:	9c 89       	ldd	r25, Y+20	; 0x14
    141c:	01 97       	sbiw	r24, 0x01	; 1
    141e:	9c 8b       	std	Y+20, r25	; 0x14
    1420:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1422:	8b 89       	ldd	r24, Y+19	; 0x13
    1424:	9c 89       	ldd	r25, Y+20	; 0x14
    1426:	00 97       	sbiw	r24, 0x00	; 0
    1428:	69 f7       	brne	.-38     	; 0x1404 <LCD_displayChar+0x2a4>
    142a:	14 c0       	rjmp	.+40     	; 0x1454 <LCD_displayChar+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    142c:	6d 89       	ldd	r22, Y+21	; 0x15
    142e:	7e 89       	ldd	r23, Y+22	; 0x16
    1430:	8f 89       	ldd	r24, Y+23	; 0x17
    1432:	98 8d       	ldd	r25, Y+24	; 0x18
    1434:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1438:	dc 01       	movw	r26, r24
    143a:	cb 01       	movw	r24, r22
    143c:	9c 8b       	std	Y+20, r25	; 0x14
    143e:	8b 8b       	std	Y+19, r24	; 0x13
    1440:	8b 89       	ldd	r24, Y+19	; 0x13
    1442:	9c 89       	ldd	r25, Y+20	; 0x14
    1444:	98 8b       	std	Y+16, r25	; 0x10
    1446:	8f 87       	std	Y+15, r24	; 0x0f
    1448:	8f 85       	ldd	r24, Y+15	; 0x0f
    144a:	98 89       	ldd	r25, Y+16	; 0x10
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	f1 f7       	brne	.-4      	; 0x144c <LCD_displayChar+0x2ec>
    1450:	98 8b       	std	Y+16, r25	; 0x10
    1452:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_CTRL_PORT_DATA &=~(1<<E);
    1454:	a2 e3       	ldi	r26, 0x32	; 50
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e2 e3       	ldi	r30, 0x32	; 50
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	8f 7b       	andi	r24, 0xBF	; 191
    1460:	8c 93       	st	X, r24
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	a0 e8       	ldi	r26, 0x80	; 128
    1468:	bf e3       	ldi	r27, 0x3F	; 63
    146a:	8b 87       	std	Y+11, r24	; 0x0b
    146c:	9c 87       	std	Y+12, r25	; 0x0c
    146e:	ad 87       	std	Y+13, r26	; 0x0d
    1470:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1472:	6b 85       	ldd	r22, Y+11	; 0x0b
    1474:	7c 85       	ldd	r23, Y+12	; 0x0c
    1476:	8d 85       	ldd	r24, Y+13	; 0x0d
    1478:	9e 85       	ldd	r25, Y+14	; 0x0e
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	4a e7       	ldi	r20, 0x7A	; 122
    1480:	53 e4       	ldi	r21, 0x43	; 67
    1482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	8f 83       	std	Y+7, r24	; 0x07
    148c:	98 87       	std	Y+8, r25	; 0x08
    148e:	a9 87       	std	Y+9, r26	; 0x09
    1490:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1492:	6f 81       	ldd	r22, Y+7	; 0x07
    1494:	78 85       	ldd	r23, Y+8	; 0x08
    1496:	89 85       	ldd	r24, Y+9	; 0x09
    1498:	9a 85       	ldd	r25, Y+10	; 0x0a
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	40 e8       	ldi	r20, 0x80	; 128
    14a0:	5f e3       	ldi	r21, 0x3F	; 63
    14a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14a6:	88 23       	and	r24, r24
    14a8:	2c f4       	brge	.+10     	; 0x14b4 <LCD_displayChar+0x354>
		__ticks = 1;
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	9e 83       	std	Y+6, r25	; 0x06
    14b0:	8d 83       	std	Y+5, r24	; 0x05
    14b2:	3f c0       	rjmp	.+126    	; 0x1532 <LCD_displayChar+0x3d2>
	else if (__tmp > 65535)
    14b4:	6f 81       	ldd	r22, Y+7	; 0x07
    14b6:	78 85       	ldd	r23, Y+8	; 0x08
    14b8:	89 85       	ldd	r24, Y+9	; 0x09
    14ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	3f ef       	ldi	r19, 0xFF	; 255
    14c0:	4f e7       	ldi	r20, 0x7F	; 127
    14c2:	57 e4       	ldi	r21, 0x47	; 71
    14c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14c8:	18 16       	cp	r1, r24
    14ca:	4c f5       	brge	.+82     	; 0x151e <LCD_displayChar+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    14d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e2       	ldi	r20, 0x20	; 32
    14da:	51 e4       	ldi	r21, 0x41	; 65
    14dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	bc 01       	movw	r22, r24
    14e6:	cd 01       	movw	r24, r26
    14e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	9e 83       	std	Y+6, r25	; 0x06
    14f2:	8d 83       	std	Y+5, r24	; 0x05
    14f4:	0f c0       	rjmp	.+30     	; 0x1514 <LCD_displayChar+0x3b4>
    14f6:	89 e1       	ldi	r24, 0x19	; 25
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	9c 83       	std	Y+4, r25	; 0x04
    14fc:	8b 83       	std	Y+3, r24	; 0x03
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	9c 81       	ldd	r25, Y+4	; 0x04
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	f1 f7       	brne	.-4      	; 0x1502 <LCD_displayChar+0x3a2>
    1506:	9c 83       	std	Y+4, r25	; 0x04
    1508:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    150a:	8d 81       	ldd	r24, Y+5	; 0x05
    150c:	9e 81       	ldd	r25, Y+6	; 0x06
    150e:	01 97       	sbiw	r24, 0x01	; 1
    1510:	9e 83       	std	Y+6, r25	; 0x06
    1512:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1514:	8d 81       	ldd	r24, Y+5	; 0x05
    1516:	9e 81       	ldd	r25, Y+6	; 0x06
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	69 f7       	brne	.-38     	; 0x14f6 <LCD_displayChar+0x396>
    151c:	14 c0       	rjmp	.+40     	; 0x1546 <LCD_displayChar+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151e:	6f 81       	ldd	r22, Y+7	; 0x07
    1520:	78 85       	ldd	r23, Y+8	; 0x08
    1522:	89 85       	ldd	r24, Y+9	; 0x09
    1524:	9a 85       	ldd	r25, Y+10	; 0x0a
    1526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	9e 83       	std	Y+6, r25	; 0x06
    1530:	8d 83       	std	Y+5, r24	; 0x05
    1532:	8d 81       	ldd	r24, Y+5	; 0x05
    1534:	9e 81       	ldd	r25, Y+6	; 0x06
    1536:	9a 83       	std	Y+2, r25	; 0x02
    1538:	89 83       	std	Y+1, r24	; 0x01
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	9a 81       	ldd	r25, Y+2	; 0x02
    153e:	01 97       	sbiw	r24, 0x01	; 1
    1540:	f1 f7       	brne	.-4      	; 0x153e <LCD_displayChar+0x3de>
    1542:	9a 83       	std	Y+2, r25	; 0x02
    1544:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1546:	e9 96       	adiw	r28, 0x39	; 57
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	cd bf       	out	0x3d, r28	; 61
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	08 95       	ret

00001558 <LCD_displayString>:
void LCD_displayString(const char * str){
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	00 d0       	rcall	.+0      	; 0x155e <LCD_displayString+0x6>
    155e:	00 d0       	rcall	.+0      	; 0x1560 <LCD_displayString+0x8>
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	9c 83       	std	Y+4, r25	; 0x04
    1566:	8b 83       	std	Y+3, r24	; 0x03
	int i =0;
    1568:	1a 82       	std	Y+2, r1	; 0x02
    156a:	19 82       	std	Y+1, r1	; 0x01
    156c:	0f c0       	rjmp	.+30     	; 0x158c <LCD_displayString+0x34>
	while(str[i] != '\0'){
	LCD_displayChar(str[i]);
    156e:	29 81       	ldd	r18, Y+1	; 0x01
    1570:	3a 81       	ldd	r19, Y+2	; 0x02
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	9c 81       	ldd	r25, Y+4	; 0x04
    1576:	fc 01       	movw	r30, r24
    1578:	e2 0f       	add	r30, r18
    157a:	f3 1f       	adc	r31, r19
    157c:	80 81       	ld	r24, Z
    157e:	0e 94 b0 08 	call	0x1160	; 0x1160 <LCD_displayChar>
	i++;
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	9a 81       	ldd	r25, Y+2	; 0x02
    1586:	01 96       	adiw	r24, 0x01	; 1
    1588:	9a 83       	std	Y+2, r25	; 0x02
    158a:	89 83       	std	Y+1, r24	; 0x01
	LCD_CTRL_PORT_DATA &=~(1<<E);
	_delay_ms(1);
}
void LCD_displayString(const char * str){
	int i =0;
	while(str[i] != '\0'){
    158c:	29 81       	ldd	r18, Y+1	; 0x01
    158e:	3a 81       	ldd	r19, Y+2	; 0x02
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	9c 81       	ldd	r25, Y+4	; 0x04
    1594:	fc 01       	movw	r30, r24
    1596:	e2 0f       	add	r30, r18
    1598:	f3 1f       	adc	r31, r19
    159a:	80 81       	ld	r24, Z
    159c:	88 23       	and	r24, r24
    159e:	39 f7       	brne	.-50     	; 0x156e <LCD_displayString+0x16>
	LCD_displayChar(str[i]);
	i++;
}
}
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8 row,uint8 col){
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <LCD_goToRowColumn+0x6>
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <LCD_goToRowColumn+0x8>
    15b6:	00 d0       	rcall	.+0      	; 0x15b8 <LCD_goToRowColumn+0xa>
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	8b 83       	std	Y+3, r24	; 0x03
    15be:	6c 83       	std	Y+4, r22	; 0x04
	uint16 address =0;
    15c0:	1a 82       	std	Y+2, r1	; 0x02
    15c2:	19 82       	std	Y+1, r1	; 0x01
	switch (row){
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	3e 83       	std	Y+6, r19	; 0x06
    15cc:	2d 83       	std	Y+5, r18	; 0x05
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	9e 81       	ldd	r25, Y+6	; 0x06
    15d2:	81 30       	cpi	r24, 0x01	; 1
    15d4:	91 05       	cpc	r25, r1
    15d6:	d9 f0       	breq	.+54     	; 0x160e <LCD_goToRowColumn+0x60>
    15d8:	2d 81       	ldd	r18, Y+5	; 0x05
    15da:	3e 81       	ldd	r19, Y+6	; 0x06
    15dc:	22 30       	cpi	r18, 0x02	; 2
    15de:	31 05       	cpc	r19, r1
    15e0:	2c f4       	brge	.+10     	; 0x15ec <LCD_goToRowColumn+0x3e>
    15e2:	8d 81       	ldd	r24, Y+5	; 0x05
    15e4:	9e 81       	ldd	r25, Y+6	; 0x06
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	61 f0       	breq	.+24     	; 0x1602 <LCD_goToRowColumn+0x54>
    15ea:	27 c0       	rjmp	.+78     	; 0x163a <LCD_goToRowColumn+0x8c>
    15ec:	2d 81       	ldd	r18, Y+5	; 0x05
    15ee:	3e 81       	ldd	r19, Y+6	; 0x06
    15f0:	22 30       	cpi	r18, 0x02	; 2
    15f2:	31 05       	cpc	r19, r1
    15f4:	a1 f0       	breq	.+40     	; 0x161e <LCD_goToRowColumn+0x70>
    15f6:	8d 81       	ldd	r24, Y+5	; 0x05
    15f8:	9e 81       	ldd	r25, Y+6	; 0x06
    15fa:	83 30       	cpi	r24, 0x03	; 3
    15fc:	91 05       	cpc	r25, r1
    15fe:	b1 f0       	breq	.+44     	; 0x162c <LCD_goToRowColumn+0x7e>
    1600:	1c c0       	rjmp	.+56     	; 0x163a <LCD_goToRowColumn+0x8c>
	case 0:
		address = col;
    1602:	8c 81       	ldd	r24, Y+4	; 0x04
    1604:	88 2f       	mov	r24, r24
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	9a 83       	std	Y+2, r25	; 0x02
    160a:	89 83       	std	Y+1, r24	; 0x01
    160c:	16 c0       	rjmp	.+44     	; 0x163a <LCD_goToRowColumn+0x8c>
		break;
	case 1:
		address = 0x40+col;
    160e:	8c 81       	ldd	r24, Y+4	; 0x04
    1610:	88 2f       	mov	r24, r24
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	80 5c       	subi	r24, 0xC0	; 192
    1616:	9f 4f       	sbci	r25, 0xFF	; 255
    1618:	9a 83       	std	Y+2, r25	; 0x02
    161a:	89 83       	std	Y+1, r24	; 0x01
    161c:	0e c0       	rjmp	.+28     	; 0x163a <LCD_goToRowColumn+0x8c>
		break;
	case 2:
		address = 0x10+col;
    161e:	8c 81       	ldd	r24, Y+4	; 0x04
    1620:	88 2f       	mov	r24, r24
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	40 96       	adiw	r24, 0x10	; 16
    1626:	9a 83       	std	Y+2, r25	; 0x02
    1628:	89 83       	std	Y+1, r24	; 0x01
    162a:	07 c0       	rjmp	.+14     	; 0x163a <LCD_goToRowColumn+0x8c>
		break;
	case 3:
		address = 0x50+col;
    162c:	8c 81       	ldd	r24, Y+4	; 0x04
    162e:	88 2f       	mov	r24, r24
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	80 5b       	subi	r24, 0xB0	; 176
    1634:	9f 4f       	sbci	r25, 0xFF	; 255
    1636:	9a 83       	std	Y+2, r25	; 0x02
    1638:	89 83       	std	Y+1, r24	; 0x01
		break;
	default :
		break;
	}
	LCD_sendCommand( 0x80|address);//to move the courser first bit =1 and the address;
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	80 68       	ori	r24, 0x80	; 128
    163e:	0e 94 bb 06 	call	0xd76	; 0xd76 <LCD_sendCommand>
}
    1642:	26 96       	adiw	r28, 0x06	; 6
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	08 95       	ret

00001654 <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char * str){
    1654:	df 93       	push	r29
    1656:	cf 93       	push	r28
    1658:	00 d0       	rcall	.+0      	; 0x165a <LCD_displayStringRowColumn+0x6>
    165a:	00 d0       	rcall	.+0      	; 0x165c <LCD_displayStringRowColumn+0x8>
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	89 83       	std	Y+1, r24	; 0x01
    1662:	6a 83       	std	Y+2, r22	; 0x02
    1664:	5c 83       	std	Y+4, r21	; 0x04
    1666:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col);
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	6a 81       	ldd	r22, Y+2	; 0x02
    166c:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <LCD_goToRowColumn>
	LCD_displayString(str);
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	9c 81       	ldd	r25, Y+4	; 0x04
    1674:	0e 94 ac 0a 	call	0x1558	; 0x1558 <LCD_displayString>

}
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	08 95       	ret

00001686 <LCD_intgerToString>:
void LCD_intgerToString(int data)
{
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
    168e:	62 97       	sbiw	r28, 0x12	; 18
    1690:	0f b6       	in	r0, 0x3f	; 63
    1692:	f8 94       	cli
    1694:	de bf       	out	0x3e, r29	; 62
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	cd bf       	out	0x3d, r28	; 61
    169a:	9a 8b       	std	Y+18, r25	; 0x12
    169c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    169e:	89 89       	ldd	r24, Y+17	; 0x11
    16a0:	9a 89       	ldd	r25, Y+18	; 0x12
    16a2:	9e 01       	movw	r18, r28
    16a4:	2f 5f       	subi	r18, 0xFF	; 255
    16a6:	3f 4f       	sbci	r19, 0xFF	; 255
    16a8:	b9 01       	movw	r22, r18
    16aa:	4a e0       	ldi	r20, 0x0A	; 10
    16ac:	50 e0       	ldi	r21, 0x00	; 0
    16ae:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <itoa>
   LCD_displayString(buff);
    16b2:	ce 01       	movw	r24, r28
    16b4:	01 96       	adiw	r24, 0x01	; 1
    16b6:	0e 94 ac 0a 	call	0x1558	; 0x1558 <LCD_displayString>
}
    16ba:	62 96       	adiw	r28, 0x12	; 18
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	de bf       	out	0x3e, r29	; 62
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	cd bf       	out	0x3d, r28	; 61
    16c6:	cf 91       	pop	r28
    16c8:	df 91       	pop	r29
    16ca:	08 95       	ret

000016cc <LCD_clearScreen>:

void LCD_clearScreen(){
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(0x01);
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	0e 94 bb 06 	call	0xd76	; 0xd76 <LCD_sendCommand>
}
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	08 95       	ret

000016e0 <ISR_Count>:
uint8 volatile sec = 0;
UartConfig UartConf = { disableParity, oneStop, eightBits, 9600 };
char *password = "!!!!!";
char *ch = "!!!!!";

void ISR_Count(void) {
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62

	tick++;
    16e8:	80 91 54 01 	lds	r24, 0x0154
    16ec:	8f 5f       	subi	r24, 0xFF	; 255
    16ee:	80 93 54 01 	sts	0x0154, r24
	if (tick == NO_PER_SEC) {
    16f2:	80 91 54 01 	lds	r24, 0x0154
    16f6:	80 32       	cpi	r24, 0x20	; 32
    16f8:	39 f4       	brne	.+14     	; 0x1708 <ISR_Count+0x28>
		//	UART_sentChar(&UartConf, 'N');
		//UART_sentString(&UartConf, password);

		sec++;
    16fa:	80 91 56 01 	lds	r24, 0x0156
    16fe:	8f 5f       	subi	r24, 0xFF	; 255
    1700:	80 93 56 01 	sts	0x0156, r24
		tick = 0;
    1704:	10 92 54 01 	sts	0x0154, r1
	}

}
    1708:	cf 91       	pop	r28
    170a:	df 91       	pop	r29
    170c:	08 95       	ret

0000170e <main>:

int main(void) {
    170e:	df 93       	push	r29
    1710:	cf 93       	push	r28
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	e2 97       	sbiw	r28, 0x32	; 50
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61

	uint8 done = 0;
    1722:	1e a6       	std	Y+46, r1	; 0x2e
	uint8 key;
	uint8 match = 0;
    1724:	1c a6       	std	Y+44, r1	; 0x2c
	uint8 c;
//	UartConfig  UartConf = { disableParity, oneStop, eightBits, 9600 };
	Timer0Config Timer0Conf = { CTC, 0, clk_1024, 245 };
    1726:	82 e0       	ldi	r24, 0x02	; 2
    1728:	8f a7       	std	Y+47, r24	; 0x2f
    172a:	18 aa       	std	Y+48, r1	; 0x30
    172c:	85 e0       	ldi	r24, 0x05	; 5
    172e:	89 ab       	std	Y+49, r24	; 0x31
    1730:	85 ef       	ldi	r24, 0xF5	; 245
    1732:	8a ab       	std	Y+50, r24	; 0x32
	SREG |= (1 << 7);
    1734:	af e5       	ldi	r26, 0x5F	; 95
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	ef e5       	ldi	r30, 0x5F	; 95
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	80 68       	ori	r24, 0x80	; 128
    1740:	8c 93       	st	X, r24
	UART_init(&UartConf);
    1742:	8a e4       	ldi	r24, 0x4A	; 74
    1744:	91 e0       	ldi	r25, 0x01	; 1
    1746:	0e 94 4c 1c 	call	0x3898	; 0x3898 <UART_init>
	TIMER0_init(&Timer0Conf);
    174a:	ce 01       	movw	r24, r28
    174c:	8f 96       	adiw	r24, 0x2f	; 47
    174e:	0e 94 20 1b 	call	0x3640	; 0x3640 <TIMER0_init>
	TIMER0_setCallBack(ISR_Count);
    1752:	80 e7       	ldi	r24, 0x70	; 112
    1754:	9b e0       	ldi	r25, 0x0B	; 11
    1756:	0e 94 bd 1b 	call	0x377a	; 0x377a <TIMER0_setCallBack>
	LCD_init();
    175a:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCD_init>
	LCD_displayStringRowColumn(0, 0, "   WELCOME TO  ");
    175e:	26 e6       	ldi	r18, 0x66	; 102
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	60 e0       	ldi	r22, 0x00	; 0
    1766:	a9 01       	movw	r20, r18
    1768:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "  DOOR  lOCKER  ");
    176c:	26 e7       	ldi	r18, 0x76	; 118
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	60 e0       	ldi	r22, 0x00	; 0
    1774:	a9 01       	movw	r20, r18
    1776:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_displayStringRowColumn>
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	aa e7       	ldi	r26, 0x7A	; 122
    1780:	b4 e4       	ldi	r27, 0x44	; 68
    1782:	8f a3       	std	Y+39, r24	; 0x27
    1784:	98 a7       	std	Y+40, r25	; 0x28
    1786:	a9 a7       	std	Y+41, r26	; 0x29
    1788:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    178a:	6f a1       	ldd	r22, Y+39	; 0x27
    178c:	78 a5       	ldd	r23, Y+40	; 0x28
    178e:	89 a5       	ldd	r24, Y+41	; 0x29
    1790:	9a a5       	ldd	r25, Y+42	; 0x2a
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	4a e7       	ldi	r20, 0x7A	; 122
    1798:	53 e4       	ldi	r21, 0x43	; 67
    179a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	8b a3       	std	Y+35, r24	; 0x23
    17a4:	9c a3       	std	Y+36, r25	; 0x24
    17a6:	ad a3       	std	Y+37, r26	; 0x25
    17a8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17aa:	6b a1       	ldd	r22, Y+35	; 0x23
    17ac:	7c a1       	ldd	r23, Y+36	; 0x24
    17ae:	8d a1       	ldd	r24, Y+37	; 0x25
    17b0:	9e a1       	ldd	r25, Y+38	; 0x26
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	40 e8       	ldi	r20, 0x80	; 128
    17b8:	5f e3       	ldi	r21, 0x3F	; 63
    17ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17be:	88 23       	and	r24, r24
    17c0:	2c f4       	brge	.+10     	; 0x17cc <main+0xbe>
		__ticks = 1;
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	9a a3       	std	Y+34, r25	; 0x22
    17c8:	89 a3       	std	Y+33, r24	; 0x21
    17ca:	3f c0       	rjmp	.+126    	; 0x184a <main+0x13c>
	else if (__tmp > 65535)
    17cc:	6b a1       	ldd	r22, Y+35	; 0x23
    17ce:	7c a1       	ldd	r23, Y+36	; 0x24
    17d0:	8d a1       	ldd	r24, Y+37	; 0x25
    17d2:	9e a1       	ldd	r25, Y+38	; 0x26
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	3f ef       	ldi	r19, 0xFF	; 255
    17d8:	4f e7       	ldi	r20, 0x7F	; 127
    17da:	57 e4       	ldi	r21, 0x47	; 71
    17dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17e0:	18 16       	cp	r1, r24
    17e2:	4c f5       	brge	.+82     	; 0x1836 <main+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e4:	6f a1       	ldd	r22, Y+39	; 0x27
    17e6:	78 a5       	ldd	r23, Y+40	; 0x28
    17e8:	89 a5       	ldd	r24, Y+41	; 0x29
    17ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e2       	ldi	r20, 0x20	; 32
    17f2:	51 e4       	ldi	r21, 0x41	; 65
    17f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	bc 01       	movw	r22, r24
    17fe:	cd 01       	movw	r24, r26
    1800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	9a a3       	std	Y+34, r25	; 0x22
    180a:	89 a3       	std	Y+33, r24	; 0x21
    180c:	0f c0       	rjmp	.+30     	; 0x182c <main+0x11e>
    180e:	89 e1       	ldi	r24, 0x19	; 25
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	98 a3       	std	Y+32, r25	; 0x20
    1814:	8f 8f       	std	Y+31, r24	; 0x1f
    1816:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1818:	98 a1       	ldd	r25, Y+32	; 0x20
    181a:	01 97       	sbiw	r24, 0x01	; 1
    181c:	f1 f7       	brne	.-4      	; 0x181a <main+0x10c>
    181e:	98 a3       	std	Y+32, r25	; 0x20
    1820:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1822:	89 a1       	ldd	r24, Y+33	; 0x21
    1824:	9a a1       	ldd	r25, Y+34	; 0x22
    1826:	01 97       	sbiw	r24, 0x01	; 1
    1828:	9a a3       	std	Y+34, r25	; 0x22
    182a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    182c:	89 a1       	ldd	r24, Y+33	; 0x21
    182e:	9a a1       	ldd	r25, Y+34	; 0x22
    1830:	00 97       	sbiw	r24, 0x00	; 0
    1832:	69 f7       	brne	.-38     	; 0x180e <main+0x100>
    1834:	14 c0       	rjmp	.+40     	; 0x185e <main+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1836:	6b a1       	ldd	r22, Y+35	; 0x23
    1838:	7c a1       	ldd	r23, Y+36	; 0x24
    183a:	8d a1       	ldd	r24, Y+37	; 0x25
    183c:	9e a1       	ldd	r25, Y+38	; 0x26
    183e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	9a a3       	std	Y+34, r25	; 0x22
    1848:	89 a3       	std	Y+33, r24	; 0x21
    184a:	89 a1       	ldd	r24, Y+33	; 0x21
    184c:	9a a1       	ldd	r25, Y+34	; 0x22
    184e:	9e 8f       	std	Y+30, r25	; 0x1e
    1850:	8d 8f       	std	Y+29, r24	; 0x1d
    1852:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1854:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1856:	01 97       	sbiw	r24, 0x01	; 1
    1858:	f1 f7       	brne	.-4      	; 0x1856 <main+0x148>
    185a:	9e 8f       	std	Y+30, r25	; 0x1e
    185c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	while (1) {
		match = 0;
    185e:	1c a6       	std	Y+44, r1	; 0x2c
		if (sec < 1) {
    1860:	80 91 56 01 	lds	r24, 0x0156
    1864:	88 23       	and	r24, r24
    1866:	c1 f5       	brne	.+112    	; 0x18d8 <main+0x1ca>
			UART_sentChar(&UartConf, 'P');
    1868:	8a e4       	ldi	r24, 0x4A	; 74
    186a:	91 e0       	ldi	r25, 0x01	; 1
    186c:	60 e5       	ldi	r22, 0x50	; 80
    186e:	70 e0       	ldi	r23, 0x00	; 0
    1870:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <UART_sentChar>
			UART_recieveString(&UartConf, password, 5);
    1874:	20 91 4f 01 	lds	r18, 0x014F
    1878:	30 91 50 01 	lds	r19, 0x0150
    187c:	8a e4       	ldi	r24, 0x4A	; 74
    187e:	91 e0       	ldi	r25, 0x01	; 1
    1880:	b9 01       	movw	r22, r18
    1882:	45 e0       	ldi	r20, 0x05	; 5
    1884:	50 e0       	ldi	r21, 0x00	; 0
    1886:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <UART_recieveString>
			if (strcmp((password), ch) == 0) { //////////////////////////////
    188a:	80 91 4f 01 	lds	r24, 0x014F
    188e:	90 91 50 01 	lds	r25, 0x0150
    1892:	20 91 51 01 	lds	r18, 0x0151
    1896:	30 91 52 01 	lds	r19, 0x0152
    189a:	b9 01       	movw	r22, r18
    189c:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <strcmp>
    18a0:	00 97       	sbiw	r24, 0x00	; 0
    18a2:	d1 f4       	brne	.+52     	; 0x18d8 <main+0x1ca>
				done = newPassword(password);
    18a4:	80 91 4f 01 	lds	r24, 0x014F
    18a8:	90 91 50 01 	lds	r25, 0x0150
    18ac:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <newPassword>
    18b0:	8e a7       	std	Y+46, r24	; 0x2e
				if (done == 1) {
    18b2:	8e a5       	ldd	r24, Y+46	; 0x2e
    18b4:	81 30       	cpi	r24, 0x01	; 1
    18b6:	79 f4       	brne	.+30     	; 0x18d6 <main+0x1c8>
					UART_sentChar(&UartConf, 'N');
    18b8:	8a e4       	ldi	r24, 0x4A	; 74
    18ba:	91 e0       	ldi	r25, 0x01	; 1
    18bc:	6e e4       	ldi	r22, 0x4E	; 78
    18be:	70 e0       	ldi	r23, 0x00	; 0
    18c0:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <UART_sentChar>
					UART_sentString(&UartConf, password);
    18c4:	20 91 4f 01 	lds	r18, 0x014F
    18c8:	30 91 50 01 	lds	r19, 0x0150
    18cc:	8a e4       	ldi	r24, 0x4A	; 74
    18ce:	91 e0       	ldi	r25, 0x01	; 1
    18d0:	b9 01       	movw	r22, r18
    18d2:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <UART_sentString>

				}
				done = 0;
    18d6:	1e a6       	std	Y+46, r1	; 0x2e
			}
		}

		LCD_clearScreen();
    18d8:	0e 94 66 0b 	call	0x16cc	; 0x16cc <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "+ : open door");
    18dc:	27 e8       	ldi	r18, 0x87	; 135
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	60 e0       	ldi	r22, 0x00	; 0
    18e4:	a9 01       	movw	r20, r18
    18e6:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "- : change pass");
    18ea:	25 e9       	ldi	r18, 0x95	; 149
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	60 e0       	ldi	r22, 0x00	; 0
    18f2:	a9 01       	movw	r20, r18
    18f4:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_displayStringRowColumn>
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	aa ef       	ldi	r26, 0xFA	; 250
    18fe:	b3 e4       	ldi	r27, 0x43	; 67
    1900:	89 8f       	std	Y+25, r24	; 0x19
    1902:	9a 8f       	std	Y+26, r25	; 0x1a
    1904:	ab 8f       	std	Y+27, r26	; 0x1b
    1906:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1908:	69 8d       	ldd	r22, Y+25	; 0x19
    190a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    190c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    190e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	4a e7       	ldi	r20, 0x7A	; 122
    1916:	53 e4       	ldi	r21, 0x43	; 67
    1918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	8d 8b       	std	Y+21, r24	; 0x15
    1922:	9e 8b       	std	Y+22, r25	; 0x16
    1924:	af 8b       	std	Y+23, r26	; 0x17
    1926:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1928:	6d 89       	ldd	r22, Y+21	; 0x15
    192a:	7e 89       	ldd	r23, Y+22	; 0x16
    192c:	8f 89       	ldd	r24, Y+23	; 0x17
    192e:	98 8d       	ldd	r25, Y+24	; 0x18
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	40 e8       	ldi	r20, 0x80	; 128
    1936:	5f e3       	ldi	r21, 0x3F	; 63
    1938:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    193c:	88 23       	and	r24, r24
    193e:	2c f4       	brge	.+10     	; 0x194a <main+0x23c>
		__ticks = 1;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	9c 8b       	std	Y+20, r25	; 0x14
    1946:	8b 8b       	std	Y+19, r24	; 0x13
    1948:	3f c0       	rjmp	.+126    	; 0x19c8 <main+0x2ba>
	else if (__tmp > 65535)
    194a:	6d 89       	ldd	r22, Y+21	; 0x15
    194c:	7e 89       	ldd	r23, Y+22	; 0x16
    194e:	8f 89       	ldd	r24, Y+23	; 0x17
    1950:	98 8d       	ldd	r25, Y+24	; 0x18
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	3f ef       	ldi	r19, 0xFF	; 255
    1956:	4f e7       	ldi	r20, 0x7F	; 127
    1958:	57 e4       	ldi	r21, 0x47	; 71
    195a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    195e:	18 16       	cp	r1, r24
    1960:	4c f5       	brge	.+82     	; 0x19b4 <main+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1962:	69 8d       	ldd	r22, Y+25	; 0x19
    1964:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1966:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1968:	9c 8d       	ldd	r25, Y+28	; 0x1c
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e2       	ldi	r20, 0x20	; 32
    1970:	51 e4       	ldi	r21, 0x41	; 65
    1972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	bc 01       	movw	r22, r24
    197c:	cd 01       	movw	r24, r26
    197e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	9c 8b       	std	Y+20, r25	; 0x14
    1988:	8b 8b       	std	Y+19, r24	; 0x13
    198a:	0f c0       	rjmp	.+30     	; 0x19aa <main+0x29c>
    198c:	89 e1       	ldi	r24, 0x19	; 25
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	9a 8b       	std	Y+18, r25	; 0x12
    1992:	89 8b       	std	Y+17, r24	; 0x11
    1994:	89 89       	ldd	r24, Y+17	; 0x11
    1996:	9a 89       	ldd	r25, Y+18	; 0x12
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	f1 f7       	brne	.-4      	; 0x1998 <main+0x28a>
    199c:	9a 8b       	std	Y+18, r25	; 0x12
    199e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a0:	8b 89       	ldd	r24, Y+19	; 0x13
    19a2:	9c 89       	ldd	r25, Y+20	; 0x14
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	9c 8b       	std	Y+20, r25	; 0x14
    19a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19aa:	8b 89       	ldd	r24, Y+19	; 0x13
    19ac:	9c 89       	ldd	r25, Y+20	; 0x14
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	69 f7       	brne	.-38     	; 0x198c <main+0x27e>
    19b2:	14 c0       	rjmp	.+40     	; 0x19dc <main+0x2ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b4:	6d 89       	ldd	r22, Y+21	; 0x15
    19b6:	7e 89       	ldd	r23, Y+22	; 0x16
    19b8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ba:	98 8d       	ldd	r25, Y+24	; 0x18
    19bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	9c 8b       	std	Y+20, r25	; 0x14
    19c6:	8b 8b       	std	Y+19, r24	; 0x13
    19c8:	8b 89       	ldd	r24, Y+19	; 0x13
    19ca:	9c 89       	ldd	r25, Y+20	; 0x14
    19cc:	98 8b       	std	Y+16, r25	; 0x10
    19ce:	8f 87       	std	Y+15, r24	; 0x0f
    19d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19d2:	98 89       	ldd	r25, Y+16	; 0x10
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	f1 f7       	brne	.-4      	; 0x19d4 <main+0x2c6>
    19d8:	98 8b       	std	Y+16, r25	; 0x10
    19da:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		key = KEYPAD_getPressed();
    19dc:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressed>
    19e0:	8d a7       	std	Y+45, r24	; 0x2d
		if (key == '+') {
    19e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    19e4:	8b 32       	cpi	r24, 0x2B	; 43
    19e6:	09 f0       	breq	.+2      	; 0x19ea <main+0x2dc>
    19e8:	d0 c0       	rjmp	.+416    	; 0x1b8a <main+0x47c>
			UART_sentChar(&UartConf, 'P');
    19ea:	8a e4       	ldi	r24, 0x4A	; 74
    19ec:	91 e0       	ldi	r25, 0x01	; 1
    19ee:	60 e5       	ldi	r22, 0x50	; 80
    19f0:	70 e0       	ldi	r23, 0x00	; 0
    19f2:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <UART_sentChar>
			UART_recieveString(&UartConf, password, 5);
    19f6:	20 91 4f 01 	lds	r18, 0x014F
    19fa:	30 91 50 01 	lds	r19, 0x0150
    19fe:	8a e4       	ldi	r24, 0x4A	; 74
    1a00:	91 e0       	ldi	r25, 0x01	; 1
    1a02:	b9 01       	movw	r22, r18
    1a04:	45 e0       	ldi	r20, 0x05	; 5
    1a06:	50 e0       	ldi	r21, 0x00	; 0
    1a08:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <UART_recieveString>

			done = checkPassword(password);
    1a0c:	80 91 4f 01 	lds	r24, 0x014F
    1a10:	90 91 50 01 	lds	r25, 0x0150
    1a14:	0e 94 cd 18 	call	0x319a	; 0x319a <checkPassword>
    1a18:	8e a7       	std	Y+46, r24	; 0x2e

			if (done) {
    1a1a:	8e a5       	ldd	r24, Y+46	; 0x2e
    1a1c:	88 23       	and	r24, r24
    1a1e:	09 f4       	brne	.+2      	; 0x1a22 <main+0x314>
    1a20:	85 c0       	rjmp	.+266    	; 0x1b2c <main+0x41e>
				LCD_clearScreen();
    1a22:	0e 94 66 0b 	call	0x16cc	; 0x16cc <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0, "    WORKING  ");
    1a26:	25 ea       	ldi	r18, 0xA5	; 165
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	60 e0       	ldi	r22, 0x00	; 0
    1a2e:	a9 01       	movw	r20, r18
    1a30:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_displayStringRowColumn>
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	90 e5       	ldi	r25, 0x50	; 80
    1a38:	a3 e4       	ldi	r26, 0x43	; 67
    1a3a:	b8 e4       	ldi	r27, 0x48	; 72
    1a3c:	8b 87       	std	Y+11, r24	; 0x0b
    1a3e:	9c 87       	std	Y+12, r25	; 0x0c
    1a40:	ad 87       	std	Y+13, r26	; 0x0d
    1a42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	4a e7       	ldi	r20, 0x7A	; 122
    1a52:	53 e4       	ldi	r21, 0x43	; 67
    1a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	8f 83       	std	Y+7, r24	; 0x07
    1a5e:	98 87       	std	Y+8, r25	; 0x08
    1a60:	a9 87       	std	Y+9, r26	; 0x09
    1a62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a64:	6f 81       	ldd	r22, Y+7	; 0x07
    1a66:	78 85       	ldd	r23, Y+8	; 0x08
    1a68:	89 85       	ldd	r24, Y+9	; 0x09
    1a6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	40 e8       	ldi	r20, 0x80	; 128
    1a72:	5f e3       	ldi	r21, 0x3F	; 63
    1a74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a78:	88 23       	and	r24, r24
    1a7a:	2c f4       	brge	.+10     	; 0x1a86 <main+0x378>
		__ticks = 1;
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	9e 83       	std	Y+6, r25	; 0x06
    1a82:	8d 83       	std	Y+5, r24	; 0x05
    1a84:	3f c0       	rjmp	.+126    	; 0x1b04 <main+0x3f6>
	else if (__tmp > 65535)
    1a86:	6f 81       	ldd	r22, Y+7	; 0x07
    1a88:	78 85       	ldd	r23, Y+8	; 0x08
    1a8a:	89 85       	ldd	r24, Y+9	; 0x09
    1a8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	3f ef       	ldi	r19, 0xFF	; 255
    1a92:	4f e7       	ldi	r20, 0x7F	; 127
    1a94:	57 e4       	ldi	r21, 0x47	; 71
    1a96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a9a:	18 16       	cp	r1, r24
    1a9c:	4c f5       	brge	.+82     	; 0x1af0 <main+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	40 e2       	ldi	r20, 0x20	; 32
    1aac:	51 e4       	ldi	r21, 0x41	; 65
    1aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	bc 01       	movw	r22, r24
    1ab8:	cd 01       	movw	r24, r26
    1aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	9e 83       	std	Y+6, r25	; 0x06
    1ac4:	8d 83       	std	Y+5, r24	; 0x05
    1ac6:	0f c0       	rjmp	.+30     	; 0x1ae6 <main+0x3d8>
    1ac8:	89 e1       	ldi	r24, 0x19	; 25
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	9c 83       	std	Y+4, r25	; 0x04
    1ace:	8b 83       	std	Y+3, r24	; 0x03
    1ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	f1 f7       	brne	.-4      	; 0x1ad4 <main+0x3c6>
    1ad8:	9c 83       	std	Y+4, r25	; 0x04
    1ada:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1adc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ade:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	9e 83       	std	Y+6, r25	; 0x06
    1ae4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aea:	00 97       	sbiw	r24, 0x00	; 0
    1aec:	69 f7       	brne	.-38     	; 0x1ac8 <main+0x3ba>
    1aee:	14 c0       	rjmp	.+40     	; 0x1b18 <main+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af0:	6f 81       	ldd	r22, Y+7	; 0x07
    1af2:	78 85       	ldd	r23, Y+8	; 0x08
    1af4:	89 85       	ldd	r24, Y+9	; 0x09
    1af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	9e 83       	std	Y+6, r25	; 0x06
    1b02:	8d 83       	std	Y+5, r24	; 0x05
    1b04:	8d 81       	ldd	r24, Y+5	; 0x05
    1b06:	9e 81       	ldd	r25, Y+6	; 0x06
    1b08:	9a 83       	std	Y+2, r25	; 0x02
    1b0a:	89 83       	std	Y+1, r24	; 0x01
    1b0c:	89 81       	ldd	r24, Y+1	; 0x01
    1b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b10:	01 97       	sbiw	r24, 0x01	; 1
    1b12:	f1 f7       	brne	.-4      	; 0x1b10 <main+0x402>
    1b14:	9a 83       	std	Y+2, r25	; 0x02
    1b16:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(200000);
				UART_sentChar(&UartConf, 'O');
    1b18:	8a e4       	ldi	r24, 0x4A	; 74
    1b1a:	91 e0       	ldi	r25, 0x01	; 1
    1b1c:	6f e4       	ldi	r22, 0x4F	; 79
    1b1e:	70 e0       	ldi	r23, 0x00	; 0
    1b20:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <UART_sentChar>
				done = 0;
    1b24:	1e a6       	std	Y+46, r1	; 0x2e
				match = 1;
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	8c a7       	std	Y+44, r24	; 0x2c
    1b2a:	99 ce       	rjmp	.-718    	; 0x185e <main+0x150>
			} else {
				for (c = 0; c < 2; c++) {
    1b2c:	1b a6       	std	Y+43, r1	; 0x2b
    1b2e:	16 c0       	rjmp	.+44     	; 0x1b5c <main+0x44e>
					 done = checkPassword(password);
    1b30:	80 91 4f 01 	lds	r24, 0x014F
    1b34:	90 91 50 01 	lds	r25, 0x0150
    1b38:	0e 94 cd 18 	call	0x319a	; 0x319a <checkPassword>
    1b3c:	8e a7       	std	Y+46, r24	; 0x2e
					if (done) {
    1b3e:	8e a5       	ldd	r24, Y+46	; 0x2e
    1b40:	88 23       	and	r24, r24
    1b42:	49 f0       	breq	.+18     	; 0x1b56 <main+0x448>
						UART_sentChar(&UartConf, 'O');
    1b44:	8a e4       	ldi	r24, 0x4A	; 74
    1b46:	91 e0       	ldi	r25, 0x01	; 1
    1b48:	6f e4       	ldi	r22, 0x4F	; 79
    1b4a:	70 e0       	ldi	r23, 0x00	; 0
    1b4c:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <UART_sentChar>
						match = 1;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	8c a7       	std	Y+44, r24	; 0x2c
    1b54:	06 c0       	rjmp	.+12     	; 0x1b62 <main+0x454>
				_delay_ms(200000);
				UART_sentChar(&UartConf, 'O');
				done = 0;
				match = 1;
			} else {
				for (c = 0; c < 2; c++) {
    1b56:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b58:	8f 5f       	subi	r24, 0xFF	; 255
    1b5a:	8b a7       	std	Y+43, r24	; 0x2b
    1b5c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b5e:	82 30       	cpi	r24, 0x02	; 2
    1b60:	38 f3       	brcs	.-50     	; 0x1b30 <main+0x422>
						UART_sentChar(&UartConf, 'O');
						match = 1;
						break;
					}
				}
				if (match == 0) {
    1b62:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b64:	88 23       	and	r24, r24
    1b66:	09 f0       	breq	.+2      	; 0x1b6a <main+0x45c>
    1b68:	7a ce       	rjmp	.-780    	; 0x185e <main+0x150>
					LCD_clearScreen();
    1b6a:	0e 94 66 0b 	call	0x16cc	; 0x16cc <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 0, "  3 WRONG PASS  ");
    1b6e:	23 eb       	ldi	r18, 0xB3	; 179
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	60 e0       	ldi	r22, 0x00	; 0
    1b76:	a9 01       	movw	r20, r18
    1b78:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_displayStringRowColumn>
					UART_sentChar(&UartConf, 'W');
    1b7c:	8a e4       	ldi	r24, 0x4A	; 74
    1b7e:	91 e0       	ldi	r25, 0x01	; 1
    1b80:	67 e5       	ldi	r22, 0x57	; 87
    1b82:	70 e0       	ldi	r23, 0x00	; 0
    1b84:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <UART_sentChar>
    1b88:	6a ce       	rjmp	.-812    	; 0x185e <main+0x150>
				}
			}
		} else if (key == '-') {
    1b8a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b8c:	8d 32       	cpi	r24, 0x2D	; 45
    1b8e:	09 f0       	breq	.+2      	; 0x1b92 <main+0x484>
    1b90:	66 ce       	rjmp	.-820    	; 0x185e <main+0x150>
			UART_sentChar(&UartConf, 'P');
    1b92:	8a e4       	ldi	r24, 0x4A	; 74
    1b94:	91 e0       	ldi	r25, 0x01	; 1
    1b96:	60 e5       	ldi	r22, 0x50	; 80
    1b98:	70 e0       	ldi	r23, 0x00	; 0
    1b9a:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <UART_sentChar>
			UART_recieveString(&UartConf, password,5);
    1b9e:	20 91 4f 01 	lds	r18, 0x014F
    1ba2:	30 91 50 01 	lds	r19, 0x0150
    1ba6:	8a e4       	ldi	r24, 0x4A	; 74
    1ba8:	91 e0       	ldi	r25, 0x01	; 1
    1baa:	b9 01       	movw	r22, r18
    1bac:	45 e0       	ldi	r20, 0x05	; 5
    1bae:	50 e0       	ldi	r21, 0x00	; 0
    1bb0:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <UART_recieveString>
			done = checkPassword(password);
    1bb4:	80 91 4f 01 	lds	r24, 0x014F
    1bb8:	90 91 50 01 	lds	r25, 0x0150
    1bbc:	0e 94 cd 18 	call	0x319a	; 0x319a <checkPassword>
    1bc0:	8e a7       	std	Y+46, r24	; 0x2e
			if (done) {
    1bc2:	8e a5       	ldd	r24, Y+46	; 0x2e
    1bc4:	88 23       	and	r24, r24
    1bc6:	e1 f0       	breq	.+56     	; 0x1c00 <main+0x4f2>
				done = newPassword(password);
    1bc8:	80 91 4f 01 	lds	r24, 0x014F
    1bcc:	90 91 50 01 	lds	r25, 0x0150
    1bd0:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <newPassword>
    1bd4:	8e a7       	std	Y+46, r24	; 0x2e
				if (done)
    1bd6:	8e a5       	ldd	r24, Y+46	; 0x2e
    1bd8:	88 23       	and	r24, r24
    1bda:	31 f0       	breq	.+12     	; 0x1be8 <main+0x4da>
					UART_sentChar(&UartConf, 'N');
    1bdc:	8a e4       	ldi	r24, 0x4A	; 74
    1bde:	91 e0       	ldi	r25, 0x01	; 1
    1be0:	6e e4       	ldi	r22, 0x4E	; 78
    1be2:	70 e0       	ldi	r23, 0x00	; 0
    1be4:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <UART_sentChar>
				UART_sentString(&UartConf, password);
    1be8:	20 91 4f 01 	lds	r18, 0x014F
    1bec:	30 91 50 01 	lds	r19, 0x0150
    1bf0:	8a e4       	ldi	r24, 0x4A	; 74
    1bf2:	91 e0       	ldi	r25, 0x01	; 1
    1bf4:	b9 01       	movw	r22, r18
    1bf6:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <UART_sentString>
				match = 1;
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	8c a7       	std	Y+44, r24	; 0x2c
    1bfe:	2f ce       	rjmp	.-930    	; 0x185e <main+0x150>

			} else {
				for (c = 0; c < 2; c++) {
    1c00:	1b a6       	std	Y+43, r1	; 0x2b
    1c02:	29 c0       	rjmp	.+82     	; 0x1c56 <main+0x548>
					done = checkPassword(password);
    1c04:	80 91 4f 01 	lds	r24, 0x014F
    1c08:	90 91 50 01 	lds	r25, 0x0150
    1c0c:	0e 94 cd 18 	call	0x319a	; 0x319a <checkPassword>
    1c10:	8e a7       	std	Y+46, r24	; 0x2e
					if (done) {
    1c12:	8e a5       	ldd	r24, Y+46	; 0x2e
    1c14:	88 23       	and	r24, r24
    1c16:	e1 f0       	breq	.+56     	; 0x1c50 <main+0x542>
						done = newPassword(password);
    1c18:	80 91 4f 01 	lds	r24, 0x014F
    1c1c:	90 91 50 01 	lds	r25, 0x0150
    1c20:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <newPassword>
    1c24:	8e a7       	std	Y+46, r24	; 0x2e
						if (done)
    1c26:	8e a5       	ldd	r24, Y+46	; 0x2e
    1c28:	88 23       	and	r24, r24
    1c2a:	31 f0       	breq	.+12     	; 0x1c38 <main+0x52a>
							UART_sentChar(&UartConf, 'N');
    1c2c:	8a e4       	ldi	r24, 0x4A	; 74
    1c2e:	91 e0       	ldi	r25, 0x01	; 1
    1c30:	6e e4       	ldi	r22, 0x4E	; 78
    1c32:	70 e0       	ldi	r23, 0x00	; 0
    1c34:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <UART_sentChar>
						UART_sentString(&UartConf, password);
    1c38:	20 91 4f 01 	lds	r18, 0x014F
    1c3c:	30 91 50 01 	lds	r19, 0x0150
    1c40:	8a e4       	ldi	r24, 0x4A	; 74
    1c42:	91 e0       	ldi	r25, 0x01	; 1
    1c44:	b9 01       	movw	r22, r18
    1c46:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <UART_sentString>
						match = 1;
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	8c a7       	std	Y+44, r24	; 0x2c
    1c4e:	06 c0       	rjmp	.+12     	; 0x1c5c <main+0x54e>
					UART_sentChar(&UartConf, 'N');
				UART_sentString(&UartConf, password);
				match = 1;

			} else {
				for (c = 0; c < 2; c++) {
    1c50:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c52:	8f 5f       	subi	r24, 0xFF	; 255
    1c54:	8b a7       	std	Y+43, r24	; 0x2b
    1c56:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c58:	82 30       	cpi	r24, 0x02	; 2
    1c5a:	a0 f2       	brcs	.-88     	; 0x1c04 <main+0x4f6>
						UART_sentString(&UartConf, password);
						match = 1;
						break;
					}
				}
				if (match == 0) {
    1c5c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c5e:	88 23       	and	r24, r24
    1c60:	09 f0       	breq	.+2      	; 0x1c64 <main+0x556>
    1c62:	fd cd       	rjmp	.-1030   	; 0x185e <main+0x150>
					LCD_clearScreen();
    1c64:	0e 94 66 0b 	call	0x16cc	; 0x16cc <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 0, "  3 WRONG PASS  ");
    1c68:	23 eb       	ldi	r18, 0xB3	; 179
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	60 e0       	ldi	r22, 0x00	; 0
    1c70:	a9 01       	movw	r20, r18
    1c72:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_displayStringRowColumn>
					UART_sentChar(&UartConf, 'W');
    1c76:	8a e4       	ldi	r24, 0x4A	; 74
    1c78:	91 e0       	ldi	r25, 0x01	; 1
    1c7a:	67 e5       	ldi	r22, 0x57	; 87
    1c7c:	70 e0       	ldi	r23, 0x00	; 0
    1c7e:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <UART_sentChar>
    1c82:	ed cd       	rjmp	.-1062   	; 0x185e <main+0x150>

00001c84 <newPassword>:
#include "password.h"

uint8 newPassword(char *password) {
    1c84:	0f 93       	push	r16
    1c86:	1f 93       	push	r17
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	ce 5c       	subi	r28, 0xCE	; 206
    1c92:	d0 40       	sbci	r29, 0x00	; 0
    1c94:	0f b6       	in	r0, 0x3f	; 63
    1c96:	f8 94       	cli
    1c98:	de bf       	out	0x3e, r29	; 62
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	cd bf       	out	0x3d, r28	; 61
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	e3 53       	subi	r30, 0x33	; 51
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	91 83       	std	Z+1, r25	; 0x01
    1ca6:	80 83       	st	Z, r24
	uint8 key;
	char *pass = "#####";
    1ca8:	fe 01       	movw	r30, r28
    1caa:	e6 53       	subi	r30, 0x36	; 54
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	84 ec       	ldi	r24, 0xC4	; 196
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	91 83       	std	Z+1, r25	; 0x01
    1cb4:	80 83       	st	Z, r24
	char *repass = "####!";
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	e8 53       	subi	r30, 0x38	; 56
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	8a ec       	ldi	r24, 0xCA	; 202
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	91 83       	std	Z+1, r25	; 0x01
    1cc2:	80 83       	st	Z, r24
	uint8 i = 0;
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	e9 53       	subi	r30, 0x39	; 57
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	10 82       	st	Z, r1
	uint8 match = 1;
    1ccc:	fe 01       	movw	r30, r28
    1cce:	ea 53       	subi	r30, 0x3A	; 58
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	80 83       	st	Z, r24
	uint8 ent = 0;
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	eb 53       	subi	r30, 0x3B	; 59
    1cda:	ff 4f       	sbci	r31, 0xFF	; 255
    1cdc:	10 82       	st	Z, r1
    1cde:	fe 01       	movw	r30, r28
    1ce0:	ef 53       	subi	r30, 0x3F	; 63
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	90 e8       	ldi	r25, 0x80	; 128
    1ce8:	a9 e0       	ldi	r26, 0x09	; 9
    1cea:	b5 e4       	ldi	r27, 0x45	; 69
    1cec:	80 83       	st	Z, r24
    1cee:	91 83       	std	Z+1, r25	; 0x01
    1cf0:	a2 83       	std	Z+2, r26	; 0x02
    1cf2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf4:	8e 01       	movw	r16, r28
    1cf6:	03 54       	subi	r16, 0x43	; 67
    1cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	ef 53       	subi	r30, 0x3F	; 63
    1cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1d00:	60 81       	ld	r22, Z
    1d02:	71 81       	ldd	r23, Z+1	; 0x01
    1d04:	82 81       	ldd	r24, Z+2	; 0x02
    1d06:	93 81       	ldd	r25, Z+3	; 0x03
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	4a e7       	ldi	r20, 0x7A	; 122
    1d0e:	53 e4       	ldi	r21, 0x43	; 67
    1d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	f8 01       	movw	r30, r16
    1d1a:	80 83       	st	Z, r24
    1d1c:	91 83       	std	Z+1, r25	; 0x01
    1d1e:	a2 83       	std	Z+2, r26	; 0x02
    1d20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d22:	fe 01       	movw	r30, r28
    1d24:	e3 54       	subi	r30, 0x43	; 67
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	60 81       	ld	r22, Z
    1d2a:	71 81       	ldd	r23, Z+1	; 0x01
    1d2c:	82 81       	ldd	r24, Z+2	; 0x02
    1d2e:	93 81       	ldd	r25, Z+3	; 0x03
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	40 e8       	ldi	r20, 0x80	; 128
    1d36:	5f e3       	ldi	r21, 0x3F	; 63
    1d38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d3c:	88 23       	and	r24, r24
    1d3e:	44 f4       	brge	.+16     	; 0x1d50 <newPassword+0xcc>
		__ticks = 1;
    1d40:	fe 01       	movw	r30, r28
    1d42:	e5 54       	subi	r30, 0x45	; 69
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	91 83       	std	Z+1, r25	; 0x01
    1d4c:	80 83       	st	Z, r24
    1d4e:	64 c0       	rjmp	.+200    	; 0x1e18 <newPassword+0x194>
	else if (__tmp > 65535)
    1d50:	fe 01       	movw	r30, r28
    1d52:	e3 54       	subi	r30, 0x43	; 67
    1d54:	ff 4f       	sbci	r31, 0xFF	; 255
    1d56:	60 81       	ld	r22, Z
    1d58:	71 81       	ldd	r23, Z+1	; 0x01
    1d5a:	82 81       	ldd	r24, Z+2	; 0x02
    1d5c:	93 81       	ldd	r25, Z+3	; 0x03
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	3f ef       	ldi	r19, 0xFF	; 255
    1d62:	4f e7       	ldi	r20, 0x7F	; 127
    1d64:	57 e4       	ldi	r21, 0x47	; 71
    1d66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d6a:	18 16       	cp	r1, r24
    1d6c:	0c f0       	brlt	.+2      	; 0x1d70 <newPassword+0xec>
    1d6e:	43 c0       	rjmp	.+134    	; 0x1df6 <newPassword+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d70:	fe 01       	movw	r30, r28
    1d72:	ef 53       	subi	r30, 0x3F	; 63
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	60 81       	ld	r22, Z
    1d78:	71 81       	ldd	r23, Z+1	; 0x01
    1d7a:	82 81       	ldd	r24, Z+2	; 0x02
    1d7c:	93 81       	ldd	r25, Z+3	; 0x03
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e2       	ldi	r20, 0x20	; 32
    1d84:	51 e4       	ldi	r21, 0x41	; 65
    1d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	8e 01       	movw	r16, r28
    1d90:	05 54       	subi	r16, 0x45	; 69
    1d92:	1f 4f       	sbci	r17, 0xFF	; 255
    1d94:	bc 01       	movw	r22, r24
    1d96:	cd 01       	movw	r24, r26
    1d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	f8 01       	movw	r30, r16
    1da2:	91 83       	std	Z+1, r25	; 0x01
    1da4:	80 83       	st	Z, r24
    1da6:	1f c0       	rjmp	.+62     	; 0x1de6 <newPassword+0x162>
    1da8:	fe 01       	movw	r30, r28
    1daa:	e7 54       	subi	r30, 0x47	; 71
    1dac:	ff 4f       	sbci	r31, 0xFF	; 255
    1dae:	89 e1       	ldi	r24, 0x19	; 25
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	91 83       	std	Z+1, r25	; 0x01
    1db4:	80 83       	st	Z, r24
    1db6:	fe 01       	movw	r30, r28
    1db8:	e7 54       	subi	r30, 0x47	; 71
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	80 81       	ld	r24, Z
    1dbe:	91 81       	ldd	r25, Z+1	; 0x01
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <newPassword+0x13c>
    1dc4:	fe 01       	movw	r30, r28
    1dc6:	e7 54       	subi	r30, 0x47	; 71
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dca:	91 83       	std	Z+1, r25	; 0x01
    1dcc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dce:	de 01       	movw	r26, r28
    1dd0:	a5 54       	subi	r26, 0x45	; 69
    1dd2:	bf 4f       	sbci	r27, 0xFF	; 255
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	e5 54       	subi	r30, 0x45	; 69
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	80 81       	ld	r24, Z
    1ddc:	91 81       	ldd	r25, Z+1	; 0x01
    1dde:	01 97       	sbiw	r24, 0x01	; 1
    1de0:	11 96       	adiw	r26, 0x01	; 1
    1de2:	9c 93       	st	X, r25
    1de4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de6:	fe 01       	movw	r30, r28
    1de8:	e5 54       	subi	r30, 0x45	; 69
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	80 81       	ld	r24, Z
    1dee:	91 81       	ldd	r25, Z+1	; 0x01
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	d1 f6       	brne	.-76     	; 0x1da8 <newPassword+0x124>
    1df4:	27 c0       	rjmp	.+78     	; 0x1e44 <newPassword+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df6:	8e 01       	movw	r16, r28
    1df8:	05 54       	subi	r16, 0x45	; 69
    1dfa:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfc:	fe 01       	movw	r30, r28
    1dfe:	e3 54       	subi	r30, 0x43	; 67
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	60 81       	ld	r22, Z
    1e04:	71 81       	ldd	r23, Z+1	; 0x01
    1e06:	82 81       	ldd	r24, Z+2	; 0x02
    1e08:	93 81       	ldd	r25, Z+3	; 0x03
    1e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	f8 01       	movw	r30, r16
    1e14:	91 83       	std	Z+1, r25	; 0x01
    1e16:	80 83       	st	Z, r24
    1e18:	de 01       	movw	r26, r28
    1e1a:	a9 54       	subi	r26, 0x49	; 73
    1e1c:	bf 4f       	sbci	r27, 0xFF	; 255
    1e1e:	fe 01       	movw	r30, r28
    1e20:	e5 54       	subi	r30, 0x45	; 69
    1e22:	ff 4f       	sbci	r31, 0xFF	; 255
    1e24:	80 81       	ld	r24, Z
    1e26:	91 81       	ldd	r25, Z+1	; 0x01
    1e28:	8d 93       	st	X+, r24
    1e2a:	9c 93       	st	X, r25
    1e2c:	fe 01       	movw	r30, r28
    1e2e:	e9 54       	subi	r30, 0x49	; 73
    1e30:	ff 4f       	sbci	r31, 0xFF	; 255
    1e32:	80 81       	ld	r24, Z
    1e34:	91 81       	ldd	r25, Z+1	; 0x01
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	f1 f7       	brne	.-4      	; 0x1e36 <newPassword+0x1b2>
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	e9 54       	subi	r30, 0x49	; 73
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	91 83       	std	Z+1, r25	; 0x01
    1e42:	80 83       	st	Z, r24
	_delay_ms(PUTTON_TIME);
	while (1) {
		match = 1;
    1e44:	fe 01       	movw	r30, r28
    1e46:	ea 53       	subi	r30, 0x3A	; 58
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	80 83       	st	Z, r24
		LCD_clearScreen();
    1e4e:	0e 94 66 0b 	call	0x16cc	; 0x16cc <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Enter new Pass");
    1e52:	20 ed       	ldi	r18, 0xD0	; 208
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	60 e0       	ldi	r22, 0x00	; 0
    1e5a:	a9 01       	movw	r20, r18
    1e5c:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_displayStringRowColumn>
    1e60:	fe 01       	movw	r30, r28
    1e62:	ed 54       	subi	r30, 0x4D	; 77
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	aa ef       	ldi	r26, 0xFA	; 250
    1e6c:	b3 e4       	ldi	r27, 0x43	; 67
    1e6e:	80 83       	st	Z, r24
    1e70:	91 83       	std	Z+1, r25	; 0x01
    1e72:	a2 83       	std	Z+2, r26	; 0x02
    1e74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e76:	8e 01       	movw	r16, r28
    1e78:	01 55       	subi	r16, 0x51	; 81
    1e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	ed 54       	subi	r30, 0x4D	; 77
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	60 81       	ld	r22, Z
    1e84:	71 81       	ldd	r23, Z+1	; 0x01
    1e86:	82 81       	ldd	r24, Z+2	; 0x02
    1e88:	93 81       	ldd	r25, Z+3	; 0x03
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	4a e7       	ldi	r20, 0x7A	; 122
    1e90:	53 e4       	ldi	r21, 0x43	; 67
    1e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	f8 01       	movw	r30, r16
    1e9c:	80 83       	st	Z, r24
    1e9e:	91 83       	std	Z+1, r25	; 0x01
    1ea0:	a2 83       	std	Z+2, r26	; 0x02
    1ea2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	e1 55       	subi	r30, 0x51	; 81
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	60 81       	ld	r22, Z
    1eac:	71 81       	ldd	r23, Z+1	; 0x01
    1eae:	82 81       	ldd	r24, Z+2	; 0x02
    1eb0:	93 81       	ldd	r25, Z+3	; 0x03
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e8       	ldi	r20, 0x80	; 128
    1eb8:	5f e3       	ldi	r21, 0x3F	; 63
    1eba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ebe:	88 23       	and	r24, r24
    1ec0:	44 f4       	brge	.+16     	; 0x1ed2 <newPassword+0x24e>
		__ticks = 1;
    1ec2:	fe 01       	movw	r30, r28
    1ec4:	e3 55       	subi	r30, 0x53	; 83
    1ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	91 83       	std	Z+1, r25	; 0x01
    1ece:	80 83       	st	Z, r24
    1ed0:	64 c0       	rjmp	.+200    	; 0x1f9a <newPassword+0x316>
	else if (__tmp > 65535)
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	e1 55       	subi	r30, 0x51	; 81
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	60 81       	ld	r22, Z
    1eda:	71 81       	ldd	r23, Z+1	; 0x01
    1edc:	82 81       	ldd	r24, Z+2	; 0x02
    1ede:	93 81       	ldd	r25, Z+3	; 0x03
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	3f ef       	ldi	r19, 0xFF	; 255
    1ee4:	4f e7       	ldi	r20, 0x7F	; 127
    1ee6:	57 e4       	ldi	r21, 0x47	; 71
    1ee8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eec:	18 16       	cp	r1, r24
    1eee:	0c f0       	brlt	.+2      	; 0x1ef2 <newPassword+0x26e>
    1ef0:	43 c0       	rjmp	.+134    	; 0x1f78 <newPassword+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	ed 54       	subi	r30, 0x4D	; 77
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	60 81       	ld	r22, Z
    1efa:	71 81       	ldd	r23, Z+1	; 0x01
    1efc:	82 81       	ldd	r24, Z+2	; 0x02
    1efe:	93 81       	ldd	r25, Z+3	; 0x03
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	40 e2       	ldi	r20, 0x20	; 32
    1f06:	51 e4       	ldi	r21, 0x41	; 65
    1f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	8e 01       	movw	r16, r28
    1f12:	03 55       	subi	r16, 0x53	; 83
    1f14:	1f 4f       	sbci	r17, 0xFF	; 255
    1f16:	bc 01       	movw	r22, r24
    1f18:	cd 01       	movw	r24, r26
    1f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	f8 01       	movw	r30, r16
    1f24:	91 83       	std	Z+1, r25	; 0x01
    1f26:	80 83       	st	Z, r24
    1f28:	1f c0       	rjmp	.+62     	; 0x1f68 <newPassword+0x2e4>
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	e5 55       	subi	r30, 0x55	; 85
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	89 e1       	ldi	r24, 0x19	; 25
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	91 83       	std	Z+1, r25	; 0x01
    1f36:	80 83       	st	Z, r24
    1f38:	fe 01       	movw	r30, r28
    1f3a:	e5 55       	subi	r30, 0x55	; 85
    1f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3e:	80 81       	ld	r24, Z
    1f40:	91 81       	ldd	r25, Z+1	; 0x01
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	f1 f7       	brne	.-4      	; 0x1f42 <newPassword+0x2be>
    1f46:	fe 01       	movw	r30, r28
    1f48:	e5 55       	subi	r30, 0x55	; 85
    1f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4c:	91 83       	std	Z+1, r25	; 0x01
    1f4e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f50:	de 01       	movw	r26, r28
    1f52:	a3 55       	subi	r26, 0x53	; 83
    1f54:	bf 4f       	sbci	r27, 0xFF	; 255
    1f56:	fe 01       	movw	r30, r28
    1f58:	e3 55       	subi	r30, 0x53	; 83
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	80 81       	ld	r24, Z
    1f5e:	91 81       	ldd	r25, Z+1	; 0x01
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	11 96       	adiw	r26, 0x01	; 1
    1f64:	9c 93       	st	X, r25
    1f66:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f68:	fe 01       	movw	r30, r28
    1f6a:	e3 55       	subi	r30, 0x53	; 83
    1f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6e:	80 81       	ld	r24, Z
    1f70:	91 81       	ldd	r25, Z+1	; 0x01
    1f72:	00 97       	sbiw	r24, 0x00	; 0
    1f74:	d1 f6       	brne	.-76     	; 0x1f2a <newPassword+0x2a6>
    1f76:	28 c0       	rjmp	.+80     	; 0x1fc8 <newPassword+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f78:	8e 01       	movw	r16, r28
    1f7a:	03 55       	subi	r16, 0x53	; 83
    1f7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f7e:	fe 01       	movw	r30, r28
    1f80:	e1 55       	subi	r30, 0x51	; 81
    1f82:	ff 4f       	sbci	r31, 0xFF	; 255
    1f84:	60 81       	ld	r22, Z
    1f86:	71 81       	ldd	r23, Z+1	; 0x01
    1f88:	82 81       	ldd	r24, Z+2	; 0x02
    1f8a:	93 81       	ldd	r25, Z+3	; 0x03
    1f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	f8 01       	movw	r30, r16
    1f96:	91 83       	std	Z+1, r25	; 0x01
    1f98:	80 83       	st	Z, r24
    1f9a:	de 01       	movw	r26, r28
    1f9c:	a7 55       	subi	r26, 0x57	; 87
    1f9e:	bf 4f       	sbci	r27, 0xFF	; 255
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	e3 55       	subi	r30, 0x53	; 83
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	80 81       	ld	r24, Z
    1fa8:	91 81       	ldd	r25, Z+1	; 0x01
    1faa:	11 96       	adiw	r26, 0x01	; 1
    1fac:	9c 93       	st	X, r25
    1fae:	8e 93       	st	-X, r24
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	e7 55       	subi	r30, 0x57	; 87
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	80 81       	ld	r24, Z
    1fb8:	91 81       	ldd	r25, Z+1	; 0x01
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	f1 f7       	brne	.-4      	; 0x1fba <newPassword+0x336>
    1fbe:	fe 01       	movw	r30, r28
    1fc0:	e7 55       	subi	r30, 0x57	; 87
    1fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc4:	91 83       	std	Z+1, r25	; 0x01
    1fc6:	80 83       	st	Z, r24
		_delay_ms(500);
		for (i = 0; i < 5; i++) {
    1fc8:	fe 01       	movw	r30, r28
    1fca:	e9 53       	subi	r30, 0x39	; 57
    1fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fce:	10 82       	st	Z, r1
    1fd0:	b7 c1       	rjmp	.+878    	; 0x2340 <newPassword+0x6bc>
			key = KEYPAD_getPressed();
    1fd2:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressed>
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	e4 53       	subi	r30, 0x34	; 52
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	80 83       	st	Z, r24
			if (key == 13) {
    1fde:	fe 01       	movw	r30, r28
    1fe0:	e4 53       	subi	r30, 0x34	; 52
    1fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe4:	80 81       	ld	r24, Z
    1fe6:	8d 30       	cpi	r24, 0x0D	; 13
    1fe8:	09 f0       	breq	.+2      	; 0x1fec <newPassword+0x368>
    1fea:	b5 c0       	rjmp	.+362    	; 0x2156 <newPassword+0x4d2>
    1fec:	fe 01       	movw	r30, r28
    1fee:	eb 55       	subi	r30, 0x5B	; 91
    1ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	90 e8       	ldi	r25, 0x80	; 128
    1ff6:	a9 e0       	ldi	r26, 0x09	; 9
    1ff8:	b5 e4       	ldi	r27, 0x45	; 69
    1ffa:	80 83       	st	Z, r24
    1ffc:	91 83       	std	Z+1, r25	; 0x01
    1ffe:	a2 83       	std	Z+2, r26	; 0x02
    2000:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2002:	8e 01       	movw	r16, r28
    2004:	0f 55       	subi	r16, 0x5F	; 95
    2006:	1f 4f       	sbci	r17, 0xFF	; 255
    2008:	fe 01       	movw	r30, r28
    200a:	eb 55       	subi	r30, 0x5B	; 91
    200c:	ff 4f       	sbci	r31, 0xFF	; 255
    200e:	60 81       	ld	r22, Z
    2010:	71 81       	ldd	r23, Z+1	; 0x01
    2012:	82 81       	ldd	r24, Z+2	; 0x02
    2014:	93 81       	ldd	r25, Z+3	; 0x03
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	4a e7       	ldi	r20, 0x7A	; 122
    201c:	53 e4       	ldi	r21, 0x43	; 67
    201e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	f8 01       	movw	r30, r16
    2028:	80 83       	st	Z, r24
    202a:	91 83       	std	Z+1, r25	; 0x01
    202c:	a2 83       	std	Z+2, r26	; 0x02
    202e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2030:	fe 01       	movw	r30, r28
    2032:	ef 55       	subi	r30, 0x5F	; 95
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	60 81       	ld	r22, Z
    2038:	71 81       	ldd	r23, Z+1	; 0x01
    203a:	82 81       	ldd	r24, Z+2	; 0x02
    203c:	93 81       	ldd	r25, Z+3	; 0x03
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e8       	ldi	r20, 0x80	; 128
    2044:	5f e3       	ldi	r21, 0x3F	; 63
    2046:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    204a:	88 23       	and	r24, r24
    204c:	44 f4       	brge	.+16     	; 0x205e <newPassword+0x3da>
		__ticks = 1;
    204e:	fe 01       	movw	r30, r28
    2050:	e1 56       	subi	r30, 0x61	; 97
    2052:	ff 4f       	sbci	r31, 0xFF	; 255
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	91 83       	std	Z+1, r25	; 0x01
    205a:	80 83       	st	Z, r24
    205c:	64 c0       	rjmp	.+200    	; 0x2126 <newPassword+0x4a2>
	else if (__tmp > 65535)
    205e:	fe 01       	movw	r30, r28
    2060:	ef 55       	subi	r30, 0x5F	; 95
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	60 81       	ld	r22, Z
    2066:	71 81       	ldd	r23, Z+1	; 0x01
    2068:	82 81       	ldd	r24, Z+2	; 0x02
    206a:	93 81       	ldd	r25, Z+3	; 0x03
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	3f ef       	ldi	r19, 0xFF	; 255
    2070:	4f e7       	ldi	r20, 0x7F	; 127
    2072:	57 e4       	ldi	r21, 0x47	; 71
    2074:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2078:	18 16       	cp	r1, r24
    207a:	0c f0       	brlt	.+2      	; 0x207e <newPassword+0x3fa>
    207c:	43 c0       	rjmp	.+134    	; 0x2104 <newPassword+0x480>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    207e:	fe 01       	movw	r30, r28
    2080:	eb 55       	subi	r30, 0x5B	; 91
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	60 81       	ld	r22, Z
    2086:	71 81       	ldd	r23, Z+1	; 0x01
    2088:	82 81       	ldd	r24, Z+2	; 0x02
    208a:	93 81       	ldd	r25, Z+3	; 0x03
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	40 e2       	ldi	r20, 0x20	; 32
    2092:	51 e4       	ldi	r21, 0x41	; 65
    2094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	8e 01       	movw	r16, r28
    209e:	01 56       	subi	r16, 0x61	; 97
    20a0:	1f 4f       	sbci	r17, 0xFF	; 255
    20a2:	bc 01       	movw	r22, r24
    20a4:	cd 01       	movw	r24, r26
    20a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	f8 01       	movw	r30, r16
    20b0:	91 83       	std	Z+1, r25	; 0x01
    20b2:	80 83       	st	Z, r24
    20b4:	1f c0       	rjmp	.+62     	; 0x20f4 <newPassword+0x470>
    20b6:	fe 01       	movw	r30, r28
    20b8:	e3 56       	subi	r30, 0x63	; 99
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	89 e1       	ldi	r24, 0x19	; 25
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	91 83       	std	Z+1, r25	; 0x01
    20c2:	80 83       	st	Z, r24
    20c4:	fe 01       	movw	r30, r28
    20c6:	e3 56       	subi	r30, 0x63	; 99
    20c8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ca:	80 81       	ld	r24, Z
    20cc:	91 81       	ldd	r25, Z+1	; 0x01
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	f1 f7       	brne	.-4      	; 0x20ce <newPassword+0x44a>
    20d2:	fe 01       	movw	r30, r28
    20d4:	e3 56       	subi	r30, 0x63	; 99
    20d6:	ff 4f       	sbci	r31, 0xFF	; 255
    20d8:	91 83       	std	Z+1, r25	; 0x01
    20da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20dc:	de 01       	movw	r26, r28
    20de:	a1 56       	subi	r26, 0x61	; 97
    20e0:	bf 4f       	sbci	r27, 0xFF	; 255
    20e2:	fe 01       	movw	r30, r28
    20e4:	e1 56       	subi	r30, 0x61	; 97
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	80 81       	ld	r24, Z
    20ea:	91 81       	ldd	r25, Z+1	; 0x01
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	11 96       	adiw	r26, 0x01	; 1
    20f0:	9c 93       	st	X, r25
    20f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f4:	fe 01       	movw	r30, r28
    20f6:	e1 56       	subi	r30, 0x61	; 97
    20f8:	ff 4f       	sbci	r31, 0xFF	; 255
    20fa:	80 81       	ld	r24, Z
    20fc:	91 81       	ldd	r25, Z+1	; 0x01
    20fe:	00 97       	sbiw	r24, 0x00	; 0
    2100:	d1 f6       	brne	.-76     	; 0x20b6 <newPassword+0x432>
    2102:	25 c1       	rjmp	.+586    	; 0x234e <newPassword+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2104:	8e 01       	movw	r16, r28
    2106:	01 56       	subi	r16, 0x61	; 97
    2108:	1f 4f       	sbci	r17, 0xFF	; 255
    210a:	fe 01       	movw	r30, r28
    210c:	ef 55       	subi	r30, 0x5F	; 95
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	60 81       	ld	r22, Z
    2112:	71 81       	ldd	r23, Z+1	; 0x01
    2114:	82 81       	ldd	r24, Z+2	; 0x02
    2116:	93 81       	ldd	r25, Z+3	; 0x03
    2118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	f8 01       	movw	r30, r16
    2122:	91 83       	std	Z+1, r25	; 0x01
    2124:	80 83       	st	Z, r24
    2126:	de 01       	movw	r26, r28
    2128:	a5 56       	subi	r26, 0x65	; 101
    212a:	bf 4f       	sbci	r27, 0xFF	; 255
    212c:	fe 01       	movw	r30, r28
    212e:	e1 56       	subi	r30, 0x61	; 97
    2130:	ff 4f       	sbci	r31, 0xFF	; 255
    2132:	80 81       	ld	r24, Z
    2134:	91 81       	ldd	r25, Z+1	; 0x01
    2136:	11 96       	adiw	r26, 0x01	; 1
    2138:	9c 93       	st	X, r25
    213a:	8e 93       	st	-X, r24
    213c:	fe 01       	movw	r30, r28
    213e:	e5 56       	subi	r30, 0x65	; 101
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	80 81       	ld	r24, Z
    2144:	91 81       	ldd	r25, Z+1	; 0x01
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	f1 f7       	brne	.-4      	; 0x2146 <newPassword+0x4c2>
    214a:	fe 01       	movw	r30, r28
    214c:	e5 56       	subi	r30, 0x65	; 101
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	91 83       	std	Z+1, r25	; 0x01
    2152:	80 83       	st	Z, r24
    2154:	fc c0       	rjmp	.+504    	; 0x234e <newPassword+0x6ca>
				_delay_ms(PUTTON_TIME);
				break;
			} else {
				LCD_displayStringRowColumn(1, i, "*");
    2156:	fe 01       	movw	r30, r28
    2158:	e9 53       	subi	r30, 0x39	; 57
    215a:	ff 4f       	sbci	r31, 0xFF	; 255
    215c:	2f ed       	ldi	r18, 0xDF	; 223
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	60 81       	ld	r22, Z
    2164:	a9 01       	movw	r20, r18
    2166:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_displayStringRowColumn>
    216a:	fe 01       	movw	r30, r28
    216c:	e9 56       	subi	r30, 0x69	; 105
    216e:	ff 4f       	sbci	r31, 0xFF	; 255
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	90 e8       	ldi	r25, 0x80	; 128
    2174:	a9 e0       	ldi	r26, 0x09	; 9
    2176:	b5 e4       	ldi	r27, 0x45	; 69
    2178:	80 83       	st	Z, r24
    217a:	91 83       	std	Z+1, r25	; 0x01
    217c:	a2 83       	std	Z+2, r26	; 0x02
    217e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2180:	8e 01       	movw	r16, r28
    2182:	0d 56       	subi	r16, 0x6D	; 109
    2184:	1f 4f       	sbci	r17, 0xFF	; 255
    2186:	fe 01       	movw	r30, r28
    2188:	e9 56       	subi	r30, 0x69	; 105
    218a:	ff 4f       	sbci	r31, 0xFF	; 255
    218c:	60 81       	ld	r22, Z
    218e:	71 81       	ldd	r23, Z+1	; 0x01
    2190:	82 81       	ldd	r24, Z+2	; 0x02
    2192:	93 81       	ldd	r25, Z+3	; 0x03
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	4a e7       	ldi	r20, 0x7A	; 122
    219a:	53 e4       	ldi	r21, 0x43	; 67
    219c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	f8 01       	movw	r30, r16
    21a6:	80 83       	st	Z, r24
    21a8:	91 83       	std	Z+1, r25	; 0x01
    21aa:	a2 83       	std	Z+2, r26	; 0x02
    21ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21ae:	fe 01       	movw	r30, r28
    21b0:	ed 56       	subi	r30, 0x6D	; 109
    21b2:	ff 4f       	sbci	r31, 0xFF	; 255
    21b4:	60 81       	ld	r22, Z
    21b6:	71 81       	ldd	r23, Z+1	; 0x01
    21b8:	82 81       	ldd	r24, Z+2	; 0x02
    21ba:	93 81       	ldd	r25, Z+3	; 0x03
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e8       	ldi	r20, 0x80	; 128
    21c2:	5f e3       	ldi	r21, 0x3F	; 63
    21c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21c8:	88 23       	and	r24, r24
    21ca:	44 f4       	brge	.+16     	; 0x21dc <newPassword+0x558>
		__ticks = 1;
    21cc:	fe 01       	movw	r30, r28
    21ce:	ef 56       	subi	r30, 0x6F	; 111
    21d0:	ff 4f       	sbci	r31, 0xFF	; 255
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	91 83       	std	Z+1, r25	; 0x01
    21d8:	80 83       	st	Z, r24
    21da:	64 c0       	rjmp	.+200    	; 0x22a4 <newPassword+0x620>
	else if (__tmp > 65535)
    21dc:	fe 01       	movw	r30, r28
    21de:	ed 56       	subi	r30, 0x6D	; 109
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	60 81       	ld	r22, Z
    21e4:	71 81       	ldd	r23, Z+1	; 0x01
    21e6:	82 81       	ldd	r24, Z+2	; 0x02
    21e8:	93 81       	ldd	r25, Z+3	; 0x03
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	3f ef       	ldi	r19, 0xFF	; 255
    21ee:	4f e7       	ldi	r20, 0x7F	; 127
    21f0:	57 e4       	ldi	r21, 0x47	; 71
    21f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21f6:	18 16       	cp	r1, r24
    21f8:	0c f0       	brlt	.+2      	; 0x21fc <newPassword+0x578>
    21fa:	43 c0       	rjmp	.+134    	; 0x2282 <newPassword+0x5fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21fc:	fe 01       	movw	r30, r28
    21fe:	e9 56       	subi	r30, 0x69	; 105
    2200:	ff 4f       	sbci	r31, 0xFF	; 255
    2202:	60 81       	ld	r22, Z
    2204:	71 81       	ldd	r23, Z+1	; 0x01
    2206:	82 81       	ldd	r24, Z+2	; 0x02
    2208:	93 81       	ldd	r25, Z+3	; 0x03
    220a:	20 e0       	ldi	r18, 0x00	; 0
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	40 e2       	ldi	r20, 0x20	; 32
    2210:	51 e4       	ldi	r21, 0x41	; 65
    2212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	8e 01       	movw	r16, r28
    221c:	0f 56       	subi	r16, 0x6F	; 111
    221e:	1f 4f       	sbci	r17, 0xFF	; 255
    2220:	bc 01       	movw	r22, r24
    2222:	cd 01       	movw	r24, r26
    2224:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	f8 01       	movw	r30, r16
    222e:	91 83       	std	Z+1, r25	; 0x01
    2230:	80 83       	st	Z, r24
    2232:	1f c0       	rjmp	.+62     	; 0x2272 <newPassword+0x5ee>
    2234:	fe 01       	movw	r30, r28
    2236:	e1 57       	subi	r30, 0x71	; 113
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	89 e1       	ldi	r24, 0x19	; 25
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	91 83       	std	Z+1, r25	; 0x01
    2240:	80 83       	st	Z, r24
    2242:	fe 01       	movw	r30, r28
    2244:	e1 57       	subi	r30, 0x71	; 113
    2246:	ff 4f       	sbci	r31, 0xFF	; 255
    2248:	80 81       	ld	r24, Z
    224a:	91 81       	ldd	r25, Z+1	; 0x01
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	f1 f7       	brne	.-4      	; 0x224c <newPassword+0x5c8>
    2250:	fe 01       	movw	r30, r28
    2252:	e1 57       	subi	r30, 0x71	; 113
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	91 83       	std	Z+1, r25	; 0x01
    2258:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    225a:	de 01       	movw	r26, r28
    225c:	af 56       	subi	r26, 0x6F	; 111
    225e:	bf 4f       	sbci	r27, 0xFF	; 255
    2260:	fe 01       	movw	r30, r28
    2262:	ef 56       	subi	r30, 0x6F	; 111
    2264:	ff 4f       	sbci	r31, 0xFF	; 255
    2266:	80 81       	ld	r24, Z
    2268:	91 81       	ldd	r25, Z+1	; 0x01
    226a:	01 97       	sbiw	r24, 0x01	; 1
    226c:	11 96       	adiw	r26, 0x01	; 1
    226e:	9c 93       	st	X, r25
    2270:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2272:	fe 01       	movw	r30, r28
    2274:	ef 56       	subi	r30, 0x6F	; 111
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	80 81       	ld	r24, Z
    227a:	91 81       	ldd	r25, Z+1	; 0x01
    227c:	00 97       	sbiw	r24, 0x00	; 0
    227e:	d1 f6       	brne	.-76     	; 0x2234 <newPassword+0x5b0>
    2280:	28 c0       	rjmp	.+80     	; 0x22d2 <newPassword+0x64e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2282:	8e 01       	movw	r16, r28
    2284:	0f 56       	subi	r16, 0x6F	; 111
    2286:	1f 4f       	sbci	r17, 0xFF	; 255
    2288:	fe 01       	movw	r30, r28
    228a:	ed 56       	subi	r30, 0x6D	; 109
    228c:	ff 4f       	sbci	r31, 0xFF	; 255
    228e:	60 81       	ld	r22, Z
    2290:	71 81       	ldd	r23, Z+1	; 0x01
    2292:	82 81       	ldd	r24, Z+2	; 0x02
    2294:	93 81       	ldd	r25, Z+3	; 0x03
    2296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	f8 01       	movw	r30, r16
    22a0:	91 83       	std	Z+1, r25	; 0x01
    22a2:	80 83       	st	Z, r24
    22a4:	de 01       	movw	r26, r28
    22a6:	a3 57       	subi	r26, 0x73	; 115
    22a8:	bf 4f       	sbci	r27, 0xFF	; 255
    22aa:	fe 01       	movw	r30, r28
    22ac:	ef 56       	subi	r30, 0x6F	; 111
    22ae:	ff 4f       	sbci	r31, 0xFF	; 255
    22b0:	80 81       	ld	r24, Z
    22b2:	91 81       	ldd	r25, Z+1	; 0x01
    22b4:	11 96       	adiw	r26, 0x01	; 1
    22b6:	9c 93       	st	X, r25
    22b8:	8e 93       	st	-X, r24
    22ba:	fe 01       	movw	r30, r28
    22bc:	e3 57       	subi	r30, 0x73	; 115
    22be:	ff 4f       	sbci	r31, 0xFF	; 255
    22c0:	80 81       	ld	r24, Z
    22c2:	91 81       	ldd	r25, Z+1	; 0x01
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	f1 f7       	brne	.-4      	; 0x22c4 <newPassword+0x640>
    22c8:	fe 01       	movw	r30, r28
    22ca:	e3 57       	subi	r30, 0x73	; 115
    22cc:	ff 4f       	sbci	r31, 0xFF	; 255
    22ce:	91 83       	std	Z+1, r25	; 0x01
    22d0:	80 83       	st	Z, r24
				_delay_ms(PUTTON_TIME);
		//		LCD_displayChar((char) key);
				if ( key <= 9)
    22d2:	fe 01       	movw	r30, r28
    22d4:	e4 53       	subi	r30, 0x34	; 52
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	80 81       	ld	r24, Z
    22da:	8a 30       	cpi	r24, 0x0A	; 10
    22dc:	a8 f4       	brcc	.+42     	; 0x2308 <newPassword+0x684>
											pass[i] =  key + 48;
    22de:	fe 01       	movw	r30, r28
    22e0:	e9 53       	subi	r30, 0x39	; 57
    22e2:	ff 4f       	sbci	r31, 0xFF	; 255
    22e4:	80 81       	ld	r24, Z
    22e6:	28 2f       	mov	r18, r24
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	fe 01       	movw	r30, r28
    22ec:	e6 53       	subi	r30, 0x36	; 54
    22ee:	ff 4f       	sbci	r31, 0xFF	; 255
    22f0:	80 81       	ld	r24, Z
    22f2:	91 81       	ldd	r25, Z+1	; 0x01
    22f4:	dc 01       	movw	r26, r24
    22f6:	a2 0f       	add	r26, r18
    22f8:	b3 1f       	adc	r27, r19
    22fa:	fe 01       	movw	r30, r28
    22fc:	e4 53       	subi	r30, 0x34	; 52
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	80 81       	ld	r24, Z
    2302:	80 5d       	subi	r24, 0xD0	; 208
    2304:	8c 93       	st	X, r24
    2306:	13 c0       	rjmp	.+38     	; 0x232e <newPassword+0x6aa>
										else
											pass[i] = (char) key;
    2308:	fe 01       	movw	r30, r28
    230a:	e9 53       	subi	r30, 0x39	; 57
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	80 81       	ld	r24, Z
    2310:	28 2f       	mov	r18, r24
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	fe 01       	movw	r30, r28
    2316:	e6 53       	subi	r30, 0x36	; 54
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	80 81       	ld	r24, Z
    231c:	91 81       	ldd	r25, Z+1	; 0x01
    231e:	dc 01       	movw	r26, r24
    2320:	a2 0f       	add	r26, r18
    2322:	b3 1f       	adc	r27, r19
    2324:	fe 01       	movw	r30, r28
    2326:	e4 53       	subi	r30, 0x34	; 52
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	80 81       	ld	r24, Z
    232c:	8c 93       	st	X, r24
	while (1) {
		match = 1;
		LCD_clearScreen();
		LCD_displayStringRowColumn(0, 0, "Enter new Pass");
		_delay_ms(500);
		for (i = 0; i < 5; i++) {
    232e:	de 01       	movw	r26, r28
    2330:	a9 53       	subi	r26, 0x39	; 57
    2332:	bf 4f       	sbci	r27, 0xFF	; 255
    2334:	fe 01       	movw	r30, r28
    2336:	e9 53       	subi	r30, 0x39	; 57
    2338:	ff 4f       	sbci	r31, 0xFF	; 255
    233a:	80 81       	ld	r24, Z
    233c:	8f 5f       	subi	r24, 0xFF	; 255
    233e:	8c 93       	st	X, r24
    2340:	fe 01       	movw	r30, r28
    2342:	e9 53       	subi	r30, 0x39	; 57
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	80 81       	ld	r24, Z
    2348:	85 30       	cpi	r24, 0x05	; 5
    234a:	08 f4       	brcc	.+2      	; 0x234e <newPassword+0x6ca>
    234c:	42 ce       	rjmp	.-892    	; 0x1fd2 <newPassword+0x34e>
											pass[i] = (char) key;
			}
		}
	//	LCD_displayStringRowColumn(1, 0, pass);
	//	_delay_ms(10000);
		if (i != 5) {
    234e:	fe 01       	movw	r30, r28
    2350:	e9 53       	subi	r30, 0x39	; 57
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	80 81       	ld	r24, Z
    2356:	85 30       	cpi	r24, 0x05	; 5
    2358:	09 f4       	brne	.+2      	; 0x235c <newPassword+0x6d8>
    235a:	bc c0       	rjmp	.+376    	; 0x24d4 <newPassword+0x850>
			LCD_displayStringRowColumn(1, 0, "pass must be 5 v");
    235c:	21 ee       	ldi	r18, 0xE1	; 225
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	60 e0       	ldi	r22, 0x00	; 0
    2364:	a9 01       	movw	r20, r18
    2366:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_displayStringRowColumn>
    236a:	fe 01       	movw	r30, r28
    236c:	e7 57       	subi	r30, 0x77	; 119
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	90 e4       	ldi	r25, 0x40	; 64
    2374:	ac e1       	ldi	r26, 0x1C	; 28
    2376:	b6 e4       	ldi	r27, 0x46	; 70
    2378:	80 83       	st	Z, r24
    237a:	91 83       	std	Z+1, r25	; 0x01
    237c:	a2 83       	std	Z+2, r26	; 0x02
    237e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2380:	8e 01       	movw	r16, r28
    2382:	0b 57       	subi	r16, 0x7B	; 123
    2384:	1f 4f       	sbci	r17, 0xFF	; 255
    2386:	fe 01       	movw	r30, r28
    2388:	e7 57       	subi	r30, 0x77	; 119
    238a:	ff 4f       	sbci	r31, 0xFF	; 255
    238c:	60 81       	ld	r22, Z
    238e:	71 81       	ldd	r23, Z+1	; 0x01
    2390:	82 81       	ldd	r24, Z+2	; 0x02
    2392:	93 81       	ldd	r25, Z+3	; 0x03
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	4a e7       	ldi	r20, 0x7A	; 122
    239a:	53 e4       	ldi	r21, 0x43	; 67
    239c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	f8 01       	movw	r30, r16
    23a6:	80 83       	st	Z, r24
    23a8:	91 83       	std	Z+1, r25	; 0x01
    23aa:	a2 83       	std	Z+2, r26	; 0x02
    23ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23ae:	fe 01       	movw	r30, r28
    23b0:	eb 57       	subi	r30, 0x7B	; 123
    23b2:	ff 4f       	sbci	r31, 0xFF	; 255
    23b4:	60 81       	ld	r22, Z
    23b6:	71 81       	ldd	r23, Z+1	; 0x01
    23b8:	82 81       	ldd	r24, Z+2	; 0x02
    23ba:	93 81       	ldd	r25, Z+3	; 0x03
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e8       	ldi	r20, 0x80	; 128
    23c2:	5f e3       	ldi	r21, 0x3F	; 63
    23c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23c8:	88 23       	and	r24, r24
    23ca:	44 f4       	brge	.+16     	; 0x23dc <newPassword+0x758>
		__ticks = 1;
    23cc:	fe 01       	movw	r30, r28
    23ce:	ed 57       	subi	r30, 0x7D	; 125
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	91 83       	std	Z+1, r25	; 0x01
    23d8:	80 83       	st	Z, r24
    23da:	64 c0       	rjmp	.+200    	; 0x24a4 <newPassword+0x820>
	else if (__tmp > 65535)
    23dc:	fe 01       	movw	r30, r28
    23de:	eb 57       	subi	r30, 0x7B	; 123
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	60 81       	ld	r22, Z
    23e4:	71 81       	ldd	r23, Z+1	; 0x01
    23e6:	82 81       	ldd	r24, Z+2	; 0x02
    23e8:	93 81       	ldd	r25, Z+3	; 0x03
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	3f ef       	ldi	r19, 0xFF	; 255
    23ee:	4f e7       	ldi	r20, 0x7F	; 127
    23f0:	57 e4       	ldi	r21, 0x47	; 71
    23f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23f6:	18 16       	cp	r1, r24
    23f8:	0c f0       	brlt	.+2      	; 0x23fc <newPassword+0x778>
    23fa:	43 c0       	rjmp	.+134    	; 0x2482 <newPassword+0x7fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fc:	fe 01       	movw	r30, r28
    23fe:	e7 57       	subi	r30, 0x77	; 119
    2400:	ff 4f       	sbci	r31, 0xFF	; 255
    2402:	60 81       	ld	r22, Z
    2404:	71 81       	ldd	r23, Z+1	; 0x01
    2406:	82 81       	ldd	r24, Z+2	; 0x02
    2408:	93 81       	ldd	r25, Z+3	; 0x03
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	40 e2       	ldi	r20, 0x20	; 32
    2410:	51 e4       	ldi	r21, 0x41	; 65
    2412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	8e 01       	movw	r16, r28
    241c:	0d 57       	subi	r16, 0x7D	; 125
    241e:	1f 4f       	sbci	r17, 0xFF	; 255
    2420:	bc 01       	movw	r22, r24
    2422:	cd 01       	movw	r24, r26
    2424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	f8 01       	movw	r30, r16
    242e:	91 83       	std	Z+1, r25	; 0x01
    2430:	80 83       	st	Z, r24
    2432:	1f c0       	rjmp	.+62     	; 0x2472 <newPassword+0x7ee>
    2434:	fe 01       	movw	r30, r28
    2436:	ef 57       	subi	r30, 0x7F	; 127
    2438:	ff 4f       	sbci	r31, 0xFF	; 255
    243a:	89 e1       	ldi	r24, 0x19	; 25
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	91 83       	std	Z+1, r25	; 0x01
    2440:	80 83       	st	Z, r24
    2442:	fe 01       	movw	r30, r28
    2444:	ef 57       	subi	r30, 0x7F	; 127
    2446:	ff 4f       	sbci	r31, 0xFF	; 255
    2448:	80 81       	ld	r24, Z
    244a:	91 81       	ldd	r25, Z+1	; 0x01
    244c:	01 97       	sbiw	r24, 0x01	; 1
    244e:	f1 f7       	brne	.-4      	; 0x244c <newPassword+0x7c8>
    2450:	fe 01       	movw	r30, r28
    2452:	ef 57       	subi	r30, 0x7F	; 127
    2454:	ff 4f       	sbci	r31, 0xFF	; 255
    2456:	91 83       	std	Z+1, r25	; 0x01
    2458:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    245a:	de 01       	movw	r26, r28
    245c:	ad 57       	subi	r26, 0x7D	; 125
    245e:	bf 4f       	sbci	r27, 0xFF	; 255
    2460:	fe 01       	movw	r30, r28
    2462:	ed 57       	subi	r30, 0x7D	; 125
    2464:	ff 4f       	sbci	r31, 0xFF	; 255
    2466:	80 81       	ld	r24, Z
    2468:	91 81       	ldd	r25, Z+1	; 0x01
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	11 96       	adiw	r26, 0x01	; 1
    246e:	9c 93       	st	X, r25
    2470:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2472:	fe 01       	movw	r30, r28
    2474:	ed 57       	subi	r30, 0x7D	; 125
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	80 81       	ld	r24, Z
    247a:	91 81       	ldd	r25, Z+1	; 0x01
    247c:	00 97       	sbiw	r24, 0x00	; 0
    247e:	d1 f6       	brne	.-76     	; 0x2434 <newPassword+0x7b0>
    2480:	e1 cc       	rjmp	.-1598   	; 0x1e44 <newPassword+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2482:	8e 01       	movw	r16, r28
    2484:	0d 57       	subi	r16, 0x7D	; 125
    2486:	1f 4f       	sbci	r17, 0xFF	; 255
    2488:	fe 01       	movw	r30, r28
    248a:	eb 57       	subi	r30, 0x7B	; 123
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	60 81       	ld	r22, Z
    2490:	71 81       	ldd	r23, Z+1	; 0x01
    2492:	82 81       	ldd	r24, Z+2	; 0x02
    2494:	93 81       	ldd	r25, Z+3	; 0x03
    2496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	f8 01       	movw	r30, r16
    24a0:	91 83       	std	Z+1, r25	; 0x01
    24a2:	80 83       	st	Z, r24
    24a4:	de 01       	movw	r26, r28
    24a6:	a1 58       	subi	r26, 0x81	; 129
    24a8:	bf 4f       	sbci	r27, 0xFF	; 255
    24aa:	fe 01       	movw	r30, r28
    24ac:	ed 57       	subi	r30, 0x7D	; 125
    24ae:	ff 4f       	sbci	r31, 0xFF	; 255
    24b0:	80 81       	ld	r24, Z
    24b2:	91 81       	ldd	r25, Z+1	; 0x01
    24b4:	11 96       	adiw	r26, 0x01	; 1
    24b6:	9c 93       	st	X, r25
    24b8:	8e 93       	st	-X, r24
    24ba:	fe 01       	movw	r30, r28
    24bc:	e1 58       	subi	r30, 0x81	; 129
    24be:	ff 4f       	sbci	r31, 0xFF	; 255
    24c0:	80 81       	ld	r24, Z
    24c2:	91 81       	ldd	r25, Z+1	; 0x01
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	f1 f7       	brne	.-4      	; 0x24c4 <newPassword+0x840>
    24c8:	fe 01       	movw	r30, r28
    24ca:	e1 58       	subi	r30, 0x81	; 129
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	91 83       	std	Z+1, r25	; 0x01
    24d0:	80 83       	st	Z, r24
    24d2:	b8 cc       	rjmp	.-1680   	; 0x1e44 <newPassword+0x1c0>
			_delay_ms(10000);
			continue;
		} else {
			key = KEYPAD_getPressed();
    24d4:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressed>
    24d8:	fe 01       	movw	r30, r28
    24da:	e4 53       	subi	r30, 0x34	; 52
    24dc:	ff 4f       	sbci	r31, 0xFF	; 255
    24de:	80 83       	st	Z, r24
			if (key == 13) {
    24e0:	fe 01       	movw	r30, r28
    24e2:	e4 53       	subi	r30, 0x34	; 52
    24e4:	ff 4f       	sbci	r31, 0xFF	; 255
    24e6:	80 81       	ld	r24, Z
    24e8:	8d 30       	cpi	r24, 0x0D	; 13
    24ea:	09 f0       	breq	.+2      	; 0x24ee <newPassword+0x86a>
    24ec:	5c c4       	rjmp	.+2232   	; 0x2da6 <newPassword+0x1122>

				LCD_clearScreen();
    24ee:	0e 94 66 0b 	call	0x16cc	; 0x16cc <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0, "Renter the Pass");
    24f2:	22 ef       	ldi	r18, 0xF2	; 242
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	60 e0       	ldi	r22, 0x00	; 0
    24fa:	a9 01       	movw	r20, r18
    24fc:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_displayStringRowColumn>
    2500:	fe 01       	movw	r30, r28
    2502:	e5 58       	subi	r30, 0x85	; 133
    2504:	ff 4f       	sbci	r31, 0xFF	; 255
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	90 e4       	ldi	r25, 0x40	; 64
    250a:	ac e1       	ldi	r26, 0x1C	; 28
    250c:	b6 e4       	ldi	r27, 0x46	; 70
    250e:	80 83       	st	Z, r24
    2510:	91 83       	std	Z+1, r25	; 0x01
    2512:	a2 83       	std	Z+2, r26	; 0x02
    2514:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2516:	8e 01       	movw	r16, r28
    2518:	09 58       	subi	r16, 0x89	; 137
    251a:	1f 4f       	sbci	r17, 0xFF	; 255
    251c:	fe 01       	movw	r30, r28
    251e:	e5 58       	subi	r30, 0x85	; 133
    2520:	ff 4f       	sbci	r31, 0xFF	; 255
    2522:	60 81       	ld	r22, Z
    2524:	71 81       	ldd	r23, Z+1	; 0x01
    2526:	82 81       	ldd	r24, Z+2	; 0x02
    2528:	93 81       	ldd	r25, Z+3	; 0x03
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	4a e7       	ldi	r20, 0x7A	; 122
    2530:	53 e4       	ldi	r21, 0x43	; 67
    2532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	f8 01       	movw	r30, r16
    253c:	80 83       	st	Z, r24
    253e:	91 83       	std	Z+1, r25	; 0x01
    2540:	a2 83       	std	Z+2, r26	; 0x02
    2542:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2544:	fe 01       	movw	r30, r28
    2546:	e9 58       	subi	r30, 0x89	; 137
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	60 81       	ld	r22, Z
    254c:	71 81       	ldd	r23, Z+1	; 0x01
    254e:	82 81       	ldd	r24, Z+2	; 0x02
    2550:	93 81       	ldd	r25, Z+3	; 0x03
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	40 e8       	ldi	r20, 0x80	; 128
    2558:	5f e3       	ldi	r21, 0x3F	; 63
    255a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    255e:	88 23       	and	r24, r24
    2560:	44 f4       	brge	.+16     	; 0x2572 <newPassword+0x8ee>
		__ticks = 1;
    2562:	fe 01       	movw	r30, r28
    2564:	eb 58       	subi	r30, 0x8B	; 139
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	91 83       	std	Z+1, r25	; 0x01
    256e:	80 83       	st	Z, r24
    2570:	64 c0       	rjmp	.+200    	; 0x263a <newPassword+0x9b6>
	else if (__tmp > 65535)
    2572:	fe 01       	movw	r30, r28
    2574:	e9 58       	subi	r30, 0x89	; 137
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	60 81       	ld	r22, Z
    257a:	71 81       	ldd	r23, Z+1	; 0x01
    257c:	82 81       	ldd	r24, Z+2	; 0x02
    257e:	93 81       	ldd	r25, Z+3	; 0x03
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	3f ef       	ldi	r19, 0xFF	; 255
    2584:	4f e7       	ldi	r20, 0x7F	; 127
    2586:	57 e4       	ldi	r21, 0x47	; 71
    2588:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    258c:	18 16       	cp	r1, r24
    258e:	0c f0       	brlt	.+2      	; 0x2592 <newPassword+0x90e>
    2590:	43 c0       	rjmp	.+134    	; 0x2618 <newPassword+0x994>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2592:	fe 01       	movw	r30, r28
    2594:	e5 58       	subi	r30, 0x85	; 133
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	60 81       	ld	r22, Z
    259a:	71 81       	ldd	r23, Z+1	; 0x01
    259c:	82 81       	ldd	r24, Z+2	; 0x02
    259e:	93 81       	ldd	r25, Z+3	; 0x03
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	40 e2       	ldi	r20, 0x20	; 32
    25a6:	51 e4       	ldi	r21, 0x41	; 65
    25a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	8e 01       	movw	r16, r28
    25b2:	0b 58       	subi	r16, 0x8B	; 139
    25b4:	1f 4f       	sbci	r17, 0xFF	; 255
    25b6:	bc 01       	movw	r22, r24
    25b8:	cd 01       	movw	r24, r26
    25ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	f8 01       	movw	r30, r16
    25c4:	91 83       	std	Z+1, r25	; 0x01
    25c6:	80 83       	st	Z, r24
    25c8:	1f c0       	rjmp	.+62     	; 0x2608 <newPassword+0x984>
    25ca:	fe 01       	movw	r30, r28
    25cc:	ed 58       	subi	r30, 0x8D	; 141
    25ce:	ff 4f       	sbci	r31, 0xFF	; 255
    25d0:	89 e1       	ldi	r24, 0x19	; 25
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	91 83       	std	Z+1, r25	; 0x01
    25d6:	80 83       	st	Z, r24
    25d8:	fe 01       	movw	r30, r28
    25da:	ed 58       	subi	r30, 0x8D	; 141
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	80 81       	ld	r24, Z
    25e0:	91 81       	ldd	r25, Z+1	; 0x01
    25e2:	01 97       	sbiw	r24, 0x01	; 1
    25e4:	f1 f7       	brne	.-4      	; 0x25e2 <newPassword+0x95e>
    25e6:	fe 01       	movw	r30, r28
    25e8:	ed 58       	subi	r30, 0x8D	; 141
    25ea:	ff 4f       	sbci	r31, 0xFF	; 255
    25ec:	91 83       	std	Z+1, r25	; 0x01
    25ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f0:	de 01       	movw	r26, r28
    25f2:	ab 58       	subi	r26, 0x8B	; 139
    25f4:	bf 4f       	sbci	r27, 0xFF	; 255
    25f6:	fe 01       	movw	r30, r28
    25f8:	eb 58       	subi	r30, 0x8B	; 139
    25fa:	ff 4f       	sbci	r31, 0xFF	; 255
    25fc:	80 81       	ld	r24, Z
    25fe:	91 81       	ldd	r25, Z+1	; 0x01
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	11 96       	adiw	r26, 0x01	; 1
    2604:	9c 93       	st	X, r25
    2606:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2608:	fe 01       	movw	r30, r28
    260a:	eb 58       	subi	r30, 0x8B	; 139
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	80 81       	ld	r24, Z
    2610:	91 81       	ldd	r25, Z+1	; 0x01
    2612:	00 97       	sbiw	r24, 0x00	; 0
    2614:	d1 f6       	brne	.-76     	; 0x25ca <newPassword+0x946>
    2616:	28 c0       	rjmp	.+80     	; 0x2668 <newPassword+0x9e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2618:	8e 01       	movw	r16, r28
    261a:	0b 58       	subi	r16, 0x8B	; 139
    261c:	1f 4f       	sbci	r17, 0xFF	; 255
    261e:	fe 01       	movw	r30, r28
    2620:	e9 58       	subi	r30, 0x89	; 137
    2622:	ff 4f       	sbci	r31, 0xFF	; 255
    2624:	60 81       	ld	r22, Z
    2626:	71 81       	ldd	r23, Z+1	; 0x01
    2628:	82 81       	ldd	r24, Z+2	; 0x02
    262a:	93 81       	ldd	r25, Z+3	; 0x03
    262c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	f8 01       	movw	r30, r16
    2636:	91 83       	std	Z+1, r25	; 0x01
    2638:	80 83       	st	Z, r24
    263a:	de 01       	movw	r26, r28
    263c:	af 58       	subi	r26, 0x8F	; 143
    263e:	bf 4f       	sbci	r27, 0xFF	; 255
    2640:	fe 01       	movw	r30, r28
    2642:	eb 58       	subi	r30, 0x8B	; 139
    2644:	ff 4f       	sbci	r31, 0xFF	; 255
    2646:	80 81       	ld	r24, Z
    2648:	91 81       	ldd	r25, Z+1	; 0x01
    264a:	11 96       	adiw	r26, 0x01	; 1
    264c:	9c 93       	st	X, r25
    264e:	8e 93       	st	-X, r24
    2650:	fe 01       	movw	r30, r28
    2652:	ef 58       	subi	r30, 0x8F	; 143
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	80 81       	ld	r24, Z
    2658:	91 81       	ldd	r25, Z+1	; 0x01
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	f1 f7       	brne	.-4      	; 0x265a <newPassword+0x9d6>
    265e:	fe 01       	movw	r30, r28
    2660:	ef 58       	subi	r30, 0x8F	; 143
    2662:	ff 4f       	sbci	r31, 0xFF	; 255
    2664:	91 83       	std	Z+1, r25	; 0x01
    2666:	80 83       	st	Z, r24
				_delay_ms(10000);
				for (i = 0; i < 5; i++) {
    2668:	fe 01       	movw	r30, r28
    266a:	e9 53       	subi	r30, 0x39	; 57
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	10 82       	st	Z, r1
    2670:	b7 c1       	rjmp	.+878    	; 0x29e0 <newPassword+0xd5c>
					key = KEYPAD_getPressed();
    2672:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressed>
    2676:	fe 01       	movw	r30, r28
    2678:	e4 53       	subi	r30, 0x34	; 52
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	80 83       	st	Z, r24
					if (key == 13) {
    267e:	fe 01       	movw	r30, r28
    2680:	e4 53       	subi	r30, 0x34	; 52
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	80 81       	ld	r24, Z
    2686:	8d 30       	cpi	r24, 0x0D	; 13
    2688:	09 f0       	breq	.+2      	; 0x268c <newPassword+0xa08>
    268a:	b5 c0       	rjmp	.+362    	; 0x27f6 <newPassword+0xb72>
    268c:	fe 01       	movw	r30, r28
    268e:	e3 59       	subi	r30, 0x93	; 147
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	90 e8       	ldi	r25, 0x80	; 128
    2696:	a9 e0       	ldi	r26, 0x09	; 9
    2698:	b5 e4       	ldi	r27, 0x45	; 69
    269a:	80 83       	st	Z, r24
    269c:	91 83       	std	Z+1, r25	; 0x01
    269e:	a2 83       	std	Z+2, r26	; 0x02
    26a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a2:	8e 01       	movw	r16, r28
    26a4:	07 59       	subi	r16, 0x97	; 151
    26a6:	1f 4f       	sbci	r17, 0xFF	; 255
    26a8:	fe 01       	movw	r30, r28
    26aa:	e3 59       	subi	r30, 0x93	; 147
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	60 81       	ld	r22, Z
    26b0:	71 81       	ldd	r23, Z+1	; 0x01
    26b2:	82 81       	ldd	r24, Z+2	; 0x02
    26b4:	93 81       	ldd	r25, Z+3	; 0x03
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	4a e7       	ldi	r20, 0x7A	; 122
    26bc:	53 e4       	ldi	r21, 0x43	; 67
    26be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	f8 01       	movw	r30, r16
    26c8:	80 83       	st	Z, r24
    26ca:	91 83       	std	Z+1, r25	; 0x01
    26cc:	a2 83       	std	Z+2, r26	; 0x02
    26ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26d0:	fe 01       	movw	r30, r28
    26d2:	e7 59       	subi	r30, 0x97	; 151
    26d4:	ff 4f       	sbci	r31, 0xFF	; 255
    26d6:	60 81       	ld	r22, Z
    26d8:	71 81       	ldd	r23, Z+1	; 0x01
    26da:	82 81       	ldd	r24, Z+2	; 0x02
    26dc:	93 81       	ldd	r25, Z+3	; 0x03
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	40 e8       	ldi	r20, 0x80	; 128
    26e4:	5f e3       	ldi	r21, 0x3F	; 63
    26e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ea:	88 23       	and	r24, r24
    26ec:	44 f4       	brge	.+16     	; 0x26fe <newPassword+0xa7a>
		__ticks = 1;
    26ee:	fe 01       	movw	r30, r28
    26f0:	e9 59       	subi	r30, 0x99	; 153
    26f2:	ff 4f       	sbci	r31, 0xFF	; 255
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	91 83       	std	Z+1, r25	; 0x01
    26fa:	80 83       	st	Z, r24
    26fc:	64 c0       	rjmp	.+200    	; 0x27c6 <newPassword+0xb42>
	else if (__tmp > 65535)
    26fe:	fe 01       	movw	r30, r28
    2700:	e7 59       	subi	r30, 0x97	; 151
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	60 81       	ld	r22, Z
    2706:	71 81       	ldd	r23, Z+1	; 0x01
    2708:	82 81       	ldd	r24, Z+2	; 0x02
    270a:	93 81       	ldd	r25, Z+3	; 0x03
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	3f ef       	ldi	r19, 0xFF	; 255
    2710:	4f e7       	ldi	r20, 0x7F	; 127
    2712:	57 e4       	ldi	r21, 0x47	; 71
    2714:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2718:	18 16       	cp	r1, r24
    271a:	0c f0       	brlt	.+2      	; 0x271e <newPassword+0xa9a>
    271c:	43 c0       	rjmp	.+134    	; 0x27a4 <newPassword+0xb20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    271e:	fe 01       	movw	r30, r28
    2720:	e3 59       	subi	r30, 0x93	; 147
    2722:	ff 4f       	sbci	r31, 0xFF	; 255
    2724:	60 81       	ld	r22, Z
    2726:	71 81       	ldd	r23, Z+1	; 0x01
    2728:	82 81       	ldd	r24, Z+2	; 0x02
    272a:	93 81       	ldd	r25, Z+3	; 0x03
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	40 e2       	ldi	r20, 0x20	; 32
    2732:	51 e4       	ldi	r21, 0x41	; 65
    2734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	8e 01       	movw	r16, r28
    273e:	09 59       	subi	r16, 0x99	; 153
    2740:	1f 4f       	sbci	r17, 0xFF	; 255
    2742:	bc 01       	movw	r22, r24
    2744:	cd 01       	movw	r24, r26
    2746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	f8 01       	movw	r30, r16
    2750:	91 83       	std	Z+1, r25	; 0x01
    2752:	80 83       	st	Z, r24
    2754:	1f c0       	rjmp	.+62     	; 0x2794 <newPassword+0xb10>
    2756:	fe 01       	movw	r30, r28
    2758:	eb 59       	subi	r30, 0x9B	; 155
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	89 e1       	ldi	r24, 0x19	; 25
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	91 83       	std	Z+1, r25	; 0x01
    2762:	80 83       	st	Z, r24
    2764:	fe 01       	movw	r30, r28
    2766:	eb 59       	subi	r30, 0x9B	; 155
    2768:	ff 4f       	sbci	r31, 0xFF	; 255
    276a:	80 81       	ld	r24, Z
    276c:	91 81       	ldd	r25, Z+1	; 0x01
    276e:	01 97       	sbiw	r24, 0x01	; 1
    2770:	f1 f7       	brne	.-4      	; 0x276e <newPassword+0xaea>
    2772:	fe 01       	movw	r30, r28
    2774:	eb 59       	subi	r30, 0x9B	; 155
    2776:	ff 4f       	sbci	r31, 0xFF	; 255
    2778:	91 83       	std	Z+1, r25	; 0x01
    277a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    277c:	de 01       	movw	r26, r28
    277e:	a9 59       	subi	r26, 0x99	; 153
    2780:	bf 4f       	sbci	r27, 0xFF	; 255
    2782:	fe 01       	movw	r30, r28
    2784:	e9 59       	subi	r30, 0x99	; 153
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	80 81       	ld	r24, Z
    278a:	91 81       	ldd	r25, Z+1	; 0x01
    278c:	01 97       	sbiw	r24, 0x01	; 1
    278e:	11 96       	adiw	r26, 0x01	; 1
    2790:	9c 93       	st	X, r25
    2792:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2794:	fe 01       	movw	r30, r28
    2796:	e9 59       	subi	r30, 0x99	; 153
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	80 81       	ld	r24, Z
    279c:	91 81       	ldd	r25, Z+1	; 0x01
    279e:	00 97       	sbiw	r24, 0x00	; 0
    27a0:	d1 f6       	brne	.-76     	; 0x2756 <newPassword+0xad2>
    27a2:	25 c1       	rjmp	.+586    	; 0x29ee <newPassword+0xd6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a4:	8e 01       	movw	r16, r28
    27a6:	09 59       	subi	r16, 0x99	; 153
    27a8:	1f 4f       	sbci	r17, 0xFF	; 255
    27aa:	fe 01       	movw	r30, r28
    27ac:	e7 59       	subi	r30, 0x97	; 151
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	60 81       	ld	r22, Z
    27b2:	71 81       	ldd	r23, Z+1	; 0x01
    27b4:	82 81       	ldd	r24, Z+2	; 0x02
    27b6:	93 81       	ldd	r25, Z+3	; 0x03
    27b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	f8 01       	movw	r30, r16
    27c2:	91 83       	std	Z+1, r25	; 0x01
    27c4:	80 83       	st	Z, r24
    27c6:	de 01       	movw	r26, r28
    27c8:	ad 59       	subi	r26, 0x9D	; 157
    27ca:	bf 4f       	sbci	r27, 0xFF	; 255
    27cc:	fe 01       	movw	r30, r28
    27ce:	e9 59       	subi	r30, 0x99	; 153
    27d0:	ff 4f       	sbci	r31, 0xFF	; 255
    27d2:	80 81       	ld	r24, Z
    27d4:	91 81       	ldd	r25, Z+1	; 0x01
    27d6:	11 96       	adiw	r26, 0x01	; 1
    27d8:	9c 93       	st	X, r25
    27da:	8e 93       	st	-X, r24
    27dc:	fe 01       	movw	r30, r28
    27de:	ed 59       	subi	r30, 0x9D	; 157
    27e0:	ff 4f       	sbci	r31, 0xFF	; 255
    27e2:	80 81       	ld	r24, Z
    27e4:	91 81       	ldd	r25, Z+1	; 0x01
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	f1 f7       	brne	.-4      	; 0x27e6 <newPassword+0xb62>
    27ea:	fe 01       	movw	r30, r28
    27ec:	ed 59       	subi	r30, 0x9D	; 157
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	91 83       	std	Z+1, r25	; 0x01
    27f2:	80 83       	st	Z, r24
    27f4:	fc c0       	rjmp	.+504    	; 0x29ee <newPassword+0xd6a>
						_delay_ms(PUTTON_TIME);
						break;
					} else {
						LCD_displayStringRowColumn(1, i, "*");
    27f6:	fe 01       	movw	r30, r28
    27f8:	e9 53       	subi	r30, 0x39	; 57
    27fa:	ff 4f       	sbci	r31, 0xFF	; 255
    27fc:	2f ed       	ldi	r18, 0xDF	; 223
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	60 81       	ld	r22, Z
    2804:	a9 01       	movw	r20, r18
    2806:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_displayStringRowColumn>
    280a:	fe 01       	movw	r30, r28
    280c:	e1 5a       	subi	r30, 0xA1	; 161
    280e:	ff 4f       	sbci	r31, 0xFF	; 255
    2810:	80 e0       	ldi	r24, 0x00	; 0
    2812:	90 e8       	ldi	r25, 0x80	; 128
    2814:	a9 e0       	ldi	r26, 0x09	; 9
    2816:	b5 e4       	ldi	r27, 0x45	; 69
    2818:	80 83       	st	Z, r24
    281a:	91 83       	std	Z+1, r25	; 0x01
    281c:	a2 83       	std	Z+2, r26	; 0x02
    281e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2820:	8e 01       	movw	r16, r28
    2822:	05 5a       	subi	r16, 0xA5	; 165
    2824:	1f 4f       	sbci	r17, 0xFF	; 255
    2826:	fe 01       	movw	r30, r28
    2828:	e1 5a       	subi	r30, 0xA1	; 161
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	60 81       	ld	r22, Z
    282e:	71 81       	ldd	r23, Z+1	; 0x01
    2830:	82 81       	ldd	r24, Z+2	; 0x02
    2832:	93 81       	ldd	r25, Z+3	; 0x03
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	4a e7       	ldi	r20, 0x7A	; 122
    283a:	53 e4       	ldi	r21, 0x43	; 67
    283c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	f8 01       	movw	r30, r16
    2846:	80 83       	st	Z, r24
    2848:	91 83       	std	Z+1, r25	; 0x01
    284a:	a2 83       	std	Z+2, r26	; 0x02
    284c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    284e:	fe 01       	movw	r30, r28
    2850:	e5 5a       	subi	r30, 0xA5	; 165
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	60 81       	ld	r22, Z
    2856:	71 81       	ldd	r23, Z+1	; 0x01
    2858:	82 81       	ldd	r24, Z+2	; 0x02
    285a:	93 81       	ldd	r25, Z+3	; 0x03
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	40 e8       	ldi	r20, 0x80	; 128
    2862:	5f e3       	ldi	r21, 0x3F	; 63
    2864:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2868:	88 23       	and	r24, r24
    286a:	44 f4       	brge	.+16     	; 0x287c <newPassword+0xbf8>
		__ticks = 1;
    286c:	fe 01       	movw	r30, r28
    286e:	e7 5a       	subi	r30, 0xA7	; 167
    2870:	ff 4f       	sbci	r31, 0xFF	; 255
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	91 83       	std	Z+1, r25	; 0x01
    2878:	80 83       	st	Z, r24
    287a:	64 c0       	rjmp	.+200    	; 0x2944 <newPassword+0xcc0>
	else if (__tmp > 65535)
    287c:	fe 01       	movw	r30, r28
    287e:	e5 5a       	subi	r30, 0xA5	; 165
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	60 81       	ld	r22, Z
    2884:	71 81       	ldd	r23, Z+1	; 0x01
    2886:	82 81       	ldd	r24, Z+2	; 0x02
    2888:	93 81       	ldd	r25, Z+3	; 0x03
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	3f ef       	ldi	r19, 0xFF	; 255
    288e:	4f e7       	ldi	r20, 0x7F	; 127
    2890:	57 e4       	ldi	r21, 0x47	; 71
    2892:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2896:	18 16       	cp	r1, r24
    2898:	0c f0       	brlt	.+2      	; 0x289c <newPassword+0xc18>
    289a:	43 c0       	rjmp	.+134    	; 0x2922 <newPassword+0xc9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    289c:	fe 01       	movw	r30, r28
    289e:	e1 5a       	subi	r30, 0xA1	; 161
    28a0:	ff 4f       	sbci	r31, 0xFF	; 255
    28a2:	60 81       	ld	r22, Z
    28a4:	71 81       	ldd	r23, Z+1	; 0x01
    28a6:	82 81       	ldd	r24, Z+2	; 0x02
    28a8:	93 81       	ldd	r25, Z+3	; 0x03
    28aa:	20 e0       	ldi	r18, 0x00	; 0
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	40 e2       	ldi	r20, 0x20	; 32
    28b0:	51 e4       	ldi	r21, 0x41	; 65
    28b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	8e 01       	movw	r16, r28
    28bc:	07 5a       	subi	r16, 0xA7	; 167
    28be:	1f 4f       	sbci	r17, 0xFF	; 255
    28c0:	bc 01       	movw	r22, r24
    28c2:	cd 01       	movw	r24, r26
    28c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	f8 01       	movw	r30, r16
    28ce:	91 83       	std	Z+1, r25	; 0x01
    28d0:	80 83       	st	Z, r24
    28d2:	1f c0       	rjmp	.+62     	; 0x2912 <newPassword+0xc8e>
    28d4:	fe 01       	movw	r30, r28
    28d6:	e9 5a       	subi	r30, 0xA9	; 169
    28d8:	ff 4f       	sbci	r31, 0xFF	; 255
    28da:	89 e1       	ldi	r24, 0x19	; 25
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	91 83       	std	Z+1, r25	; 0x01
    28e0:	80 83       	st	Z, r24
    28e2:	fe 01       	movw	r30, r28
    28e4:	e9 5a       	subi	r30, 0xA9	; 169
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	80 81       	ld	r24, Z
    28ea:	91 81       	ldd	r25, Z+1	; 0x01
    28ec:	01 97       	sbiw	r24, 0x01	; 1
    28ee:	f1 f7       	brne	.-4      	; 0x28ec <newPassword+0xc68>
    28f0:	fe 01       	movw	r30, r28
    28f2:	e9 5a       	subi	r30, 0xA9	; 169
    28f4:	ff 4f       	sbci	r31, 0xFF	; 255
    28f6:	91 83       	std	Z+1, r25	; 0x01
    28f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28fa:	de 01       	movw	r26, r28
    28fc:	a7 5a       	subi	r26, 0xA7	; 167
    28fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2900:	fe 01       	movw	r30, r28
    2902:	e7 5a       	subi	r30, 0xA7	; 167
    2904:	ff 4f       	sbci	r31, 0xFF	; 255
    2906:	80 81       	ld	r24, Z
    2908:	91 81       	ldd	r25, Z+1	; 0x01
    290a:	01 97       	sbiw	r24, 0x01	; 1
    290c:	11 96       	adiw	r26, 0x01	; 1
    290e:	9c 93       	st	X, r25
    2910:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2912:	fe 01       	movw	r30, r28
    2914:	e7 5a       	subi	r30, 0xA7	; 167
    2916:	ff 4f       	sbci	r31, 0xFF	; 255
    2918:	80 81       	ld	r24, Z
    291a:	91 81       	ldd	r25, Z+1	; 0x01
    291c:	00 97       	sbiw	r24, 0x00	; 0
    291e:	d1 f6       	brne	.-76     	; 0x28d4 <newPassword+0xc50>
    2920:	28 c0       	rjmp	.+80     	; 0x2972 <newPassword+0xcee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2922:	8e 01       	movw	r16, r28
    2924:	07 5a       	subi	r16, 0xA7	; 167
    2926:	1f 4f       	sbci	r17, 0xFF	; 255
    2928:	fe 01       	movw	r30, r28
    292a:	e5 5a       	subi	r30, 0xA5	; 165
    292c:	ff 4f       	sbci	r31, 0xFF	; 255
    292e:	60 81       	ld	r22, Z
    2930:	71 81       	ldd	r23, Z+1	; 0x01
    2932:	82 81       	ldd	r24, Z+2	; 0x02
    2934:	93 81       	ldd	r25, Z+3	; 0x03
    2936:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	f8 01       	movw	r30, r16
    2940:	91 83       	std	Z+1, r25	; 0x01
    2942:	80 83       	st	Z, r24
    2944:	de 01       	movw	r26, r28
    2946:	ab 5a       	subi	r26, 0xAB	; 171
    2948:	bf 4f       	sbci	r27, 0xFF	; 255
    294a:	fe 01       	movw	r30, r28
    294c:	e7 5a       	subi	r30, 0xA7	; 167
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	80 81       	ld	r24, Z
    2952:	91 81       	ldd	r25, Z+1	; 0x01
    2954:	11 96       	adiw	r26, 0x01	; 1
    2956:	9c 93       	st	X, r25
    2958:	8e 93       	st	-X, r24
    295a:	fe 01       	movw	r30, r28
    295c:	eb 5a       	subi	r30, 0xAB	; 171
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	80 81       	ld	r24, Z
    2962:	91 81       	ldd	r25, Z+1	; 0x01
    2964:	01 97       	sbiw	r24, 0x01	; 1
    2966:	f1 f7       	brne	.-4      	; 0x2964 <newPassword+0xce0>
    2968:	fe 01       	movw	r30, r28
    296a:	eb 5a       	subi	r30, 0xAB	; 171
    296c:	ff 4f       	sbci	r31, 0xFF	; 255
    296e:	91 83       	std	Z+1, r25	; 0x01
    2970:	80 83       	st	Z, r24
						_delay_ms(PUTTON_TIME);
					//	LCD_displayChar((char) key);
						if (key <= 9)
    2972:	fe 01       	movw	r30, r28
    2974:	e4 53       	subi	r30, 0x34	; 52
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	80 81       	ld	r24, Z
    297a:	8a 30       	cpi	r24, 0x0A	; 10
    297c:	a8 f4       	brcc	.+42     	; 0x29a8 <newPassword+0xd24>
													repass[i] =  key + 48;
    297e:	fe 01       	movw	r30, r28
    2980:	e9 53       	subi	r30, 0x39	; 57
    2982:	ff 4f       	sbci	r31, 0xFF	; 255
    2984:	80 81       	ld	r24, Z
    2986:	28 2f       	mov	r18, r24
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	fe 01       	movw	r30, r28
    298c:	e8 53       	subi	r30, 0x38	; 56
    298e:	ff 4f       	sbci	r31, 0xFF	; 255
    2990:	80 81       	ld	r24, Z
    2992:	91 81       	ldd	r25, Z+1	; 0x01
    2994:	dc 01       	movw	r26, r24
    2996:	a2 0f       	add	r26, r18
    2998:	b3 1f       	adc	r27, r19
    299a:	fe 01       	movw	r30, r28
    299c:	e4 53       	subi	r30, 0x34	; 52
    299e:	ff 4f       	sbci	r31, 0xFF	; 255
    29a0:	80 81       	ld	r24, Z
    29a2:	80 5d       	subi	r24, 0xD0	; 208
    29a4:	8c 93       	st	X, r24
    29a6:	13 c0       	rjmp	.+38     	; 0x29ce <newPassword+0xd4a>
												else
													repass[i] = (char) key;
    29a8:	fe 01       	movw	r30, r28
    29aa:	e9 53       	subi	r30, 0x39	; 57
    29ac:	ff 4f       	sbci	r31, 0xFF	; 255
    29ae:	80 81       	ld	r24, Z
    29b0:	28 2f       	mov	r18, r24
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	fe 01       	movw	r30, r28
    29b6:	e8 53       	subi	r30, 0x38	; 56
    29b8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ba:	80 81       	ld	r24, Z
    29bc:	91 81       	ldd	r25, Z+1	; 0x01
    29be:	dc 01       	movw	r26, r24
    29c0:	a2 0f       	add	r26, r18
    29c2:	b3 1f       	adc	r27, r19
    29c4:	fe 01       	movw	r30, r28
    29c6:	e4 53       	subi	r30, 0x34	; 52
    29c8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ca:	80 81       	ld	r24, Z
    29cc:	8c 93       	st	X, r24
			if (key == 13) {

				LCD_clearScreen();
				LCD_displayStringRowColumn(0, 0, "Renter the Pass");
				_delay_ms(10000);
				for (i = 0; i < 5; i++) {
    29ce:	de 01       	movw	r26, r28
    29d0:	a9 53       	subi	r26, 0x39	; 57
    29d2:	bf 4f       	sbci	r27, 0xFF	; 255
    29d4:	fe 01       	movw	r30, r28
    29d6:	e9 53       	subi	r30, 0x39	; 57
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	80 81       	ld	r24, Z
    29dc:	8f 5f       	subi	r24, 0xFF	; 255
    29de:	8c 93       	st	X, r24
    29e0:	fe 01       	movw	r30, r28
    29e2:	e9 53       	subi	r30, 0x39	; 57
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	80 81       	ld	r24, Z
    29e8:	85 30       	cpi	r24, 0x05	; 5
    29ea:	08 f4       	brcc	.+2      	; 0x29ee <newPassword+0xd6a>
    29ec:	42 ce       	rjmp	.-892    	; 0x2672 <newPassword+0x9ee>
					}

				}
		//		LCD_displayStringRowColumn(1, 0, repass);
		//		_delay_ms(10000);
				if (i != 5) {
    29ee:	fe 01       	movw	r30, r28
    29f0:	e9 53       	subi	r30, 0x39	; 57
    29f2:	ff 4f       	sbci	r31, 0xFF	; 255
    29f4:	80 81       	ld	r24, Z
    29f6:	85 30       	cpi	r24, 0x05	; 5
    29f8:	09 f4       	brne	.+2      	; 0x29fc <newPassword+0xd78>
    29fa:	bc c0       	rjmp	.+376    	; 0x2b74 <newPassword+0xef0>
					LCD_displayStringRowColumn(1, 0, "pass must be 5 v");
    29fc:	21 ee       	ldi	r18, 0xE1	; 225
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	60 e0       	ldi	r22, 0x00	; 0
    2a04:	a9 01       	movw	r20, r18
    2a06:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_displayStringRowColumn>
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	ef 5a       	subi	r30, 0xAF	; 175
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	80 e0       	ldi	r24, 0x00	; 0
    2a12:	90 e4       	ldi	r25, 0x40	; 64
    2a14:	ac e1       	ldi	r26, 0x1C	; 28
    2a16:	b6 e4       	ldi	r27, 0x46	; 70
    2a18:	80 83       	st	Z, r24
    2a1a:	91 83       	std	Z+1, r25	; 0x01
    2a1c:	a2 83       	std	Z+2, r26	; 0x02
    2a1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a20:	8e 01       	movw	r16, r28
    2a22:	03 5b       	subi	r16, 0xB3	; 179
    2a24:	1f 4f       	sbci	r17, 0xFF	; 255
    2a26:	fe 01       	movw	r30, r28
    2a28:	ef 5a       	subi	r30, 0xAF	; 175
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	60 81       	ld	r22, Z
    2a2e:	71 81       	ldd	r23, Z+1	; 0x01
    2a30:	82 81       	ldd	r24, Z+2	; 0x02
    2a32:	93 81       	ldd	r25, Z+3	; 0x03
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	4a e7       	ldi	r20, 0x7A	; 122
    2a3a:	53 e4       	ldi	r21, 0x43	; 67
    2a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	f8 01       	movw	r30, r16
    2a46:	80 83       	st	Z, r24
    2a48:	91 83       	std	Z+1, r25	; 0x01
    2a4a:	a2 83       	std	Z+2, r26	; 0x02
    2a4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a4e:	fe 01       	movw	r30, r28
    2a50:	e3 5b       	subi	r30, 0xB3	; 179
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	60 81       	ld	r22, Z
    2a56:	71 81       	ldd	r23, Z+1	; 0x01
    2a58:	82 81       	ldd	r24, Z+2	; 0x02
    2a5a:	93 81       	ldd	r25, Z+3	; 0x03
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	40 e8       	ldi	r20, 0x80	; 128
    2a62:	5f e3       	ldi	r21, 0x3F	; 63
    2a64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a68:	88 23       	and	r24, r24
    2a6a:	44 f4       	brge	.+16     	; 0x2a7c <newPassword+0xdf8>
		__ticks = 1;
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	e5 5b       	subi	r30, 0xB5	; 181
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	91 83       	std	Z+1, r25	; 0x01
    2a78:	80 83       	st	Z, r24
    2a7a:	64 c0       	rjmp	.+200    	; 0x2b44 <newPassword+0xec0>
	else if (__tmp > 65535)
    2a7c:	fe 01       	movw	r30, r28
    2a7e:	e3 5b       	subi	r30, 0xB3	; 179
    2a80:	ff 4f       	sbci	r31, 0xFF	; 255
    2a82:	60 81       	ld	r22, Z
    2a84:	71 81       	ldd	r23, Z+1	; 0x01
    2a86:	82 81       	ldd	r24, Z+2	; 0x02
    2a88:	93 81       	ldd	r25, Z+3	; 0x03
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	3f ef       	ldi	r19, 0xFF	; 255
    2a8e:	4f e7       	ldi	r20, 0x7F	; 127
    2a90:	57 e4       	ldi	r21, 0x47	; 71
    2a92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a96:	18 16       	cp	r1, r24
    2a98:	0c f0       	brlt	.+2      	; 0x2a9c <newPassword+0xe18>
    2a9a:	43 c0       	rjmp	.+134    	; 0x2b22 <newPassword+0xe9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	ef 5a       	subi	r30, 0xAF	; 175
    2aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa2:	60 81       	ld	r22, Z
    2aa4:	71 81       	ldd	r23, Z+1	; 0x01
    2aa6:	82 81       	ldd	r24, Z+2	; 0x02
    2aa8:	93 81       	ldd	r25, Z+3	; 0x03
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	40 e2       	ldi	r20, 0x20	; 32
    2ab0:	51 e4       	ldi	r21, 0x41	; 65
    2ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	8e 01       	movw	r16, r28
    2abc:	05 5b       	subi	r16, 0xB5	; 181
    2abe:	1f 4f       	sbci	r17, 0xFF	; 255
    2ac0:	bc 01       	movw	r22, r24
    2ac2:	cd 01       	movw	r24, r26
    2ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	f8 01       	movw	r30, r16
    2ace:	91 83       	std	Z+1, r25	; 0x01
    2ad0:	80 83       	st	Z, r24
    2ad2:	1f c0       	rjmp	.+62     	; 0x2b12 <newPassword+0xe8e>
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	e7 5b       	subi	r30, 0xB7	; 183
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	89 e1       	ldi	r24, 0x19	; 25
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	91 83       	std	Z+1, r25	; 0x01
    2ae0:	80 83       	st	Z, r24
    2ae2:	fe 01       	movw	r30, r28
    2ae4:	e7 5b       	subi	r30, 0xB7	; 183
    2ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae8:	80 81       	ld	r24, Z
    2aea:	91 81       	ldd	r25, Z+1	; 0x01
    2aec:	01 97       	sbiw	r24, 0x01	; 1
    2aee:	f1 f7       	brne	.-4      	; 0x2aec <newPassword+0xe68>
    2af0:	fe 01       	movw	r30, r28
    2af2:	e7 5b       	subi	r30, 0xB7	; 183
    2af4:	ff 4f       	sbci	r31, 0xFF	; 255
    2af6:	91 83       	std	Z+1, r25	; 0x01
    2af8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2afa:	de 01       	movw	r26, r28
    2afc:	a5 5b       	subi	r26, 0xB5	; 181
    2afe:	bf 4f       	sbci	r27, 0xFF	; 255
    2b00:	fe 01       	movw	r30, r28
    2b02:	e5 5b       	subi	r30, 0xB5	; 181
    2b04:	ff 4f       	sbci	r31, 0xFF	; 255
    2b06:	80 81       	ld	r24, Z
    2b08:	91 81       	ldd	r25, Z+1	; 0x01
    2b0a:	01 97       	sbiw	r24, 0x01	; 1
    2b0c:	11 96       	adiw	r26, 0x01	; 1
    2b0e:	9c 93       	st	X, r25
    2b10:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b12:	fe 01       	movw	r30, r28
    2b14:	e5 5b       	subi	r30, 0xB5	; 181
    2b16:	ff 4f       	sbci	r31, 0xFF	; 255
    2b18:	80 81       	ld	r24, Z
    2b1a:	91 81       	ldd	r25, Z+1	; 0x01
    2b1c:	00 97       	sbiw	r24, 0x00	; 0
    2b1e:	d1 f6       	brne	.-76     	; 0x2ad4 <newPassword+0xe50>
    2b20:	91 c9       	rjmp	.-3294   	; 0x1e44 <newPassword+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b22:	8e 01       	movw	r16, r28
    2b24:	05 5b       	subi	r16, 0xB5	; 181
    2b26:	1f 4f       	sbci	r17, 0xFF	; 255
    2b28:	fe 01       	movw	r30, r28
    2b2a:	e3 5b       	subi	r30, 0xB3	; 179
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	60 81       	ld	r22, Z
    2b30:	71 81       	ldd	r23, Z+1	; 0x01
    2b32:	82 81       	ldd	r24, Z+2	; 0x02
    2b34:	93 81       	ldd	r25, Z+3	; 0x03
    2b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	f8 01       	movw	r30, r16
    2b40:	91 83       	std	Z+1, r25	; 0x01
    2b42:	80 83       	st	Z, r24
    2b44:	de 01       	movw	r26, r28
    2b46:	a9 5b       	subi	r26, 0xB9	; 185
    2b48:	bf 4f       	sbci	r27, 0xFF	; 255
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	e5 5b       	subi	r30, 0xB5	; 181
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	80 81       	ld	r24, Z
    2b52:	91 81       	ldd	r25, Z+1	; 0x01
    2b54:	11 96       	adiw	r26, 0x01	; 1
    2b56:	9c 93       	st	X, r25
    2b58:	8e 93       	st	-X, r24
    2b5a:	fe 01       	movw	r30, r28
    2b5c:	e9 5b       	subi	r30, 0xB9	; 185
    2b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b60:	80 81       	ld	r24, Z
    2b62:	91 81       	ldd	r25, Z+1	; 0x01
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	f1 f7       	brne	.-4      	; 0x2b64 <newPassword+0xee0>
    2b68:	fe 01       	movw	r30, r28
    2b6a:	e9 5b       	subi	r30, 0xB9	; 185
    2b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6e:	91 83       	std	Z+1, r25	; 0x01
    2b70:	80 83       	st	Z, r24
    2b72:	68 c9       	rjmp	.-3376   	; 0x1e44 <newPassword+0x1c0>
					_delay_ms(10000);
					continue;
				} else {
					key = KEYPAD_getPressed();
    2b74:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressed>
    2b78:	fe 01       	movw	r30, r28
    2b7a:	e4 53       	subi	r30, 0x34	; 52
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	80 83       	st	Z, r24

					if (key == 13) {
    2b80:	fe 01       	movw	r30, r28
    2b82:	e4 53       	subi	r30, 0x34	; 52
    2b84:	ff 4f       	sbci	r31, 0xFF	; 255
    2b86:	80 81       	ld	r24, Z
    2b88:	8d 30       	cpi	r24, 0x0D	; 13
    2b8a:	09 f0       	breq	.+2      	; 0x2b8e <newPassword+0xf0a>
    2b8c:	92 c0       	rjmp	.+292    	; 0x2cb2 <newPassword+0x102e>
						ent = 1;
    2b8e:	fe 01       	movw	r30, r28
    2b90:	eb 53       	subi	r30, 0x3B	; 59
    2b92:	ff 4f       	sbci	r31, 0xFF	; 255
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	80 83       	st	Z, r24
    2b98:	fe 01       	movw	r30, r28
    2b9a:	ed 5b       	subi	r30, 0xBD	; 189
    2b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9e:	80 e0       	ldi	r24, 0x00	; 0
    2ba0:	90 e8       	ldi	r25, 0x80	; 128
    2ba2:	a9 e0       	ldi	r26, 0x09	; 9
    2ba4:	b5 e4       	ldi	r27, 0x45	; 69
    2ba6:	80 83       	st	Z, r24
    2ba8:	91 83       	std	Z+1, r25	; 0x01
    2baa:	a2 83       	std	Z+2, r26	; 0x02
    2bac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bae:	8e 01       	movw	r16, r28
    2bb0:	01 5c       	subi	r16, 0xC1	; 193
    2bb2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	ed 5b       	subi	r30, 0xBD	; 189
    2bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bba:	60 81       	ld	r22, Z
    2bbc:	71 81       	ldd	r23, Z+1	; 0x01
    2bbe:	82 81       	ldd	r24, Z+2	; 0x02
    2bc0:	93 81       	ldd	r25, Z+3	; 0x03
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	4a e7       	ldi	r20, 0x7A	; 122
    2bc8:	53 e4       	ldi	r21, 0x43	; 67
    2bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	f8 01       	movw	r30, r16
    2bd4:	80 83       	st	Z, r24
    2bd6:	91 83       	std	Z+1, r25	; 0x01
    2bd8:	a2 83       	std	Z+2, r26	; 0x02
    2bda:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bdc:	fe 01       	movw	r30, r28
    2bde:	ff 96       	adiw	r30, 0x3f	; 63
    2be0:	60 81       	ld	r22, Z
    2be2:	71 81       	ldd	r23, Z+1	; 0x01
    2be4:	82 81       	ldd	r24, Z+2	; 0x02
    2be6:	93 81       	ldd	r25, Z+3	; 0x03
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	40 e8       	ldi	r20, 0x80	; 128
    2bee:	5f e3       	ldi	r21, 0x3F	; 63
    2bf0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bf4:	88 23       	and	r24, r24
    2bf6:	2c f4       	brge	.+10     	; 0x2c02 <newPassword+0xf7e>
		__ticks = 1;
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	9e af       	std	Y+62, r25	; 0x3e
    2bfe:	8d af       	std	Y+61, r24	; 0x3d
    2c00:	46 c0       	rjmp	.+140    	; 0x2c8e <newPassword+0x100a>
	else if (__tmp > 65535)
    2c02:	fe 01       	movw	r30, r28
    2c04:	ff 96       	adiw	r30, 0x3f	; 63
    2c06:	60 81       	ld	r22, Z
    2c08:	71 81       	ldd	r23, Z+1	; 0x01
    2c0a:	82 81       	ldd	r24, Z+2	; 0x02
    2c0c:	93 81       	ldd	r25, Z+3	; 0x03
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	3f ef       	ldi	r19, 0xFF	; 255
    2c12:	4f e7       	ldi	r20, 0x7F	; 127
    2c14:	57 e4       	ldi	r21, 0x47	; 71
    2c16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c1a:	18 16       	cp	r1, r24
    2c1c:	64 f5       	brge	.+88     	; 0x2c76 <newPassword+0xff2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c1e:	fe 01       	movw	r30, r28
    2c20:	ed 5b       	subi	r30, 0xBD	; 189
    2c22:	ff 4f       	sbci	r31, 0xFF	; 255
    2c24:	60 81       	ld	r22, Z
    2c26:	71 81       	ldd	r23, Z+1	; 0x01
    2c28:	82 81       	ldd	r24, Z+2	; 0x02
    2c2a:	93 81       	ldd	r25, Z+3	; 0x03
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	40 e2       	ldi	r20, 0x20	; 32
    2c32:	51 e4       	ldi	r21, 0x41	; 65
    2c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	bc 01       	movw	r22, r24
    2c3e:	cd 01       	movw	r24, r26
    2c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	9e af       	std	Y+62, r25	; 0x3e
    2c4a:	8d af       	std	Y+61, r24	; 0x3d
    2c4c:	0f c0       	rjmp	.+30     	; 0x2c6c <newPassword+0xfe8>
    2c4e:	89 e1       	ldi	r24, 0x19	; 25
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	9c af       	std	Y+60, r25	; 0x3c
    2c54:	8b af       	std	Y+59, r24	; 0x3b
    2c56:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c58:	9c ad       	ldd	r25, Y+60	; 0x3c
    2c5a:	01 97       	sbiw	r24, 0x01	; 1
    2c5c:	f1 f7       	brne	.-4      	; 0x2c5a <newPassword+0xfd6>
    2c5e:	9c af       	std	Y+60, r25	; 0x3c
    2c60:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c62:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c64:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	9e af       	std	Y+62, r25	; 0x3e
    2c6a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c6c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c6e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c70:	00 97       	sbiw	r24, 0x00	; 0
    2c72:	69 f7       	brne	.-38     	; 0x2c4e <newPassword+0xfca>
    2c74:	16 c0       	rjmp	.+44     	; 0x2ca2 <newPassword+0x101e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c76:	fe 01       	movw	r30, r28
    2c78:	ff 96       	adiw	r30, 0x3f	; 63
    2c7a:	60 81       	ld	r22, Z
    2c7c:	71 81       	ldd	r23, Z+1	; 0x01
    2c7e:	82 81       	ldd	r24, Z+2	; 0x02
    2c80:	93 81       	ldd	r25, Z+3	; 0x03
    2c82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	9e af       	std	Y+62, r25	; 0x3e
    2c8c:	8d af       	std	Y+61, r24	; 0x3d
    2c8e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c90:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c92:	9a af       	std	Y+58, r25	; 0x3a
    2c94:	89 af       	std	Y+57, r24	; 0x39
    2c96:	89 ad       	ldd	r24, Y+57	; 0x39
    2c98:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c9a:	01 97       	sbiw	r24, 0x01	; 1
    2c9c:	f1 f7       	brne	.-4      	; 0x2c9a <newPassword+0x1016>
    2c9e:	9a af       	std	Y+58, r25	; 0x3a
    2ca0:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(10000);
				continue;
			}
		}

		if (ent) {
    2ca2:	fe 01       	movw	r30, r28
    2ca4:	eb 53       	subi	r30, 0x3B	; 59
    2ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca8:	80 81       	ld	r24, Z
    2caa:	88 23       	and	r24, r24
    2cac:	09 f0       	breq	.+2      	; 0x2cb0 <newPassword+0x102c>
    2cae:	f7 c0       	rjmp	.+494    	; 0x2e9e <newPassword+0x121a>
    2cb0:	2e c1       	rjmp	.+604    	; 0x2f0e <newPassword+0x128a>

					if (key == 13) {
						ent = 1;
						_delay_ms(PUTTON_TIME);
					} else {
						LCD_displayStringRowColumn(1, 0, "pass must be 5 v");
    2cb2:	21 ee       	ldi	r18, 0xE1	; 225
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	60 e0       	ldi	r22, 0x00	; 0
    2cba:	a9 01       	movw	r20, r18
    2cbc:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_displayStringRowColumn>
    2cc0:	80 e0       	ldi	r24, 0x00	; 0
    2cc2:	90 e4       	ldi	r25, 0x40	; 64
    2cc4:	ac e1       	ldi	r26, 0x1C	; 28
    2cc6:	b6 e4       	ldi	r27, 0x46	; 70
    2cc8:	8d ab       	std	Y+53, r24	; 0x35
    2cca:	9e ab       	std	Y+54, r25	; 0x36
    2ccc:	af ab       	std	Y+55, r26	; 0x37
    2cce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd0:	6d a9       	ldd	r22, Y+53	; 0x35
    2cd2:	7e a9       	ldd	r23, Y+54	; 0x36
    2cd4:	8f a9       	ldd	r24, Y+55	; 0x37
    2cd6:	98 ad       	ldd	r25, Y+56	; 0x38
    2cd8:	20 e0       	ldi	r18, 0x00	; 0
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	4a e7       	ldi	r20, 0x7A	; 122
    2cde:	53 e4       	ldi	r21, 0x43	; 67
    2ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	89 ab       	std	Y+49, r24	; 0x31
    2cea:	9a ab       	std	Y+50, r25	; 0x32
    2cec:	ab ab       	std	Y+51, r26	; 0x33
    2cee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2cf0:	69 a9       	ldd	r22, Y+49	; 0x31
    2cf2:	7a a9       	ldd	r23, Y+50	; 0x32
    2cf4:	8b a9       	ldd	r24, Y+51	; 0x33
    2cf6:	9c a9       	ldd	r25, Y+52	; 0x34
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	40 e8       	ldi	r20, 0x80	; 128
    2cfe:	5f e3       	ldi	r21, 0x3F	; 63
    2d00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d04:	88 23       	and	r24, r24
    2d06:	2c f4       	brge	.+10     	; 0x2d12 <newPassword+0x108e>
		__ticks = 1;
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	98 ab       	std	Y+48, r25	; 0x30
    2d0e:	8f a7       	std	Y+47, r24	; 0x2f
    2d10:	3f c0       	rjmp	.+126    	; 0x2d90 <newPassword+0x110c>
	else if (__tmp > 65535)
    2d12:	69 a9       	ldd	r22, Y+49	; 0x31
    2d14:	7a a9       	ldd	r23, Y+50	; 0x32
    2d16:	8b a9       	ldd	r24, Y+51	; 0x33
    2d18:	9c a9       	ldd	r25, Y+52	; 0x34
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	3f ef       	ldi	r19, 0xFF	; 255
    2d1e:	4f e7       	ldi	r20, 0x7F	; 127
    2d20:	57 e4       	ldi	r21, 0x47	; 71
    2d22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d26:	18 16       	cp	r1, r24
    2d28:	4c f5       	brge	.+82     	; 0x2d7c <newPassword+0x10f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d2a:	6d a9       	ldd	r22, Y+53	; 0x35
    2d2c:	7e a9       	ldd	r23, Y+54	; 0x36
    2d2e:	8f a9       	ldd	r24, Y+55	; 0x37
    2d30:	98 ad       	ldd	r25, Y+56	; 0x38
    2d32:	20 e0       	ldi	r18, 0x00	; 0
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	40 e2       	ldi	r20, 0x20	; 32
    2d38:	51 e4       	ldi	r21, 0x41	; 65
    2d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	bc 01       	movw	r22, r24
    2d44:	cd 01       	movw	r24, r26
    2d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	98 ab       	std	Y+48, r25	; 0x30
    2d50:	8f a7       	std	Y+47, r24	; 0x2f
    2d52:	0f c0       	rjmp	.+30     	; 0x2d72 <newPassword+0x10ee>
    2d54:	89 e1       	ldi	r24, 0x19	; 25
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	9e a7       	std	Y+46, r25	; 0x2e
    2d5a:	8d a7       	std	Y+45, r24	; 0x2d
    2d5c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d5e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	f1 f7       	brne	.-4      	; 0x2d60 <newPassword+0x10dc>
    2d64:	9e a7       	std	Y+46, r25	; 0x2e
    2d66:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d68:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d6a:	98 a9       	ldd	r25, Y+48	; 0x30
    2d6c:	01 97       	sbiw	r24, 0x01	; 1
    2d6e:	98 ab       	std	Y+48, r25	; 0x30
    2d70:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d72:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d74:	98 a9       	ldd	r25, Y+48	; 0x30
    2d76:	00 97       	sbiw	r24, 0x00	; 0
    2d78:	69 f7       	brne	.-38     	; 0x2d54 <newPassword+0x10d0>
    2d7a:	64 c8       	rjmp	.-3896   	; 0x1e44 <newPassword+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d7c:	69 a9       	ldd	r22, Y+49	; 0x31
    2d7e:	7a a9       	ldd	r23, Y+50	; 0x32
    2d80:	8b a9       	ldd	r24, Y+51	; 0x33
    2d82:	9c a9       	ldd	r25, Y+52	; 0x34
    2d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	98 ab       	std	Y+48, r25	; 0x30
    2d8e:	8f a7       	std	Y+47, r24	; 0x2f
    2d90:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d92:	98 a9       	ldd	r25, Y+48	; 0x30
    2d94:	9c a7       	std	Y+44, r25	; 0x2c
    2d96:	8b a7       	std	Y+43, r24	; 0x2b
    2d98:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d9a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d9c:	01 97       	sbiw	r24, 0x01	; 1
    2d9e:	f1 f7       	brne	.-4      	; 0x2d9c <newPassword+0x1118>
    2da0:	9c a7       	std	Y+44, r25	; 0x2c
    2da2:	8b a7       	std	Y+43, r24	; 0x2b
    2da4:	4f c8       	rjmp	.-3938   	; 0x1e44 <newPassword+0x1c0>
						_delay_ms(10000);
						continue;
					}
				}
			} else {
				LCD_displayStringRowColumn(1, 0, "pass must be 5 v");
    2da6:	21 ee       	ldi	r18, 0xE1	; 225
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	60 e0       	ldi	r22, 0x00	; 0
    2dae:	a9 01       	movw	r20, r18
    2db0:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_displayStringRowColumn>
    2db4:	80 e0       	ldi	r24, 0x00	; 0
    2db6:	90 e4       	ldi	r25, 0x40	; 64
    2db8:	ac e1       	ldi	r26, 0x1C	; 28
    2dba:	b6 e4       	ldi	r27, 0x46	; 70
    2dbc:	8f a3       	std	Y+39, r24	; 0x27
    2dbe:	98 a7       	std	Y+40, r25	; 0x28
    2dc0:	a9 a7       	std	Y+41, r26	; 0x29
    2dc2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dc4:	6f a1       	ldd	r22, Y+39	; 0x27
    2dc6:	78 a5       	ldd	r23, Y+40	; 0x28
    2dc8:	89 a5       	ldd	r24, Y+41	; 0x29
    2dca:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dcc:	20 e0       	ldi	r18, 0x00	; 0
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	4a e7       	ldi	r20, 0x7A	; 122
    2dd2:	53 e4       	ldi	r21, 0x43	; 67
    2dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd8:	dc 01       	movw	r26, r24
    2dda:	cb 01       	movw	r24, r22
    2ddc:	8b a3       	std	Y+35, r24	; 0x23
    2dde:	9c a3       	std	Y+36, r25	; 0x24
    2de0:	ad a3       	std	Y+37, r26	; 0x25
    2de2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2de4:	6b a1       	ldd	r22, Y+35	; 0x23
    2de6:	7c a1       	ldd	r23, Y+36	; 0x24
    2de8:	8d a1       	ldd	r24, Y+37	; 0x25
    2dea:	9e a1       	ldd	r25, Y+38	; 0x26
    2dec:	20 e0       	ldi	r18, 0x00	; 0
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	40 e8       	ldi	r20, 0x80	; 128
    2df2:	5f e3       	ldi	r21, 0x3F	; 63
    2df4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2df8:	88 23       	and	r24, r24
    2dfa:	2c f4       	brge	.+10     	; 0x2e06 <newPassword+0x1182>
		__ticks = 1;
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	9a a3       	std	Y+34, r25	; 0x22
    2e02:	89 a3       	std	Y+33, r24	; 0x21
    2e04:	40 c0       	rjmp	.+128    	; 0x2e86 <newPassword+0x1202>
	else if (__tmp > 65535)
    2e06:	6b a1       	ldd	r22, Y+35	; 0x23
    2e08:	7c a1       	ldd	r23, Y+36	; 0x24
    2e0a:	8d a1       	ldd	r24, Y+37	; 0x25
    2e0c:	9e a1       	ldd	r25, Y+38	; 0x26
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	3f ef       	ldi	r19, 0xFF	; 255
    2e12:	4f e7       	ldi	r20, 0x7F	; 127
    2e14:	57 e4       	ldi	r21, 0x47	; 71
    2e16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e1a:	18 16       	cp	r1, r24
    2e1c:	54 f5       	brge	.+84     	; 0x2e72 <newPassword+0x11ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e1e:	6f a1       	ldd	r22, Y+39	; 0x27
    2e20:	78 a5       	ldd	r23, Y+40	; 0x28
    2e22:	89 a5       	ldd	r24, Y+41	; 0x29
    2e24:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	40 e2       	ldi	r20, 0x20	; 32
    2e2c:	51 e4       	ldi	r21, 0x41	; 65
    2e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e32:	dc 01       	movw	r26, r24
    2e34:	cb 01       	movw	r24, r22
    2e36:	bc 01       	movw	r22, r24
    2e38:	cd 01       	movw	r24, r26
    2e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3e:	dc 01       	movw	r26, r24
    2e40:	cb 01       	movw	r24, r22
    2e42:	9a a3       	std	Y+34, r25	; 0x22
    2e44:	89 a3       	std	Y+33, r24	; 0x21
    2e46:	0f c0       	rjmp	.+30     	; 0x2e66 <newPassword+0x11e2>
    2e48:	89 e1       	ldi	r24, 0x19	; 25
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	98 a3       	std	Y+32, r25	; 0x20
    2e4e:	8f 8f       	std	Y+31, r24	; 0x1f
    2e50:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e52:	98 a1       	ldd	r25, Y+32	; 0x20
    2e54:	01 97       	sbiw	r24, 0x01	; 1
    2e56:	f1 f7       	brne	.-4      	; 0x2e54 <newPassword+0x11d0>
    2e58:	98 a3       	std	Y+32, r25	; 0x20
    2e5a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e5c:	89 a1       	ldd	r24, Y+33	; 0x21
    2e5e:	9a a1       	ldd	r25, Y+34	; 0x22
    2e60:	01 97       	sbiw	r24, 0x01	; 1
    2e62:	9a a3       	std	Y+34, r25	; 0x22
    2e64:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e66:	89 a1       	ldd	r24, Y+33	; 0x21
    2e68:	9a a1       	ldd	r25, Y+34	; 0x22
    2e6a:	00 97       	sbiw	r24, 0x00	; 0
    2e6c:	69 f7       	brne	.-38     	; 0x2e48 <newPassword+0x11c4>
    2e6e:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <newPassword+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e72:	6b a1       	ldd	r22, Y+35	; 0x23
    2e74:	7c a1       	ldd	r23, Y+36	; 0x24
    2e76:	8d a1       	ldd	r24, Y+37	; 0x25
    2e78:	9e a1       	ldd	r25, Y+38	; 0x26
    2e7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	9a a3       	std	Y+34, r25	; 0x22
    2e84:	89 a3       	std	Y+33, r24	; 0x21
    2e86:	89 a1       	ldd	r24, Y+33	; 0x21
    2e88:	9a a1       	ldd	r25, Y+34	; 0x22
    2e8a:	9e 8f       	std	Y+30, r25	; 0x1e
    2e8c:	8d 8f       	std	Y+29, r24	; 0x1d
    2e8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e90:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e92:	01 97       	sbiw	r24, 0x01	; 1
    2e94:	f1 f7       	brne	.-4      	; 0x2e92 <newPassword+0x120e>
    2e96:	9e 8f       	std	Y+30, r25	; 0x1e
    2e98:	8d 8f       	std	Y+29, r24	; 0x1d
    2e9a:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <newPassword+0x1c0>
				continue;
			}
		}

		if (ent) {
			for (i = 0; i < 5; i++) {
    2e9e:	fe 01       	movw	r30, r28
    2ea0:	e9 53       	subi	r30, 0x39	; 57
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	10 82       	st	Z, r1
    2ea6:	2d c0       	rjmp	.+90     	; 0x2f02 <newPassword+0x127e>
				if (pass[i] != repass[i]) {
    2ea8:	fe 01       	movw	r30, r28
    2eaa:	e9 53       	subi	r30, 0x39	; 57
    2eac:	ff 4f       	sbci	r31, 0xFF	; 255
    2eae:	80 81       	ld	r24, Z
    2eb0:	28 2f       	mov	r18, r24
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	e6 53       	subi	r30, 0x36	; 54
    2eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eba:	80 81       	ld	r24, Z
    2ebc:	91 81       	ldd	r25, Z+1	; 0x01
    2ebe:	fc 01       	movw	r30, r24
    2ec0:	e2 0f       	add	r30, r18
    2ec2:	f3 1f       	adc	r31, r19
    2ec4:	40 81       	ld	r20, Z
    2ec6:	fe 01       	movw	r30, r28
    2ec8:	e9 53       	subi	r30, 0x39	; 57
    2eca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ecc:	80 81       	ld	r24, Z
    2ece:	28 2f       	mov	r18, r24
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	fe 01       	movw	r30, r28
    2ed4:	e8 53       	subi	r30, 0x38	; 56
    2ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed8:	80 81       	ld	r24, Z
    2eda:	91 81       	ldd	r25, Z+1	; 0x01
    2edc:	fc 01       	movw	r30, r24
    2ede:	e2 0f       	add	r30, r18
    2ee0:	f3 1f       	adc	r31, r19
    2ee2:	80 81       	ld	r24, Z
    2ee4:	48 17       	cp	r20, r24
    2ee6:	21 f0       	breq	.+8      	; 0x2ef0 <newPassword+0x126c>
					match = 0;
    2ee8:	fe 01       	movw	r30, r28
    2eea:	ea 53       	subi	r30, 0x3A	; 58
    2eec:	ff 4f       	sbci	r31, 0xFF	; 255
    2eee:	10 82       	st	Z, r1
				continue;
			}
		}

		if (ent) {
			for (i = 0; i < 5; i++) {
    2ef0:	de 01       	movw	r26, r28
    2ef2:	a9 53       	subi	r26, 0x39	; 57
    2ef4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ef6:	fe 01       	movw	r30, r28
    2ef8:	e9 53       	subi	r30, 0x39	; 57
    2efa:	ff 4f       	sbci	r31, 0xFF	; 255
    2efc:	80 81       	ld	r24, Z
    2efe:	8f 5f       	subi	r24, 0xFF	; 255
    2f00:	8c 93       	st	X, r24
    2f02:	fe 01       	movw	r30, r28
    2f04:	e9 53       	subi	r30, 0x39	; 57
    2f06:	ff 4f       	sbci	r31, 0xFF	; 255
    2f08:	80 81       	ld	r24, Z
    2f0a:	85 30       	cpi	r24, 0x05	; 5
    2f0c:	68 f2       	brcs	.-102    	; 0x2ea8 <newPassword+0x1224>
				}

			}
		}

		if (match == 0) {
    2f0e:	fe 01       	movw	r30, r28
    2f10:	ea 53       	subi	r30, 0x3A	; 58
    2f12:	ff 4f       	sbci	r31, 0xFF	; 255
    2f14:	80 81       	ld	r24, Z
    2f16:	88 23       	and	r24, r24
    2f18:	09 f0       	breq	.+2      	; 0x2f1c <newPassword+0x1298>
    2f1a:	7e c0       	rjmp	.+252    	; 0x3018 <newPassword+0x1394>
			LCD_clearScreen();
    2f1c:	0e 94 66 0b 	call	0x16cc	; 0x16cc <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "***unmatched***");
    2f20:	22 e0       	ldi	r18, 0x02	; 2
    2f22:	31 e0       	ldi	r19, 0x01	; 1
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	60 e0       	ldi	r22, 0x00	; 0
    2f28:	a9 01       	movw	r20, r18
    2f2a:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_displayStringRowColumn>
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
    2f30:	90 e5       	ldi	r25, 0x50	; 80
    2f32:	a3 e4       	ldi	r26, 0x43	; 67
    2f34:	b8 e4       	ldi	r27, 0x48	; 72
    2f36:	89 8f       	std	Y+25, r24	; 0x19
    2f38:	9a 8f       	std	Y+26, r25	; 0x1a
    2f3a:	ab 8f       	std	Y+27, r26	; 0x1b
    2f3c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f3e:	69 8d       	ldd	r22, Y+25	; 0x19
    2f40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	4a e7       	ldi	r20, 0x7A	; 122
    2f4c:	53 e4       	ldi	r21, 0x43	; 67
    2f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	8d 8b       	std	Y+21, r24	; 0x15
    2f58:	9e 8b       	std	Y+22, r25	; 0x16
    2f5a:	af 8b       	std	Y+23, r26	; 0x17
    2f5c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f5e:	6d 89       	ldd	r22, Y+21	; 0x15
    2f60:	7e 89       	ldd	r23, Y+22	; 0x16
    2f62:	8f 89       	ldd	r24, Y+23	; 0x17
    2f64:	98 8d       	ldd	r25, Y+24	; 0x18
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	40 e8       	ldi	r20, 0x80	; 128
    2f6c:	5f e3       	ldi	r21, 0x3F	; 63
    2f6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f72:	88 23       	and	r24, r24
    2f74:	2c f4       	brge	.+10     	; 0x2f80 <newPassword+0x12fc>
		__ticks = 1;
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	9c 8b       	std	Y+20, r25	; 0x14
    2f7c:	8b 8b       	std	Y+19, r24	; 0x13
    2f7e:	40 c0       	rjmp	.+128    	; 0x3000 <newPassword+0x137c>
	else if (__tmp > 65535)
    2f80:	6d 89       	ldd	r22, Y+21	; 0x15
    2f82:	7e 89       	ldd	r23, Y+22	; 0x16
    2f84:	8f 89       	ldd	r24, Y+23	; 0x17
    2f86:	98 8d       	ldd	r25, Y+24	; 0x18
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	3f ef       	ldi	r19, 0xFF	; 255
    2f8c:	4f e7       	ldi	r20, 0x7F	; 127
    2f8e:	57 e4       	ldi	r21, 0x47	; 71
    2f90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f94:	18 16       	cp	r1, r24
    2f96:	54 f5       	brge	.+84     	; 0x2fec <newPassword+0x1368>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f98:	69 8d       	ldd	r22, Y+25	; 0x19
    2f9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	40 e2       	ldi	r20, 0x20	; 32
    2fa6:	51 e4       	ldi	r21, 0x41	; 65
    2fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	bc 01       	movw	r22, r24
    2fb2:	cd 01       	movw	r24, r26
    2fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb8:	dc 01       	movw	r26, r24
    2fba:	cb 01       	movw	r24, r22
    2fbc:	9c 8b       	std	Y+20, r25	; 0x14
    2fbe:	8b 8b       	std	Y+19, r24	; 0x13
    2fc0:	0f c0       	rjmp	.+30     	; 0x2fe0 <newPassword+0x135c>
    2fc2:	89 e1       	ldi	r24, 0x19	; 25
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	9a 8b       	std	Y+18, r25	; 0x12
    2fc8:	89 8b       	std	Y+17, r24	; 0x11
    2fca:	89 89       	ldd	r24, Y+17	; 0x11
    2fcc:	9a 89       	ldd	r25, Y+18	; 0x12
    2fce:	01 97       	sbiw	r24, 0x01	; 1
    2fd0:	f1 f7       	brne	.-4      	; 0x2fce <newPassword+0x134a>
    2fd2:	9a 8b       	std	Y+18, r25	; 0x12
    2fd4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd6:	8b 89       	ldd	r24, Y+19	; 0x13
    2fd8:	9c 89       	ldd	r25, Y+20	; 0x14
    2fda:	01 97       	sbiw	r24, 0x01	; 1
    2fdc:	9c 8b       	std	Y+20, r25	; 0x14
    2fde:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe0:	8b 89       	ldd	r24, Y+19	; 0x13
    2fe2:	9c 89       	ldd	r25, Y+20	; 0x14
    2fe4:	00 97       	sbiw	r24, 0x00	; 0
    2fe6:	69 f7       	brne	.-38     	; 0x2fc2 <newPassword+0x133e>
    2fe8:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <newPassword+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fec:	6d 89       	ldd	r22, Y+21	; 0x15
    2fee:	7e 89       	ldd	r23, Y+22	; 0x16
    2ff0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ff2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff8:	dc 01       	movw	r26, r24
    2ffa:	cb 01       	movw	r24, r22
    2ffc:	9c 8b       	std	Y+20, r25	; 0x14
    2ffe:	8b 8b       	std	Y+19, r24	; 0x13
    3000:	8b 89       	ldd	r24, Y+19	; 0x13
    3002:	9c 89       	ldd	r25, Y+20	; 0x14
    3004:	98 8b       	std	Y+16, r25	; 0x10
    3006:	8f 87       	std	Y+15, r24	; 0x0f
    3008:	8f 85       	ldd	r24, Y+15	; 0x0f
    300a:	98 89       	ldd	r25, Y+16	; 0x10
    300c:	01 97       	sbiw	r24, 0x01	; 1
    300e:	f1 f7       	brne	.-4      	; 0x300c <newPassword+0x1388>
    3010:	98 8b       	std	Y+16, r25	; 0x10
    3012:	8f 87       	std	Y+15, r24	; 0x0f
    3014:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <newPassword+0x1c0>
			_delay_ms(200000);
			continue;
		} else {
			LCD_clearScreen();
    3018:	0e 94 66 0b 	call	0x16cc	; 0x16cc <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, " ***matched***");
    301c:	22 e1       	ldi	r18, 0x12	; 18
    301e:	31 e0       	ldi	r19, 0x01	; 1
    3020:	80 e0       	ldi	r24, 0x00	; 0
    3022:	60 e0       	ldi	r22, 0x00	; 0
    3024:	a9 01       	movw	r20, r18
    3026:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "saving..........");
    302a:	21 e2       	ldi	r18, 0x21	; 33
    302c:	31 e0       	ldi	r19, 0x01	; 1
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	60 e0       	ldi	r22, 0x00	; 0
    3032:	a9 01       	movw	r20, r18
    3034:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_displayStringRowColumn>
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	90 e5       	ldi	r25, 0x50	; 80
    303c:	a3 e4       	ldi	r26, 0x43	; 67
    303e:	b8 e4       	ldi	r27, 0x48	; 72
    3040:	8b 87       	std	Y+11, r24	; 0x0b
    3042:	9c 87       	std	Y+12, r25	; 0x0c
    3044:	ad 87       	std	Y+13, r26	; 0x0d
    3046:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3048:	6b 85       	ldd	r22, Y+11	; 0x0b
    304a:	7c 85       	ldd	r23, Y+12	; 0x0c
    304c:	8d 85       	ldd	r24, Y+13	; 0x0d
    304e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	4a e7       	ldi	r20, 0x7A	; 122
    3056:	53 e4       	ldi	r21, 0x43	; 67
    3058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	8f 83       	std	Y+7, r24	; 0x07
    3062:	98 87       	std	Y+8, r25	; 0x08
    3064:	a9 87       	std	Y+9, r26	; 0x09
    3066:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3068:	6f 81       	ldd	r22, Y+7	; 0x07
    306a:	78 85       	ldd	r23, Y+8	; 0x08
    306c:	89 85       	ldd	r24, Y+9	; 0x09
    306e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	40 e8       	ldi	r20, 0x80	; 128
    3076:	5f e3       	ldi	r21, 0x3F	; 63
    3078:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    307c:	88 23       	and	r24, r24
    307e:	2c f4       	brge	.+10     	; 0x308a <newPassword+0x1406>
		__ticks = 1;
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	9e 83       	std	Y+6, r25	; 0x06
    3086:	8d 83       	std	Y+5, r24	; 0x05
    3088:	3f c0       	rjmp	.+126    	; 0x3108 <newPassword+0x1484>
	else if (__tmp > 65535)
    308a:	6f 81       	ldd	r22, Y+7	; 0x07
    308c:	78 85       	ldd	r23, Y+8	; 0x08
    308e:	89 85       	ldd	r24, Y+9	; 0x09
    3090:	9a 85       	ldd	r25, Y+10	; 0x0a
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	3f ef       	ldi	r19, 0xFF	; 255
    3096:	4f e7       	ldi	r20, 0x7F	; 127
    3098:	57 e4       	ldi	r21, 0x47	; 71
    309a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    309e:	18 16       	cp	r1, r24
    30a0:	4c f5       	brge	.+82     	; 0x30f4 <newPassword+0x1470>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    30a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    30a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	40 e2       	ldi	r20, 0x20	; 32
    30b0:	51 e4       	ldi	r21, 0x41	; 65
    30b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	bc 01       	movw	r22, r24
    30bc:	cd 01       	movw	r24, r26
    30be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	9e 83       	std	Y+6, r25	; 0x06
    30c8:	8d 83       	std	Y+5, r24	; 0x05
    30ca:	0f c0       	rjmp	.+30     	; 0x30ea <newPassword+0x1466>
    30cc:	89 e1       	ldi	r24, 0x19	; 25
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	9c 83       	std	Y+4, r25	; 0x04
    30d2:	8b 83       	std	Y+3, r24	; 0x03
    30d4:	8b 81       	ldd	r24, Y+3	; 0x03
    30d6:	9c 81       	ldd	r25, Y+4	; 0x04
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	f1 f7       	brne	.-4      	; 0x30d8 <newPassword+0x1454>
    30dc:	9c 83       	std	Y+4, r25	; 0x04
    30de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e0:	8d 81       	ldd	r24, Y+5	; 0x05
    30e2:	9e 81       	ldd	r25, Y+6	; 0x06
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	9e 83       	std	Y+6, r25	; 0x06
    30e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ea:	8d 81       	ldd	r24, Y+5	; 0x05
    30ec:	9e 81       	ldd	r25, Y+6	; 0x06
    30ee:	00 97       	sbiw	r24, 0x00	; 0
    30f0:	69 f7       	brne	.-38     	; 0x30cc <newPassword+0x1448>
    30f2:	14 c0       	rjmp	.+40     	; 0x311c <newPassword+0x1498>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f4:	6f 81       	ldd	r22, Y+7	; 0x07
    30f6:	78 85       	ldd	r23, Y+8	; 0x08
    30f8:	89 85       	ldd	r24, Y+9	; 0x09
    30fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    30fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	9e 83       	std	Y+6, r25	; 0x06
    3106:	8d 83       	std	Y+5, r24	; 0x05
    3108:	8d 81       	ldd	r24, Y+5	; 0x05
    310a:	9e 81       	ldd	r25, Y+6	; 0x06
    310c:	9a 83       	std	Y+2, r25	; 0x02
    310e:	89 83       	std	Y+1, r24	; 0x01
    3110:	89 81       	ldd	r24, Y+1	; 0x01
    3112:	9a 81       	ldd	r25, Y+2	; 0x02
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	f1 f7       	brne	.-4      	; 0x3114 <newPassword+0x1490>
    3118:	9a 83       	std	Y+2, r25	; 0x02
    311a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(200000);
			for (i = 0; i < 5; i++) {
    311c:	fe 01       	movw	r30, r28
    311e:	e9 53       	subi	r30, 0x39	; 57
    3120:	ff 4f       	sbci	r31, 0xFF	; 255
    3122:	10 82       	st	Z, r1
    3124:	27 c0       	rjmp	.+78     	; 0x3174 <newPassword+0x14f0>
				password[i] = pass[i];
    3126:	fe 01       	movw	r30, r28
    3128:	e9 53       	subi	r30, 0x39	; 57
    312a:	ff 4f       	sbci	r31, 0xFF	; 255
    312c:	80 81       	ld	r24, Z
    312e:	28 2f       	mov	r18, r24
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	fe 01       	movw	r30, r28
    3134:	e3 53       	subi	r30, 0x33	; 51
    3136:	ff 4f       	sbci	r31, 0xFF	; 255
    3138:	80 81       	ld	r24, Z
    313a:	91 81       	ldd	r25, Z+1	; 0x01
    313c:	dc 01       	movw	r26, r24
    313e:	a2 0f       	add	r26, r18
    3140:	b3 1f       	adc	r27, r19
    3142:	fe 01       	movw	r30, r28
    3144:	e9 53       	subi	r30, 0x39	; 57
    3146:	ff 4f       	sbci	r31, 0xFF	; 255
    3148:	80 81       	ld	r24, Z
    314a:	28 2f       	mov	r18, r24
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	fe 01       	movw	r30, r28
    3150:	e6 53       	subi	r30, 0x36	; 54
    3152:	ff 4f       	sbci	r31, 0xFF	; 255
    3154:	80 81       	ld	r24, Z
    3156:	91 81       	ldd	r25, Z+1	; 0x01
    3158:	fc 01       	movw	r30, r24
    315a:	e2 0f       	add	r30, r18
    315c:	f3 1f       	adc	r31, r19
    315e:	80 81       	ld	r24, Z
    3160:	8c 93       	st	X, r24
		} else {
			LCD_clearScreen();
			LCD_displayStringRowColumn(0, 0, " ***matched***");
			LCD_displayStringRowColumn(1, 0, "saving..........");
			_delay_ms(200000);
			for (i = 0; i < 5; i++) {
    3162:	de 01       	movw	r26, r28
    3164:	a9 53       	subi	r26, 0x39	; 57
    3166:	bf 4f       	sbci	r27, 0xFF	; 255
    3168:	fe 01       	movw	r30, r28
    316a:	e9 53       	subi	r30, 0x39	; 57
    316c:	ff 4f       	sbci	r31, 0xFF	; 255
    316e:	80 81       	ld	r24, Z
    3170:	8f 5f       	subi	r24, 0xFF	; 255
    3172:	8c 93       	st	X, r24
    3174:	fe 01       	movw	r30, r28
    3176:	e9 53       	subi	r30, 0x39	; 57
    3178:	ff 4f       	sbci	r31, 0xFF	; 255
    317a:	80 81       	ld	r24, Z
    317c:	85 30       	cpi	r24, 0x05	; 5
    317e:	98 f2       	brcs	.-90     	; 0x3126 <newPassword+0x14a2>
				password[i] = pass[i];
			}
			return 1;
    3180:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
    3182:	c2 53       	subi	r28, 0x32	; 50
    3184:	df 4f       	sbci	r29, 0xFF	; 255
    3186:	0f b6       	in	r0, 0x3f	; 63
    3188:	f8 94       	cli
    318a:	de bf       	out	0x3e, r29	; 62
    318c:	0f be       	out	0x3f, r0	; 63
    318e:	cd bf       	out	0x3d, r28	; 61
    3190:	cf 91       	pop	r28
    3192:	df 91       	pop	r29
    3194:	1f 91       	pop	r17
    3196:	0f 91       	pop	r16
    3198:	08 95       	ret

0000319a <checkPassword>:


uint8 checkPassword(char *password) {
    319a:	df 93       	push	r29
    319c:	cf 93       	push	r28
    319e:	cd b7       	in	r28, 0x3d	; 61
    31a0:	de b7       	in	r29, 0x3e	; 62
    31a2:	c1 54       	subi	r28, 0x41	; 65
    31a4:	d0 40       	sbci	r29, 0x00	; 0
    31a6:	0f b6       	in	r0, 0x3f	; 63
    31a8:	f8 94       	cli
    31aa:	de bf       	out	0x3e, r29	; 62
    31ac:	0f be       	out	0x3f, r0	; 63
    31ae:	cd bf       	out	0x3d, r28	; 61
    31b0:	fe 01       	movw	r30, r28
    31b2:	ff 96       	adiw	r30, 0x3f	; 63
    31b4:	91 83       	std	Z+1, r25	; 0x01
    31b6:	80 83       	st	Z, r24

	//uint8 *password ="";
	uint8 key;
	char * pass ="#####";
    31b8:	84 ec       	ldi	r24, 0xC4	; 196
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	9d af       	std	Y+61, r25	; 0x3d
    31be:	8c af       	std	Y+60, r24	; 0x3c
//	uint8 *repass;
	uint8 i = 0;
    31c0:	1b ae       	std	Y+59, r1	; 0x3b
	uint8 match = 1;
    31c2:	81 e0       	ldi	r24, 0x01	; 1
    31c4:	8a af       	std	Y+58, r24	; 0x3a
	uint8 ent = 0;
    31c6:	19 ae       	std	Y+57, r1	; 0x39
    31c8:	80 e0       	ldi	r24, 0x00	; 0
    31ca:	90 e8       	ldi	r25, 0x80	; 128
    31cc:	a9 e0       	ldi	r26, 0x09	; 9
    31ce:	b5 e4       	ldi	r27, 0x45	; 69
    31d0:	8d ab       	std	Y+53, r24	; 0x35
    31d2:	9e ab       	std	Y+54, r25	; 0x36
    31d4:	af ab       	std	Y+55, r26	; 0x37
    31d6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31d8:	6d a9       	ldd	r22, Y+53	; 0x35
    31da:	7e a9       	ldd	r23, Y+54	; 0x36
    31dc:	8f a9       	ldd	r24, Y+55	; 0x37
    31de:	98 ad       	ldd	r25, Y+56	; 0x38
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	4a e7       	ldi	r20, 0x7A	; 122
    31e6:	53 e4       	ldi	r21, 0x43	; 67
    31e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	89 ab       	std	Y+49, r24	; 0x31
    31f2:	9a ab       	std	Y+50, r25	; 0x32
    31f4:	ab ab       	std	Y+51, r26	; 0x33
    31f6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    31f8:	69 a9       	ldd	r22, Y+49	; 0x31
    31fa:	7a a9       	ldd	r23, Y+50	; 0x32
    31fc:	8b a9       	ldd	r24, Y+51	; 0x33
    31fe:	9c a9       	ldd	r25, Y+52	; 0x34
    3200:	20 e0       	ldi	r18, 0x00	; 0
    3202:	30 e0       	ldi	r19, 0x00	; 0
    3204:	40 e8       	ldi	r20, 0x80	; 128
    3206:	5f e3       	ldi	r21, 0x3F	; 63
    3208:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    320c:	88 23       	and	r24, r24
    320e:	2c f4       	brge	.+10     	; 0x321a <checkPassword+0x80>
		__ticks = 1;
    3210:	81 e0       	ldi	r24, 0x01	; 1
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	98 ab       	std	Y+48, r25	; 0x30
    3216:	8f a7       	std	Y+47, r24	; 0x2f
    3218:	3f c0       	rjmp	.+126    	; 0x3298 <checkPassword+0xfe>
	else if (__tmp > 65535)
    321a:	69 a9       	ldd	r22, Y+49	; 0x31
    321c:	7a a9       	ldd	r23, Y+50	; 0x32
    321e:	8b a9       	ldd	r24, Y+51	; 0x33
    3220:	9c a9       	ldd	r25, Y+52	; 0x34
    3222:	20 e0       	ldi	r18, 0x00	; 0
    3224:	3f ef       	ldi	r19, 0xFF	; 255
    3226:	4f e7       	ldi	r20, 0x7F	; 127
    3228:	57 e4       	ldi	r21, 0x47	; 71
    322a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    322e:	18 16       	cp	r1, r24
    3230:	4c f5       	brge	.+82     	; 0x3284 <checkPassword+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3232:	6d a9       	ldd	r22, Y+53	; 0x35
    3234:	7e a9       	ldd	r23, Y+54	; 0x36
    3236:	8f a9       	ldd	r24, Y+55	; 0x37
    3238:	98 ad       	ldd	r25, Y+56	; 0x38
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	40 e2       	ldi	r20, 0x20	; 32
    3240:	51 e4       	ldi	r21, 0x41	; 65
    3242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3246:	dc 01       	movw	r26, r24
    3248:	cb 01       	movw	r24, r22
    324a:	bc 01       	movw	r22, r24
    324c:	cd 01       	movw	r24, r26
    324e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3252:	dc 01       	movw	r26, r24
    3254:	cb 01       	movw	r24, r22
    3256:	98 ab       	std	Y+48, r25	; 0x30
    3258:	8f a7       	std	Y+47, r24	; 0x2f
    325a:	0f c0       	rjmp	.+30     	; 0x327a <checkPassword+0xe0>
    325c:	89 e1       	ldi	r24, 0x19	; 25
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	9e a7       	std	Y+46, r25	; 0x2e
    3262:	8d a7       	std	Y+45, r24	; 0x2d
    3264:	8d a5       	ldd	r24, Y+45	; 0x2d
    3266:	9e a5       	ldd	r25, Y+46	; 0x2e
    3268:	01 97       	sbiw	r24, 0x01	; 1
    326a:	f1 f7       	brne	.-4      	; 0x3268 <checkPassword+0xce>
    326c:	9e a7       	std	Y+46, r25	; 0x2e
    326e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3270:	8f a5       	ldd	r24, Y+47	; 0x2f
    3272:	98 a9       	ldd	r25, Y+48	; 0x30
    3274:	01 97       	sbiw	r24, 0x01	; 1
    3276:	98 ab       	std	Y+48, r25	; 0x30
    3278:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    327a:	8f a5       	ldd	r24, Y+47	; 0x2f
    327c:	98 a9       	ldd	r25, Y+48	; 0x30
    327e:	00 97       	sbiw	r24, 0x00	; 0
    3280:	69 f7       	brne	.-38     	; 0x325c <checkPassword+0xc2>
    3282:	14 c0       	rjmp	.+40     	; 0x32ac <checkPassword+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3284:	69 a9       	ldd	r22, Y+49	; 0x31
    3286:	7a a9       	ldd	r23, Y+50	; 0x32
    3288:	8b a9       	ldd	r24, Y+51	; 0x33
    328a:	9c a9       	ldd	r25, Y+52	; 0x34
    328c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3290:	dc 01       	movw	r26, r24
    3292:	cb 01       	movw	r24, r22
    3294:	98 ab       	std	Y+48, r25	; 0x30
    3296:	8f a7       	std	Y+47, r24	; 0x2f
    3298:	8f a5       	ldd	r24, Y+47	; 0x2f
    329a:	98 a9       	ldd	r25, Y+48	; 0x30
    329c:	9c a7       	std	Y+44, r25	; 0x2c
    329e:	8b a7       	std	Y+43, r24	; 0x2b
    32a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    32a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    32a4:	01 97       	sbiw	r24, 0x01	; 1
    32a6:	f1 f7       	brne	.-4      	; 0x32a4 <checkPassword+0x10a>
    32a8:	9c a7       	std	Y+44, r25	; 0x2c
    32aa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(PUTTON_TIME);
	LCD_clearScreen();
    32ac:	0e 94 66 0b 	call	0x16cc	; 0x16cc <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Enter Your Pass");
    32b0:	22 e3       	ldi	r18, 0x32	; 50
    32b2:	31 e0       	ldi	r19, 0x01	; 1
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	60 e0       	ldi	r22, 0x00	; 0
    32b8:	a9 01       	movw	r20, r18
    32ba:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_displayStringRowColumn>
	for (i = 0; i < 5; i++) {
    32be:	1b ae       	std	Y+59, r1	; 0x3b
    32c0:	0f c1       	rjmp	.+542    	; 0x34e0 <checkPassword+0x346>
				key = KEYPAD_getPressed();
    32c2:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressed>
    32c6:	8e af       	std	Y+62, r24	; 0x3e
				if (key == 13) {
    32c8:	8e ad       	ldd	r24, Y+62	; 0x3e
    32ca:	8d 30       	cpi	r24, 0x0D	; 13
    32cc:	09 f0       	breq	.+2      	; 0x32d0 <checkPassword+0x136>
    32ce:	73 c0       	rjmp	.+230    	; 0x33b6 <checkPassword+0x21c>
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	90 e8       	ldi	r25, 0x80	; 128
    32d4:	a9 e0       	ldi	r26, 0x09	; 9
    32d6:	b5 e4       	ldi	r27, 0x45	; 69
    32d8:	8f a3       	std	Y+39, r24	; 0x27
    32da:	98 a7       	std	Y+40, r25	; 0x28
    32dc:	a9 a7       	std	Y+41, r26	; 0x29
    32de:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32e0:	6f a1       	ldd	r22, Y+39	; 0x27
    32e2:	78 a5       	ldd	r23, Y+40	; 0x28
    32e4:	89 a5       	ldd	r24, Y+41	; 0x29
    32e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    32e8:	20 e0       	ldi	r18, 0x00	; 0
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	4a e7       	ldi	r20, 0x7A	; 122
    32ee:	53 e4       	ldi	r21, 0x43	; 67
    32f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f4:	dc 01       	movw	r26, r24
    32f6:	cb 01       	movw	r24, r22
    32f8:	8b a3       	std	Y+35, r24	; 0x23
    32fa:	9c a3       	std	Y+36, r25	; 0x24
    32fc:	ad a3       	std	Y+37, r26	; 0x25
    32fe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3300:	6b a1       	ldd	r22, Y+35	; 0x23
    3302:	7c a1       	ldd	r23, Y+36	; 0x24
    3304:	8d a1       	ldd	r24, Y+37	; 0x25
    3306:	9e a1       	ldd	r25, Y+38	; 0x26
    3308:	20 e0       	ldi	r18, 0x00	; 0
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	40 e8       	ldi	r20, 0x80	; 128
    330e:	5f e3       	ldi	r21, 0x3F	; 63
    3310:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3314:	88 23       	and	r24, r24
    3316:	2c f4       	brge	.+10     	; 0x3322 <checkPassword+0x188>
		__ticks = 1;
    3318:	81 e0       	ldi	r24, 0x01	; 1
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	9a a3       	std	Y+34, r25	; 0x22
    331e:	89 a3       	std	Y+33, r24	; 0x21
    3320:	3f c0       	rjmp	.+126    	; 0x33a0 <checkPassword+0x206>
	else if (__tmp > 65535)
    3322:	6b a1       	ldd	r22, Y+35	; 0x23
    3324:	7c a1       	ldd	r23, Y+36	; 0x24
    3326:	8d a1       	ldd	r24, Y+37	; 0x25
    3328:	9e a1       	ldd	r25, Y+38	; 0x26
    332a:	20 e0       	ldi	r18, 0x00	; 0
    332c:	3f ef       	ldi	r19, 0xFF	; 255
    332e:	4f e7       	ldi	r20, 0x7F	; 127
    3330:	57 e4       	ldi	r21, 0x47	; 71
    3332:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3336:	18 16       	cp	r1, r24
    3338:	4c f5       	brge	.+82     	; 0x338c <checkPassword+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    333a:	6f a1       	ldd	r22, Y+39	; 0x27
    333c:	78 a5       	ldd	r23, Y+40	; 0x28
    333e:	89 a5       	ldd	r24, Y+41	; 0x29
    3340:	9a a5       	ldd	r25, Y+42	; 0x2a
    3342:	20 e0       	ldi	r18, 0x00	; 0
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	40 e2       	ldi	r20, 0x20	; 32
    3348:	51 e4       	ldi	r21, 0x41	; 65
    334a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    334e:	dc 01       	movw	r26, r24
    3350:	cb 01       	movw	r24, r22
    3352:	bc 01       	movw	r22, r24
    3354:	cd 01       	movw	r24, r26
    3356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335a:	dc 01       	movw	r26, r24
    335c:	cb 01       	movw	r24, r22
    335e:	9a a3       	std	Y+34, r25	; 0x22
    3360:	89 a3       	std	Y+33, r24	; 0x21
    3362:	0f c0       	rjmp	.+30     	; 0x3382 <checkPassword+0x1e8>
    3364:	89 e1       	ldi	r24, 0x19	; 25
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	98 a3       	std	Y+32, r25	; 0x20
    336a:	8f 8f       	std	Y+31, r24	; 0x1f
    336c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    336e:	98 a1       	ldd	r25, Y+32	; 0x20
    3370:	01 97       	sbiw	r24, 0x01	; 1
    3372:	f1 f7       	brne	.-4      	; 0x3370 <checkPassword+0x1d6>
    3374:	98 a3       	std	Y+32, r25	; 0x20
    3376:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3378:	89 a1       	ldd	r24, Y+33	; 0x21
    337a:	9a a1       	ldd	r25, Y+34	; 0x22
    337c:	01 97       	sbiw	r24, 0x01	; 1
    337e:	9a a3       	std	Y+34, r25	; 0x22
    3380:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3382:	89 a1       	ldd	r24, Y+33	; 0x21
    3384:	9a a1       	ldd	r25, Y+34	; 0x22
    3386:	00 97       	sbiw	r24, 0x00	; 0
    3388:	69 f7       	brne	.-38     	; 0x3364 <checkPassword+0x1ca>
    338a:	ae c0       	rjmp	.+348    	; 0x34e8 <checkPassword+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    338c:	6b a1       	ldd	r22, Y+35	; 0x23
    338e:	7c a1       	ldd	r23, Y+36	; 0x24
    3390:	8d a1       	ldd	r24, Y+37	; 0x25
    3392:	9e a1       	ldd	r25, Y+38	; 0x26
    3394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3398:	dc 01       	movw	r26, r24
    339a:	cb 01       	movw	r24, r22
    339c:	9a a3       	std	Y+34, r25	; 0x22
    339e:	89 a3       	std	Y+33, r24	; 0x21
    33a0:	89 a1       	ldd	r24, Y+33	; 0x21
    33a2:	9a a1       	ldd	r25, Y+34	; 0x22
    33a4:	9e 8f       	std	Y+30, r25	; 0x1e
    33a6:	8d 8f       	std	Y+29, r24	; 0x1d
    33a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33ac:	01 97       	sbiw	r24, 0x01	; 1
    33ae:	f1 f7       	brne	.-4      	; 0x33ac <checkPassword+0x212>
    33b0:	9e 8f       	std	Y+30, r25	; 0x1e
    33b2:	8d 8f       	std	Y+29, r24	; 0x1d
    33b4:	99 c0       	rjmp	.+306    	; 0x34e8 <checkPassword+0x34e>
					_delay_ms(PUTTON_TIME);
					break;
				} else {
					LCD_displayStringRowColumn(1, i, "*");
    33b6:	2f ed       	ldi	r18, 0xDF	; 223
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	6b ad       	ldd	r22, Y+59	; 0x3b
    33be:	a9 01       	movw	r20, r18
    33c0:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_displayStringRowColumn>
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    33c6:	90 e8       	ldi	r25, 0x80	; 128
    33c8:	a9 e0       	ldi	r26, 0x09	; 9
    33ca:	b5 e4       	ldi	r27, 0x45	; 69
    33cc:	89 8f       	std	Y+25, r24	; 0x19
    33ce:	9a 8f       	std	Y+26, r25	; 0x1a
    33d0:	ab 8f       	std	Y+27, r26	; 0x1b
    33d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33d4:	69 8d       	ldd	r22, Y+25	; 0x19
    33d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	4a e7       	ldi	r20, 0x7A	; 122
    33e2:	53 e4       	ldi	r21, 0x43	; 67
    33e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	8d 8b       	std	Y+21, r24	; 0x15
    33ee:	9e 8b       	std	Y+22, r25	; 0x16
    33f0:	af 8b       	std	Y+23, r26	; 0x17
    33f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33f4:	6d 89       	ldd	r22, Y+21	; 0x15
    33f6:	7e 89       	ldd	r23, Y+22	; 0x16
    33f8:	8f 89       	ldd	r24, Y+23	; 0x17
    33fa:	98 8d       	ldd	r25, Y+24	; 0x18
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	40 e8       	ldi	r20, 0x80	; 128
    3402:	5f e3       	ldi	r21, 0x3F	; 63
    3404:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3408:	88 23       	and	r24, r24
    340a:	2c f4       	brge	.+10     	; 0x3416 <checkPassword+0x27c>
		__ticks = 1;
    340c:	81 e0       	ldi	r24, 0x01	; 1
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	9c 8b       	std	Y+20, r25	; 0x14
    3412:	8b 8b       	std	Y+19, r24	; 0x13
    3414:	3f c0       	rjmp	.+126    	; 0x3494 <checkPassword+0x2fa>
	else if (__tmp > 65535)
    3416:	6d 89       	ldd	r22, Y+21	; 0x15
    3418:	7e 89       	ldd	r23, Y+22	; 0x16
    341a:	8f 89       	ldd	r24, Y+23	; 0x17
    341c:	98 8d       	ldd	r25, Y+24	; 0x18
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	3f ef       	ldi	r19, 0xFF	; 255
    3422:	4f e7       	ldi	r20, 0x7F	; 127
    3424:	57 e4       	ldi	r21, 0x47	; 71
    3426:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    342a:	18 16       	cp	r1, r24
    342c:	4c f5       	brge	.+82     	; 0x3480 <checkPassword+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    342e:	69 8d       	ldd	r22, Y+25	; 0x19
    3430:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3432:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3434:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	40 e2       	ldi	r20, 0x20	; 32
    343c:	51 e4       	ldi	r21, 0x41	; 65
    343e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3442:	dc 01       	movw	r26, r24
    3444:	cb 01       	movw	r24, r22
    3446:	bc 01       	movw	r22, r24
    3448:	cd 01       	movw	r24, r26
    344a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	9c 8b       	std	Y+20, r25	; 0x14
    3454:	8b 8b       	std	Y+19, r24	; 0x13
    3456:	0f c0       	rjmp	.+30     	; 0x3476 <checkPassword+0x2dc>
    3458:	89 e1       	ldi	r24, 0x19	; 25
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	9a 8b       	std	Y+18, r25	; 0x12
    345e:	89 8b       	std	Y+17, r24	; 0x11
    3460:	89 89       	ldd	r24, Y+17	; 0x11
    3462:	9a 89       	ldd	r25, Y+18	; 0x12
    3464:	01 97       	sbiw	r24, 0x01	; 1
    3466:	f1 f7       	brne	.-4      	; 0x3464 <checkPassword+0x2ca>
    3468:	9a 8b       	std	Y+18, r25	; 0x12
    346a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    346c:	8b 89       	ldd	r24, Y+19	; 0x13
    346e:	9c 89       	ldd	r25, Y+20	; 0x14
    3470:	01 97       	sbiw	r24, 0x01	; 1
    3472:	9c 8b       	std	Y+20, r25	; 0x14
    3474:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3476:	8b 89       	ldd	r24, Y+19	; 0x13
    3478:	9c 89       	ldd	r25, Y+20	; 0x14
    347a:	00 97       	sbiw	r24, 0x00	; 0
    347c:	69 f7       	brne	.-38     	; 0x3458 <checkPassword+0x2be>
    347e:	14 c0       	rjmp	.+40     	; 0x34a8 <checkPassword+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3480:	6d 89       	ldd	r22, Y+21	; 0x15
    3482:	7e 89       	ldd	r23, Y+22	; 0x16
    3484:	8f 89       	ldd	r24, Y+23	; 0x17
    3486:	98 8d       	ldd	r25, Y+24	; 0x18
    3488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    348c:	dc 01       	movw	r26, r24
    348e:	cb 01       	movw	r24, r22
    3490:	9c 8b       	std	Y+20, r25	; 0x14
    3492:	8b 8b       	std	Y+19, r24	; 0x13
    3494:	8b 89       	ldd	r24, Y+19	; 0x13
    3496:	9c 89       	ldd	r25, Y+20	; 0x14
    3498:	98 8b       	std	Y+16, r25	; 0x10
    349a:	8f 87       	std	Y+15, r24	; 0x0f
    349c:	8f 85       	ldd	r24, Y+15	; 0x0f
    349e:	98 89       	ldd	r25, Y+16	; 0x10
    34a0:	01 97       	sbiw	r24, 0x01	; 1
    34a2:	f1 f7       	brne	.-4      	; 0x34a0 <checkPassword+0x306>
    34a4:	98 8b       	std	Y+16, r25	; 0x10
    34a6:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(PUTTON_TIME);
			//		LCD_displayChar((char) key);
					if ( key <= 9)
    34a8:	8e ad       	ldd	r24, Y+62	; 0x3e
    34aa:	8a 30       	cpi	r24, 0x0A	; 10
    34ac:	60 f4       	brcc	.+24     	; 0x34c6 <checkPassword+0x32c>
												pass[i] =  key + 48;
    34ae:	8b ad       	ldd	r24, Y+59	; 0x3b
    34b0:	28 2f       	mov	r18, r24
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	8c ad       	ldd	r24, Y+60	; 0x3c
    34b6:	9d ad       	ldd	r25, Y+61	; 0x3d
    34b8:	fc 01       	movw	r30, r24
    34ba:	e2 0f       	add	r30, r18
    34bc:	f3 1f       	adc	r31, r19
    34be:	8e ad       	ldd	r24, Y+62	; 0x3e
    34c0:	80 5d       	subi	r24, 0xD0	; 208
    34c2:	80 83       	st	Z, r24
    34c4:	0a c0       	rjmp	.+20     	; 0x34da <checkPassword+0x340>
											else
												pass[i] = (char) key;
    34c6:	8b ad       	ldd	r24, Y+59	; 0x3b
    34c8:	28 2f       	mov	r18, r24
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	8c ad       	ldd	r24, Y+60	; 0x3c
    34ce:	9d ad       	ldd	r25, Y+61	; 0x3d
    34d0:	fc 01       	movw	r30, r24
    34d2:	e2 0f       	add	r30, r18
    34d4:	f3 1f       	adc	r31, r19
    34d6:	8e ad       	ldd	r24, Y+62	; 0x3e
    34d8:	80 83       	st	Z, r24
	uint8 match = 1;
	uint8 ent = 0;
	_delay_ms(PUTTON_TIME);
	LCD_clearScreen();
	LCD_displayStringRowColumn(0, 0, "Enter Your Pass");
	for (i = 0; i < 5; i++) {
    34da:	8b ad       	ldd	r24, Y+59	; 0x3b
    34dc:	8f 5f       	subi	r24, 0xFF	; 255
    34de:	8b af       	std	Y+59, r24	; 0x3b
    34e0:	8b ad       	ldd	r24, Y+59	; 0x3b
    34e2:	85 30       	cpi	r24, 0x05	; 5
    34e4:	08 f4       	brcc	.+2      	; 0x34e8 <checkPassword+0x34e>
    34e6:	ed ce       	rjmp	.-550    	; 0x32c2 <checkPassword+0x128>
												pass[i] =  key + 48;
											else
												pass[i] = (char) key;
				}
			}
	if (i != 5) {
    34e8:	8b ad       	ldd	r24, Y+59	; 0x3b
    34ea:	85 30       	cpi	r24, 0x05	; 5
    34ec:	21 f0       	breq	.+8      	; 0x34f6 <checkPassword+0x35c>
		return 0;
    34ee:	22 96       	adiw	r28, 0x02	; 2
    34f0:	1f ae       	std	Y+63, r1	; 0x3f
    34f2:	22 97       	sbiw	r28, 0x02	; 2
    34f4:	98 c0       	rjmp	.+304    	; 0x3626 <checkPassword+0x48c>
	} else {
		key = KEYPAD_getPressed();
    34f6:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressed>
    34fa:	8e af       	std	Y+62, r24	; 0x3e
		if (key == 13) {
    34fc:	8e ad       	ldd	r24, Y+62	; 0x3e
    34fe:	8d 30       	cpi	r24, 0x0D	; 13
    3500:	09 f0       	breq	.+2      	; 0x3504 <checkPassword+0x36a>
    3502:	78 c0       	rjmp	.+240    	; 0x35f4 <checkPassword+0x45a>
    3504:	80 e0       	ldi	r24, 0x00	; 0
    3506:	90 e8       	ldi	r25, 0x80	; 128
    3508:	a9 e0       	ldi	r26, 0x09	; 9
    350a:	b5 e4       	ldi	r27, 0x45	; 69
    350c:	8b 87       	std	Y+11, r24	; 0x0b
    350e:	9c 87       	std	Y+12, r25	; 0x0c
    3510:	ad 87       	std	Y+13, r26	; 0x0d
    3512:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3514:	6b 85       	ldd	r22, Y+11	; 0x0b
    3516:	7c 85       	ldd	r23, Y+12	; 0x0c
    3518:	8d 85       	ldd	r24, Y+13	; 0x0d
    351a:	9e 85       	ldd	r25, Y+14	; 0x0e
    351c:	20 e0       	ldi	r18, 0x00	; 0
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	4a e7       	ldi	r20, 0x7A	; 122
    3522:	53 e4       	ldi	r21, 0x43	; 67
    3524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3528:	dc 01       	movw	r26, r24
    352a:	cb 01       	movw	r24, r22
    352c:	8f 83       	std	Y+7, r24	; 0x07
    352e:	98 87       	std	Y+8, r25	; 0x08
    3530:	a9 87       	std	Y+9, r26	; 0x09
    3532:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3534:	6f 81       	ldd	r22, Y+7	; 0x07
    3536:	78 85       	ldd	r23, Y+8	; 0x08
    3538:	89 85       	ldd	r24, Y+9	; 0x09
    353a:	9a 85       	ldd	r25, Y+10	; 0x0a
    353c:	20 e0       	ldi	r18, 0x00	; 0
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	40 e8       	ldi	r20, 0x80	; 128
    3542:	5f e3       	ldi	r21, 0x3F	; 63
    3544:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3548:	88 23       	and	r24, r24
    354a:	2c f4       	brge	.+10     	; 0x3556 <checkPassword+0x3bc>
		__ticks = 1;
    354c:	81 e0       	ldi	r24, 0x01	; 1
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	9e 83       	std	Y+6, r25	; 0x06
    3552:	8d 83       	std	Y+5, r24	; 0x05
    3554:	3f c0       	rjmp	.+126    	; 0x35d4 <checkPassword+0x43a>
	else if (__tmp > 65535)
    3556:	6f 81       	ldd	r22, Y+7	; 0x07
    3558:	78 85       	ldd	r23, Y+8	; 0x08
    355a:	89 85       	ldd	r24, Y+9	; 0x09
    355c:	9a 85       	ldd	r25, Y+10	; 0x0a
    355e:	20 e0       	ldi	r18, 0x00	; 0
    3560:	3f ef       	ldi	r19, 0xFF	; 255
    3562:	4f e7       	ldi	r20, 0x7F	; 127
    3564:	57 e4       	ldi	r21, 0x47	; 71
    3566:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    356a:	18 16       	cp	r1, r24
    356c:	4c f5       	brge	.+82     	; 0x35c0 <checkPassword+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    356e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3570:	7c 85       	ldd	r23, Y+12	; 0x0c
    3572:	8d 85       	ldd	r24, Y+13	; 0x0d
    3574:	9e 85       	ldd	r25, Y+14	; 0x0e
    3576:	20 e0       	ldi	r18, 0x00	; 0
    3578:	30 e0       	ldi	r19, 0x00	; 0
    357a:	40 e2       	ldi	r20, 0x20	; 32
    357c:	51 e4       	ldi	r21, 0x41	; 65
    357e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3582:	dc 01       	movw	r26, r24
    3584:	cb 01       	movw	r24, r22
    3586:	bc 01       	movw	r22, r24
    3588:	cd 01       	movw	r24, r26
    358a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    358e:	dc 01       	movw	r26, r24
    3590:	cb 01       	movw	r24, r22
    3592:	9e 83       	std	Y+6, r25	; 0x06
    3594:	8d 83       	std	Y+5, r24	; 0x05
    3596:	0f c0       	rjmp	.+30     	; 0x35b6 <checkPassword+0x41c>
    3598:	89 e1       	ldi	r24, 0x19	; 25
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	9c 83       	std	Y+4, r25	; 0x04
    359e:	8b 83       	std	Y+3, r24	; 0x03
    35a0:	8b 81       	ldd	r24, Y+3	; 0x03
    35a2:	9c 81       	ldd	r25, Y+4	; 0x04
    35a4:	01 97       	sbiw	r24, 0x01	; 1
    35a6:	f1 f7       	brne	.-4      	; 0x35a4 <checkPassword+0x40a>
    35a8:	9c 83       	std	Y+4, r25	; 0x04
    35aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ac:	8d 81       	ldd	r24, Y+5	; 0x05
    35ae:	9e 81       	ldd	r25, Y+6	; 0x06
    35b0:	01 97       	sbiw	r24, 0x01	; 1
    35b2:	9e 83       	std	Y+6, r25	; 0x06
    35b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35b6:	8d 81       	ldd	r24, Y+5	; 0x05
    35b8:	9e 81       	ldd	r25, Y+6	; 0x06
    35ba:	00 97       	sbiw	r24, 0x00	; 0
    35bc:	69 f7       	brne	.-38     	; 0x3598 <checkPassword+0x3fe>
    35be:	14 c0       	rjmp	.+40     	; 0x35e8 <checkPassword+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35c0:	6f 81       	ldd	r22, Y+7	; 0x07
    35c2:	78 85       	ldd	r23, Y+8	; 0x08
    35c4:	89 85       	ldd	r24, Y+9	; 0x09
    35c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35cc:	dc 01       	movw	r26, r24
    35ce:	cb 01       	movw	r24, r22
    35d0:	9e 83       	std	Y+6, r25	; 0x06
    35d2:	8d 83       	std	Y+5, r24	; 0x05
    35d4:	8d 81       	ldd	r24, Y+5	; 0x05
    35d6:	9e 81       	ldd	r25, Y+6	; 0x06
    35d8:	9a 83       	std	Y+2, r25	; 0x02
    35da:	89 83       	std	Y+1, r24	; 0x01
    35dc:	89 81       	ldd	r24, Y+1	; 0x01
    35de:	9a 81       	ldd	r25, Y+2	; 0x02
    35e0:	01 97       	sbiw	r24, 0x01	; 1
    35e2:	f1 f7       	brne	.-4      	; 0x35e0 <checkPassword+0x446>
    35e4:	9a 83       	std	Y+2, r25	; 0x02
    35e6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(PUTTON_TIME);
			ent = 1;
    35e8:	81 e0       	ldi	r24, 0x01	; 1
    35ea:	89 af       	std	Y+57, r24	; 0x39

		}else{
			return 0;
		}
	}
	if (ent) {
    35ec:	89 ad       	ldd	r24, Y+57	; 0x39
    35ee:	88 23       	and	r24, r24
    35f0:	29 f4       	brne	.+10     	; 0x35fc <checkPassword+0x462>
    35f2:	0e c0       	rjmp	.+28     	; 0x3610 <checkPassword+0x476>
		if (key == 13) {
			_delay_ms(PUTTON_TIME);
			ent = 1;

		}else{
			return 0;
    35f4:	22 96       	adiw	r28, 0x02	; 2
    35f6:	1f ae       	std	Y+63, r1	; 0x3f
    35f8:	22 97       	sbiw	r28, 0x02	; 2
    35fa:	15 c0       	rjmp	.+42     	; 0x3626 <checkPassword+0x48c>
		}
	}
	if (ent) {
			match = strcmp(pass,password);
    35fc:	8c ad       	ldd	r24, Y+60	; 0x3c
    35fe:	9d ad       	ldd	r25, Y+61	; 0x3d
    3600:	fe 01       	movw	r30, r28
    3602:	ff 96       	adiw	r30, 0x3f	; 63
    3604:	20 81       	ld	r18, Z
    3606:	31 81       	ldd	r19, Z+1	; 0x01
    3608:	b9 01       	movw	r22, r18
    360a:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <strcmp>
    360e:	8a af       	std	Y+58, r24	; 0x3a
}
	if (match)
    3610:	8a ad       	ldd	r24, Y+58	; 0x3a
    3612:	88 23       	and	r24, r24
    3614:	21 f0       	breq	.+8      	; 0x361e <checkPassword+0x484>
		return 0;
    3616:	22 96       	adiw	r28, 0x02	; 2
    3618:	1f ae       	std	Y+63, r1	; 0x3f
    361a:	22 97       	sbiw	r28, 0x02	; 2
    361c:	04 c0       	rjmp	.+8      	; 0x3626 <checkPassword+0x48c>
	else
		return 1;
    361e:	81 e0       	ldi	r24, 0x01	; 1
    3620:	22 96       	adiw	r28, 0x02	; 2
    3622:	8f af       	std	Y+63, r24	; 0x3f
    3624:	22 97       	sbiw	r28, 0x02	; 2
    3626:	22 96       	adiw	r28, 0x02	; 2
    3628:	8f ad       	ldd	r24, Y+63	; 0x3f
    362a:	22 97       	sbiw	r28, 0x02	; 2
}
    362c:	cf 5b       	subi	r28, 0xBF	; 191
    362e:	df 4f       	sbci	r29, 0xFF	; 255
    3630:	0f b6       	in	r0, 0x3f	; 63
    3632:	f8 94       	cli
    3634:	de bf       	out	0x3e, r29	; 62
    3636:	0f be       	out	0x3f, r0	; 63
    3638:	cd bf       	out	0x3d, r28	; 61
    363a:	cf 91       	pop	r28
    363c:	df 91       	pop	r29
    363e:	08 95       	ret

00003640 <TIMER0_init>:
#include "timer0.h"

static volatile void (*callBackfn)(void) = NULL_ptr;

void TIMER0_init(Timer0Config *conf) {
    3640:	df 93       	push	r29
    3642:	cf 93       	push	r28
    3644:	00 d0       	rcall	.+0      	; 0x3646 <TIMER0_init+0x6>
    3646:	cd b7       	in	r28, 0x3d	; 61
    3648:	de b7       	in	r29, 0x3e	; 62
    364a:	9a 83       	std	Y+2, r25	; 0x02
    364c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = conf->initialVal; //initial value
    364e:	a2 e5       	ldi	r26, 0x52	; 82
    3650:	b0 e0       	ldi	r27, 0x00	; 0
    3652:	e9 81       	ldd	r30, Y+1	; 0x01
    3654:	fa 81       	ldd	r31, Y+2	; 0x02
    3656:	81 81       	ldd	r24, Z+1	; 0x01
    3658:	8c 93       	st	X, r24

	if (conf->mode == normal)
    365a:	e9 81       	ldd	r30, Y+1	; 0x01
    365c:	fa 81       	ldd	r31, Y+2	; 0x02
    365e:	80 81       	ld	r24, Z
    3660:	88 23       	and	r24, r24
    3662:	41 f4       	brne	.+16     	; 0x3674 <TIMER0_init+0x34>
		TIMSK |= (1 << TOIE0); //enable intr
    3664:	a9 e5       	ldi	r26, 0x59	; 89
    3666:	b0 e0       	ldi	r27, 0x00	; 0
    3668:	e9 e5       	ldi	r30, 0x59	; 89
    366a:	f0 e0       	ldi	r31, 0x00	; 0
    366c:	80 81       	ld	r24, Z
    366e:	81 60       	ori	r24, 0x01	; 1
    3670:	8c 93       	st	X, r24
    3672:	07 c0       	rjmp	.+14     	; 0x3682 <TIMER0_init+0x42>
	else
		TIMSK |= (1 << OCIE0); //enable intr
    3674:	a9 e5       	ldi	r26, 0x59	; 89
    3676:	b0 e0       	ldi	r27, 0x00	; 0
    3678:	e9 e5       	ldi	r30, 0x59	; 89
    367a:	f0 e0       	ldi	r31, 0x00	; 0
    367c:	80 81       	ld	r24, Z
    367e:	82 60       	ori	r24, 0x02	; 2
    3680:	8c 93       	st	X, r24

	TCCR0 = 0;
    3682:	e3 e5       	ldi	r30, 0x53	; 83
    3684:	f0 e0       	ldi	r31, 0x00	; 0
    3686:	10 82       	st	Z, r1

	if ((conf->mode == normal) || (conf->mode == CTC))
    3688:	e9 81       	ldd	r30, Y+1	; 0x01
    368a:	fa 81       	ldd	r31, Y+2	; 0x02
    368c:	80 81       	ld	r24, Z
    368e:	88 23       	and	r24, r24
    3690:	29 f0       	breq	.+10     	; 0x369c <TIMER0_init+0x5c>
    3692:	e9 81       	ldd	r30, Y+1	; 0x01
    3694:	fa 81       	ldd	r31, Y+2	; 0x02
    3696:	80 81       	ld	r24, Z
    3698:	82 30       	cpi	r24, 0x02	; 2
    369a:	41 f4       	brne	.+16     	; 0x36ac <TIMER0_init+0x6c>
		TCCR0 |= (1 << FOC0); //non PWM
    369c:	a3 e5       	ldi	r26, 0x53	; 83
    369e:	b0 e0       	ldi	r27, 0x00	; 0
    36a0:	e3 e5       	ldi	r30, 0x53	; 83
    36a2:	f0 e0       	ldi	r31, 0x00	; 0
    36a4:	80 81       	ld	r24, Z
    36a6:	80 68       	ori	r24, 0x80	; 128
    36a8:	8c 93       	st	X, r24
    36aa:	07 c0       	rjmp	.+14     	; 0x36ba <TIMER0_init+0x7a>
	else
		TCCR0 &= ~(1 << FOC0); //PWM
    36ac:	a3 e5       	ldi	r26, 0x53	; 83
    36ae:	b0 e0       	ldi	r27, 0x00	; 0
    36b0:	e3 e5       	ldi	r30, 0x53	; 83
    36b2:	f0 e0       	ldi	r31, 0x00	; 0
    36b4:	80 81       	ld	r24, Z
    36b6:	8f 77       	andi	r24, 0x7F	; 127
    36b8:	8c 93       	st	X, r24

	TCCR0 = (TCCR0 & 0xF8) | conf->prescale; //prescaling = 0, 1 ,2,3,4,5 in first 3 bits
    36ba:	a3 e5       	ldi	r26, 0x53	; 83
    36bc:	b0 e0       	ldi	r27, 0x00	; 0
    36be:	e3 e5       	ldi	r30, 0x53	; 83
    36c0:	f0 e0       	ldi	r31, 0x00	; 0
    36c2:	80 81       	ld	r24, Z
    36c4:	98 2f       	mov	r25, r24
    36c6:	98 7f       	andi	r25, 0xF8	; 248
    36c8:	e9 81       	ldd	r30, Y+1	; 0x01
    36ca:	fa 81       	ldd	r31, Y+2	; 0x02
    36cc:	82 81       	ldd	r24, Z+2	; 0x02
    36ce:	89 2b       	or	r24, r25
    36d0:	8c 93       	st	X, r24

	/*define the mode of timer by chosing the 3rd bit (wgm01) and put the second bit on it*/
	TCCR0 = (TCCR0 & 0xF7) | ((conf->mode & 0x02) << WGM01);
    36d2:	a3 e5       	ldi	r26, 0x53	; 83
    36d4:	b0 e0       	ldi	r27, 0x00	; 0
    36d6:	e3 e5       	ldi	r30, 0x53	; 83
    36d8:	f0 e0       	ldi	r31, 0x00	; 0
    36da:	80 81       	ld	r24, Z
    36dc:	28 2f       	mov	r18, r24
    36de:	27 7f       	andi	r18, 0xF7	; 247
    36e0:	e9 81       	ldd	r30, Y+1	; 0x01
    36e2:	fa 81       	ldd	r31, Y+2	; 0x02
    36e4:	80 81       	ld	r24, Z
    36e6:	88 2f       	mov	r24, r24
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	82 70       	andi	r24, 0x02	; 2
    36ec:	90 70       	andi	r25, 0x00	; 0
    36ee:	88 0f       	add	r24, r24
    36f0:	99 1f       	adc	r25, r25
    36f2:	88 0f       	add	r24, r24
    36f4:	99 1f       	adc	r25, r25
    36f6:	88 0f       	add	r24, r24
    36f8:	99 1f       	adc	r25, r25
    36fa:	82 2b       	or	r24, r18
    36fc:	8c 93       	st	X, r24
	/*define the mode of timer by chosing the 6th bit (wgm00) and put the 1st bit on it*/
	TCCR0 = (TCCR0 & 0xBF) | ((conf->mode & 0x01) << WGM00);
    36fe:	a3 e5       	ldi	r26, 0x53	; 83
    3700:	b0 e0       	ldi	r27, 0x00	; 0
    3702:	e3 e5       	ldi	r30, 0x53	; 83
    3704:	f0 e0       	ldi	r31, 0x00	; 0
    3706:	80 81       	ld	r24, Z
    3708:	28 2f       	mov	r18, r24
    370a:	2f 7b       	andi	r18, 0xBF	; 191
    370c:	e9 81       	ldd	r30, Y+1	; 0x01
    370e:	fa 81       	ldd	r31, Y+2	; 0x02
    3710:	80 81       	ld	r24, Z
    3712:	88 2f       	mov	r24, r24
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	81 70       	andi	r24, 0x01	; 1
    3718:	90 70       	andi	r25, 0x00	; 0
    371a:	00 24       	eor	r0, r0
    371c:	96 95       	lsr	r25
    371e:	87 95       	ror	r24
    3720:	07 94       	ror	r0
    3722:	96 95       	lsr	r25
    3724:	87 95       	ror	r24
    3726:	07 94       	ror	r0
    3728:	98 2f       	mov	r25, r24
    372a:	80 2d       	mov	r24, r0
    372c:	82 2b       	or	r24, r18
    372e:	8c 93       	st	X, r24

	if (conf->mode == fastPWM) {
    3730:	e9 81       	ldd	r30, Y+1	; 0x01
    3732:	fa 81       	ldd	r31, Y+2	; 0x02
    3734:	80 81       	ld	r24, Z
    3736:	83 30       	cpi	r24, 0x03	; 3
    3738:	71 f4       	brne	.+28     	; 0x3756 <TIMER0_init+0x116>
		TCCR0 |= (1 << COM01); //non inverting mode
    373a:	a3 e5       	ldi	r26, 0x53	; 83
    373c:	b0 e0       	ldi	r27, 0x00	; 0
    373e:	e3 e5       	ldi	r30, 0x53	; 83
    3740:	f0 e0       	ldi	r31, 0x00	; 0
    3742:	80 81       	ld	r24, Z
    3744:	80 62       	ori	r24, 0x20	; 32
    3746:	8c 93       	st	X, r24
		DDRB = DDRB | (1 << PB3); // Configure PB3/OC0 Pin as output pin
    3748:	a7 e3       	ldi	r26, 0x37	; 55
    374a:	b0 e0       	ldi	r27, 0x00	; 0
    374c:	e7 e3       	ldi	r30, 0x37	; 55
    374e:	f0 e0       	ldi	r31, 0x00	; 0
    3750:	80 81       	ld	r24, Z
    3752:	88 60       	ori	r24, 0x08	; 8
    3754:	8c 93       	st	X, r24
	}
	/*putting the compare val*/
	if (conf->mode != normal)
    3756:	e9 81       	ldd	r30, Y+1	; 0x01
    3758:	fa 81       	ldd	r31, Y+2	; 0x02
    375a:	80 81       	ld	r24, Z
    375c:	88 23       	and	r24, r24
    375e:	41 f0       	breq	.+16     	; 0x3770 <TIMER0_init+0x130>
		OCR0 = conf->compareVal;
    3760:	ec e5       	ldi	r30, 0x5C	; 92
    3762:	f0 e0       	ldi	r31, 0x00	; 0
    3764:	a9 81       	ldd	r26, Y+1	; 0x01
    3766:	ba 81       	ldd	r27, Y+2	; 0x02
    3768:	13 96       	adiw	r26, 0x03	; 3
    376a:	8c 91       	ld	r24, X
    376c:	13 97       	sbiw	r26, 0x03	; 3
    376e:	80 83       	st	Z, r24
	 TCCR0 |= (1<<WGM00)|(1<<WGM01)|(1<<COM01);
	 OCR0=conf->compareVal; // compare value
	 DDRB |=(1<<3);
	 break;
	 }*/
}
    3770:	0f 90       	pop	r0
    3772:	0f 90       	pop	r0
    3774:	cf 91       	pop	r28
    3776:	df 91       	pop	r29
    3778:	08 95       	ret

0000377a <TIMER0_setCallBack>:

void TIMER0_setCallBack( void (*callBackFNParameter)(void)) {
    377a:	df 93       	push	r29
    377c:	cf 93       	push	r28
    377e:	00 d0       	rcall	.+0      	; 0x3780 <TIMER0_setCallBack+0x6>
    3780:	cd b7       	in	r28, 0x3d	; 61
    3782:	de b7       	in	r29, 0x3e	; 62
    3784:	9a 83       	std	Y+2, r25	; 0x02
    3786:	89 83       	std	Y+1, r24	; 0x01
	callBackfn = callBackFNParameter;
    3788:	89 81       	ldd	r24, Y+1	; 0x01
    378a:	9a 81       	ldd	r25, Y+2	; 0x02
    378c:	90 93 58 01 	sts	0x0158, r25
    3790:	80 93 57 01 	sts	0x0157, r24
}
    3794:	0f 90       	pop	r0
    3796:	0f 90       	pop	r0
    3798:	cf 91       	pop	r28
    379a:	df 91       	pop	r29
    379c:	08 95       	ret

0000379e <__vector_19>:
ISR(TIMER0_COMP_vect) {
    379e:	1f 92       	push	r1
    37a0:	0f 92       	push	r0
    37a2:	0f b6       	in	r0, 0x3f	; 63
    37a4:	0f 92       	push	r0
    37a6:	11 24       	eor	r1, r1
    37a8:	2f 93       	push	r18
    37aa:	3f 93       	push	r19
    37ac:	4f 93       	push	r20
    37ae:	5f 93       	push	r21
    37b0:	6f 93       	push	r22
    37b2:	7f 93       	push	r23
    37b4:	8f 93       	push	r24
    37b6:	9f 93       	push	r25
    37b8:	af 93       	push	r26
    37ba:	bf 93       	push	r27
    37bc:	ef 93       	push	r30
    37be:	ff 93       	push	r31
    37c0:	df 93       	push	r29
    37c2:	cf 93       	push	r28
    37c4:	cd b7       	in	r28, 0x3d	; 61
    37c6:	de b7       	in	r29, 0x3e	; 62
	if (callBackfn != NULL_ptr) {
    37c8:	80 91 57 01 	lds	r24, 0x0157
    37cc:	90 91 58 01 	lds	r25, 0x0158
    37d0:	00 97       	sbiw	r24, 0x00	; 0
    37d2:	29 f0       	breq	.+10     	; 0x37de <__vector_19+0x40>
		(*callBackfn)();
    37d4:	e0 91 57 01 	lds	r30, 0x0157
    37d8:	f0 91 58 01 	lds	r31, 0x0158
    37dc:	09 95       	icall
	}
}
    37de:	cf 91       	pop	r28
    37e0:	df 91       	pop	r29
    37e2:	ff 91       	pop	r31
    37e4:	ef 91       	pop	r30
    37e6:	bf 91       	pop	r27
    37e8:	af 91       	pop	r26
    37ea:	9f 91       	pop	r25
    37ec:	8f 91       	pop	r24
    37ee:	7f 91       	pop	r23
    37f0:	6f 91       	pop	r22
    37f2:	5f 91       	pop	r21
    37f4:	4f 91       	pop	r20
    37f6:	3f 91       	pop	r19
    37f8:	2f 91       	pop	r18
    37fa:	0f 90       	pop	r0
    37fc:	0f be       	out	0x3f, r0	; 63
    37fe:	0f 90       	pop	r0
    3800:	1f 90       	pop	r1
    3802:	18 95       	reti

00003804 <__vector_9>:
ISR(TIMER0_OVF_vect) {
    3804:	1f 92       	push	r1
    3806:	0f 92       	push	r0
    3808:	0f b6       	in	r0, 0x3f	; 63
    380a:	0f 92       	push	r0
    380c:	11 24       	eor	r1, r1
    380e:	2f 93       	push	r18
    3810:	3f 93       	push	r19
    3812:	4f 93       	push	r20
    3814:	5f 93       	push	r21
    3816:	6f 93       	push	r22
    3818:	7f 93       	push	r23
    381a:	8f 93       	push	r24
    381c:	9f 93       	push	r25
    381e:	af 93       	push	r26
    3820:	bf 93       	push	r27
    3822:	ef 93       	push	r30
    3824:	ff 93       	push	r31
    3826:	df 93       	push	r29
    3828:	cf 93       	push	r28
    382a:	cd b7       	in	r28, 0x3d	; 61
    382c:	de b7       	in	r29, 0x3e	; 62
	if (callBackfn != NULL_ptr)
    382e:	80 91 57 01 	lds	r24, 0x0157
    3832:	90 91 58 01 	lds	r25, 0x0158
    3836:	00 97       	sbiw	r24, 0x00	; 0
    3838:	29 f0       	breq	.+10     	; 0x3844 <__vector_9+0x40>
		(*callBackfn)();
    383a:	e0 91 57 01 	lds	r30, 0x0157
    383e:	f0 91 58 01 	lds	r31, 0x0158
    3842:	09 95       	icall
}
    3844:	cf 91       	pop	r28
    3846:	df 91       	pop	r29
    3848:	ff 91       	pop	r31
    384a:	ef 91       	pop	r30
    384c:	bf 91       	pop	r27
    384e:	af 91       	pop	r26
    3850:	9f 91       	pop	r25
    3852:	8f 91       	pop	r24
    3854:	7f 91       	pop	r23
    3856:	6f 91       	pop	r22
    3858:	5f 91       	pop	r21
    385a:	4f 91       	pop	r20
    385c:	3f 91       	pop	r19
    385e:	2f 91       	pop	r18
    3860:	0f 90       	pop	r0
    3862:	0f be       	out	0x3f, r0	; 63
    3864:	0f 90       	pop	r0
    3866:	1f 90       	pop	r1
    3868:	18 95       	reti

0000386a <TIMER0_deInit>:
void TIMER0_deInit(void) {
    386a:	df 93       	push	r29
    386c:	cf 93       	push	r28
    386e:	cd b7       	in	r28, 0x3d	; 61
    3870:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0;
    3872:	e2 e5       	ldi	r30, 0x52	; 82
    3874:	f0 e0       	ldi	r31, 0x00	; 0
    3876:	10 82       	st	Z, r1
	TCCR0 = 0;
    3878:	e3 e5       	ldi	r30, 0x53	; 83
    387a:	f0 e0       	ldi	r31, 0x00	; 0
    387c:	10 82       	st	Z, r1
	OCR0 = 0;
    387e:	ec e5       	ldi	r30, 0x5C	; 92
    3880:	f0 e0       	ldi	r31, 0x00	; 0
    3882:	10 82       	st	Z, r1
	TIMSK &= ~((1 << TOIE0) | (1 << OCIE0));
    3884:	a9 e5       	ldi	r26, 0x59	; 89
    3886:	b0 e0       	ldi	r27, 0x00	; 0
    3888:	e9 e5       	ldi	r30, 0x59	; 89
    388a:	f0 e0       	ldi	r31, 0x00	; 0
    388c:	80 81       	ld	r24, Z
    388e:	8c 7f       	andi	r24, 0xFC	; 252
    3890:	8c 93       	st	X, r24
}
    3892:	cf 91       	pop	r28
    3894:	df 91       	pop	r29
    3896:	08 95       	ret

00003898 <UART_init>:

/*
 NAME: INIT UART
 Description : initialization the UART
 */
void UART_init(const UartConfig *conf) {
    3898:	0f 93       	push	r16
    389a:	1f 93       	push	r17
    389c:	df 93       	push	r29
    389e:	cf 93       	push	r28
    38a0:	00 d0       	rcall	.+0      	; 0x38a2 <UART_init+0xa>
    38a2:	00 d0       	rcall	.+0      	; 0x38a4 <UART_init+0xc>
    38a4:	cd b7       	in	r28, 0x3d	; 61
    38a6:	de b7       	in	r29, 0x3e	; 62
    38a8:	9a 83       	std	Y+2, r25	; 0x02
    38aa:	89 83       	std	Y+1, r24	; 0x01

	UCSRA = (1 << U2X); //enable double trans
    38ac:	eb e2       	ldi	r30, 0x2B	; 43
    38ae:	f0 e0       	ldi	r31, 0x00	; 0
    38b0:	82 e0       	ldi	r24, 0x02	; 2
    38b2:	80 83       	st	Z, r24

	UCSRB = (1 << RXEN) | (1 << TXEN); //enable recive and send
    38b4:	ea e2       	ldi	r30, 0x2A	; 42
    38b6:	f0 e0       	ldi	r31, 0x00	; 0
    38b8:	88 e1       	ldi	r24, 0x18	; 24
    38ba:	80 83       	st	Z, r24
	switch (conf->noOfBits) {
    38bc:	e9 81       	ldd	r30, Y+1	; 0x01
    38be:	fa 81       	ldd	r31, Y+2	; 0x02
    38c0:	82 81       	ldd	r24, Z+2	; 0x02
    38c2:	28 2f       	mov	r18, r24
    38c4:	30 e0       	ldi	r19, 0x00	; 0
    38c6:	3c 83       	std	Y+4, r19	; 0x04
    38c8:	2b 83       	std	Y+3, r18	; 0x03
    38ca:	8b 81       	ldd	r24, Y+3	; 0x03
    38cc:	9c 81       	ldd	r25, Y+4	; 0x04
    38ce:	82 30       	cpi	r24, 0x02	; 2
    38d0:	91 05       	cpc	r25, r1
    38d2:	09 f4       	brne	.+2      	; 0x38d6 <UART_init+0x3e>
    38d4:	75 c0       	rjmp	.+234    	; 0x39c0 <UART_init+0x128>
    38d6:	eb 81       	ldd	r30, Y+3	; 0x03
    38d8:	fc 81       	ldd	r31, Y+4	; 0x04
    38da:	e3 30       	cpi	r30, 0x03	; 3
    38dc:	f1 05       	cpc	r31, r1
    38de:	5c f4       	brge	.+22     	; 0x38f6 <UART_init+0x5e>
    38e0:	2b 81       	ldd	r18, Y+3	; 0x03
    38e2:	3c 81       	ldd	r19, Y+4	; 0x04
    38e4:	21 15       	cp	r18, r1
    38e6:	31 05       	cpc	r19, r1
    38e8:	99 f0       	breq	.+38     	; 0x3910 <UART_init+0x78>
    38ea:	8b 81       	ldd	r24, Y+3	; 0x03
    38ec:	9c 81       	ldd	r25, Y+4	; 0x04
    38ee:	81 30       	cpi	r24, 0x01	; 1
    38f0:	91 05       	cpc	r25, r1
    38f2:	d1 f1       	breq	.+116    	; 0x3968 <UART_init+0xd0>
    38f4:	e8 c0       	rjmp	.+464    	; 0x3ac6 <UART_init+0x22e>
    38f6:	eb 81       	ldd	r30, Y+3	; 0x03
    38f8:	fc 81       	ldd	r31, Y+4	; 0x04
    38fa:	e3 30       	cpi	r30, 0x03	; 3
    38fc:	f1 05       	cpc	r31, r1
    38fe:	09 f4       	brne	.+2      	; 0x3902 <UART_init+0x6a>
    3900:	8b c0       	rjmp	.+278    	; 0x3a18 <UART_init+0x180>
    3902:	2b 81       	ldd	r18, Y+3	; 0x03
    3904:	3c 81       	ldd	r19, Y+4	; 0x04
    3906:	24 30       	cpi	r18, 0x04	; 4
    3908:	31 05       	cpc	r19, r1
    390a:	09 f4       	brne	.+2      	; 0x390e <UART_init+0x76>
    390c:	b1 c0       	rjmp	.+354    	; 0x3a70 <UART_init+0x1d8>
    390e:	db c0       	rjmp	.+438    	; 0x3ac6 <UART_init+0x22e>
	case fiveBits:
		if ((conf->parityType) == disableParity) {
    3910:	e9 81       	ldd	r30, Y+1	; 0x01
    3912:	fa 81       	ldd	r31, Y+2	; 0x02
    3914:	80 81       	ld	r24, Z
    3916:	88 23       	and	r24, r24
    3918:	21 f4       	brne	.+8      	; 0x3922 <UART_init+0x8a>
			UCSRC = 0;
    391a:	e0 e4       	ldi	r30, 0x40	; 64
    391c:	f0 e0       	ldi	r31, 0x00	; 0
    391e:	10 82       	st	Z, r1
    3920:	0e c0       	rjmp	.+28     	; 0x393e <UART_init+0xa6>
		} else if ((conf->parityType) == evenParity) {
    3922:	e9 81       	ldd	r30, Y+1	; 0x01
    3924:	fa 81       	ldd	r31, Y+2	; 0x02
    3926:	80 81       	ld	r24, Z
    3928:	82 30       	cpi	r24, 0x02	; 2
    392a:	29 f4       	brne	.+10     	; 0x3936 <UART_init+0x9e>
			UCSRC = (1 << UPM1);
    392c:	e0 e4       	ldi	r30, 0x40	; 64
    392e:	f0 e0       	ldi	r31, 0x00	; 0
    3930:	80 e2       	ldi	r24, 0x20	; 32
    3932:	80 83       	st	Z, r24
    3934:	04 c0       	rjmp	.+8      	; 0x393e <UART_init+0xa6>
		} else {
			UCSRC = (1 << UPM1) | (1 << UPM0);
    3936:	e0 e4       	ldi	r30, 0x40	; 64
    3938:	f0 e0       	ldi	r31, 0x00	; 0
    393a:	80 e3       	ldi	r24, 0x30	; 48
    393c:	80 83       	st	Z, r24
		}
		UCSRC |= (1 << URSEL) | ((conf->noOfStopBits) << USBS);
    393e:	a0 e4       	ldi	r26, 0x40	; 64
    3940:	b0 e0       	ldi	r27, 0x00	; 0
    3942:	e0 e4       	ldi	r30, 0x40	; 64
    3944:	f0 e0       	ldi	r31, 0x00	; 0
    3946:	80 81       	ld	r24, Z
    3948:	28 2f       	mov	r18, r24
    394a:	e9 81       	ldd	r30, Y+1	; 0x01
    394c:	fa 81       	ldd	r31, Y+2	; 0x02
    394e:	81 81       	ldd	r24, Z+1	; 0x01
    3950:	88 2f       	mov	r24, r24
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	88 0f       	add	r24, r24
    3956:	99 1f       	adc	r25, r25
    3958:	88 0f       	add	r24, r24
    395a:	99 1f       	adc	r25, r25
    395c:	88 0f       	add	r24, r24
    395e:	99 1f       	adc	r25, r25
    3960:	80 68       	ori	r24, 0x80	; 128
    3962:	82 2b       	or	r24, r18
    3964:	8c 93       	st	X, r24
    3966:	af c0       	rjmp	.+350    	; 0x3ac6 <UART_init+0x22e>
		break;
	case sexBits:
		if ((conf->parityType) == disableParity) {
    3968:	e9 81       	ldd	r30, Y+1	; 0x01
    396a:	fa 81       	ldd	r31, Y+2	; 0x02
    396c:	80 81       	ld	r24, Z
    396e:	88 23       	and	r24, r24
    3970:	21 f4       	brne	.+8      	; 0x397a <UART_init+0xe2>
			UCSRC = 0;
    3972:	e0 e4       	ldi	r30, 0x40	; 64
    3974:	f0 e0       	ldi	r31, 0x00	; 0
    3976:	10 82       	st	Z, r1
    3978:	0e c0       	rjmp	.+28     	; 0x3996 <UART_init+0xfe>
		} else if ((conf->parityType) == evenParity) {
    397a:	e9 81       	ldd	r30, Y+1	; 0x01
    397c:	fa 81       	ldd	r31, Y+2	; 0x02
    397e:	80 81       	ld	r24, Z
    3980:	82 30       	cpi	r24, 0x02	; 2
    3982:	29 f4       	brne	.+10     	; 0x398e <UART_init+0xf6>
			UCSRC = (1 << UPM1);
    3984:	e0 e4       	ldi	r30, 0x40	; 64
    3986:	f0 e0       	ldi	r31, 0x00	; 0
    3988:	80 e2       	ldi	r24, 0x20	; 32
    398a:	80 83       	st	Z, r24
    398c:	04 c0       	rjmp	.+8      	; 0x3996 <UART_init+0xfe>
		} else {
			UCSRC = (1 << UPM1) | (1 << UPM0);
    398e:	e0 e4       	ldi	r30, 0x40	; 64
    3990:	f0 e0       	ldi	r31, 0x00	; 0
    3992:	80 e3       	ldi	r24, 0x30	; 48
    3994:	80 83       	st	Z, r24
		}
		UCSRC |= (1 << URSEL) | ((conf->noOfStopBits) << USBS) | (1 << UCSZ0);
    3996:	a0 e4       	ldi	r26, 0x40	; 64
    3998:	b0 e0       	ldi	r27, 0x00	; 0
    399a:	e0 e4       	ldi	r30, 0x40	; 64
    399c:	f0 e0       	ldi	r31, 0x00	; 0
    399e:	80 81       	ld	r24, Z
    39a0:	28 2f       	mov	r18, r24
    39a2:	e9 81       	ldd	r30, Y+1	; 0x01
    39a4:	fa 81       	ldd	r31, Y+2	; 0x02
    39a6:	81 81       	ldd	r24, Z+1	; 0x01
    39a8:	88 2f       	mov	r24, r24
    39aa:	90 e0       	ldi	r25, 0x00	; 0
    39ac:	88 0f       	add	r24, r24
    39ae:	99 1f       	adc	r25, r25
    39b0:	88 0f       	add	r24, r24
    39b2:	99 1f       	adc	r25, r25
    39b4:	88 0f       	add	r24, r24
    39b6:	99 1f       	adc	r25, r25
    39b8:	82 68       	ori	r24, 0x82	; 130
    39ba:	82 2b       	or	r24, r18
    39bc:	8c 93       	st	X, r24
    39be:	83 c0       	rjmp	.+262    	; 0x3ac6 <UART_init+0x22e>
		break;
	case sevenBits:
		if ((conf->parityType) == disableParity) {
    39c0:	e9 81       	ldd	r30, Y+1	; 0x01
    39c2:	fa 81       	ldd	r31, Y+2	; 0x02
    39c4:	80 81       	ld	r24, Z
    39c6:	88 23       	and	r24, r24
    39c8:	21 f4       	brne	.+8      	; 0x39d2 <UART_init+0x13a>
			UCSRC = 0;
    39ca:	e0 e4       	ldi	r30, 0x40	; 64
    39cc:	f0 e0       	ldi	r31, 0x00	; 0
    39ce:	10 82       	st	Z, r1
    39d0:	0e c0       	rjmp	.+28     	; 0x39ee <UART_init+0x156>
		} else if ((conf->parityType) == evenParity) {
    39d2:	e9 81       	ldd	r30, Y+1	; 0x01
    39d4:	fa 81       	ldd	r31, Y+2	; 0x02
    39d6:	80 81       	ld	r24, Z
    39d8:	82 30       	cpi	r24, 0x02	; 2
    39da:	29 f4       	brne	.+10     	; 0x39e6 <UART_init+0x14e>
			UCSRC = (1 << UPM1);
    39dc:	e0 e4       	ldi	r30, 0x40	; 64
    39de:	f0 e0       	ldi	r31, 0x00	; 0
    39e0:	80 e2       	ldi	r24, 0x20	; 32
    39e2:	80 83       	st	Z, r24
    39e4:	04 c0       	rjmp	.+8      	; 0x39ee <UART_init+0x156>
		} else {
			UCSRC = (1 << UPM1) | (1 << UPM0);
    39e6:	e0 e4       	ldi	r30, 0x40	; 64
    39e8:	f0 e0       	ldi	r31, 0x00	; 0
    39ea:	80 e3       	ldi	r24, 0x30	; 48
    39ec:	80 83       	st	Z, r24
		}
		UCSRC |= (1 << URSEL) | ((conf->noOfStopBits) << USBS) | (1 << UCSZ1);
    39ee:	a0 e4       	ldi	r26, 0x40	; 64
    39f0:	b0 e0       	ldi	r27, 0x00	; 0
    39f2:	e0 e4       	ldi	r30, 0x40	; 64
    39f4:	f0 e0       	ldi	r31, 0x00	; 0
    39f6:	80 81       	ld	r24, Z
    39f8:	28 2f       	mov	r18, r24
    39fa:	e9 81       	ldd	r30, Y+1	; 0x01
    39fc:	fa 81       	ldd	r31, Y+2	; 0x02
    39fe:	81 81       	ldd	r24, Z+1	; 0x01
    3a00:	88 2f       	mov	r24, r24
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	88 0f       	add	r24, r24
    3a06:	99 1f       	adc	r25, r25
    3a08:	88 0f       	add	r24, r24
    3a0a:	99 1f       	adc	r25, r25
    3a0c:	88 0f       	add	r24, r24
    3a0e:	99 1f       	adc	r25, r25
    3a10:	84 68       	ori	r24, 0x84	; 132
    3a12:	82 2b       	or	r24, r18
    3a14:	8c 93       	st	X, r24
    3a16:	57 c0       	rjmp	.+174    	; 0x3ac6 <UART_init+0x22e>
		break;
	case eightBits:
		if ((conf->parityType) == disableParity) {
    3a18:	e9 81       	ldd	r30, Y+1	; 0x01
    3a1a:	fa 81       	ldd	r31, Y+2	; 0x02
    3a1c:	80 81       	ld	r24, Z
    3a1e:	88 23       	and	r24, r24
    3a20:	21 f4       	brne	.+8      	; 0x3a2a <UART_init+0x192>
			UCSRC = 0;
    3a22:	e0 e4       	ldi	r30, 0x40	; 64
    3a24:	f0 e0       	ldi	r31, 0x00	; 0
    3a26:	10 82       	st	Z, r1
    3a28:	0e c0       	rjmp	.+28     	; 0x3a46 <UART_init+0x1ae>
		} else if ((conf->parityType) == evenParity) {
    3a2a:	e9 81       	ldd	r30, Y+1	; 0x01
    3a2c:	fa 81       	ldd	r31, Y+2	; 0x02
    3a2e:	80 81       	ld	r24, Z
    3a30:	82 30       	cpi	r24, 0x02	; 2
    3a32:	29 f4       	brne	.+10     	; 0x3a3e <UART_init+0x1a6>
			UCSRC = (1 << UPM1);
    3a34:	e0 e4       	ldi	r30, 0x40	; 64
    3a36:	f0 e0       	ldi	r31, 0x00	; 0
    3a38:	80 e2       	ldi	r24, 0x20	; 32
    3a3a:	80 83       	st	Z, r24
    3a3c:	04 c0       	rjmp	.+8      	; 0x3a46 <UART_init+0x1ae>
		} else {
			UCSRC = (1 << UPM1) | (1 << UPM0);
    3a3e:	e0 e4       	ldi	r30, 0x40	; 64
    3a40:	f0 e0       	ldi	r31, 0x00	; 0
    3a42:	80 e3       	ldi	r24, 0x30	; 48
    3a44:	80 83       	st	Z, r24
		}
		UCSRC |= (1 << URSEL) | ((conf->noOfStopBits) << USBS) | (1 << UCSZ0)
    3a46:	a0 e4       	ldi	r26, 0x40	; 64
    3a48:	b0 e0       	ldi	r27, 0x00	; 0
    3a4a:	e0 e4       	ldi	r30, 0x40	; 64
    3a4c:	f0 e0       	ldi	r31, 0x00	; 0
    3a4e:	80 81       	ld	r24, Z
    3a50:	28 2f       	mov	r18, r24
    3a52:	e9 81       	ldd	r30, Y+1	; 0x01
    3a54:	fa 81       	ldd	r31, Y+2	; 0x02
    3a56:	81 81       	ldd	r24, Z+1	; 0x01
    3a58:	88 2f       	mov	r24, r24
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	88 0f       	add	r24, r24
    3a5e:	99 1f       	adc	r25, r25
    3a60:	88 0f       	add	r24, r24
    3a62:	99 1f       	adc	r25, r25
    3a64:	88 0f       	add	r24, r24
    3a66:	99 1f       	adc	r25, r25
    3a68:	86 68       	ori	r24, 0x86	; 134
    3a6a:	82 2b       	or	r24, r18
    3a6c:	8c 93       	st	X, r24
    3a6e:	2b c0       	rjmp	.+86     	; 0x3ac6 <UART_init+0x22e>
				| (1 << UCSZ1);
		break;
	case nineBits:
		if ((conf->parityType) == disableParity) {
    3a70:	e9 81       	ldd	r30, Y+1	; 0x01
    3a72:	fa 81       	ldd	r31, Y+2	; 0x02
    3a74:	80 81       	ld	r24, Z
    3a76:	88 23       	and	r24, r24
    3a78:	21 f4       	brne	.+8      	; 0x3a82 <UART_init+0x1ea>
			UCSRC = 0;
    3a7a:	e0 e4       	ldi	r30, 0x40	; 64
    3a7c:	f0 e0       	ldi	r31, 0x00	; 0
    3a7e:	10 82       	st	Z, r1
    3a80:	0e c0       	rjmp	.+28     	; 0x3a9e <UART_init+0x206>
		} else if ((conf->parityType) == evenParity) {
    3a82:	e9 81       	ldd	r30, Y+1	; 0x01
    3a84:	fa 81       	ldd	r31, Y+2	; 0x02
    3a86:	80 81       	ld	r24, Z
    3a88:	82 30       	cpi	r24, 0x02	; 2
    3a8a:	29 f4       	brne	.+10     	; 0x3a96 <UART_init+0x1fe>
			UCSRC = (1 << UPM1);
    3a8c:	e0 e4       	ldi	r30, 0x40	; 64
    3a8e:	f0 e0       	ldi	r31, 0x00	; 0
    3a90:	80 e2       	ldi	r24, 0x20	; 32
    3a92:	80 83       	st	Z, r24
    3a94:	04 c0       	rjmp	.+8      	; 0x3a9e <UART_init+0x206>
		} else {
			UCSRC = (1 << UPM1) | (1 << UPM0);
    3a96:	e0 e4       	ldi	r30, 0x40	; 64
    3a98:	f0 e0       	ldi	r31, 0x00	; 0
    3a9a:	80 e3       	ldi	r24, 0x30	; 48
    3a9c:	80 83       	st	Z, r24
		}
		UCSRC |= (1 << URSEL) | ((conf->noOfStopBits) << USBS) | (1 << UCSZ0)
    3a9e:	a0 e4       	ldi	r26, 0x40	; 64
    3aa0:	b0 e0       	ldi	r27, 0x00	; 0
    3aa2:	e0 e4       	ldi	r30, 0x40	; 64
    3aa4:	f0 e0       	ldi	r31, 0x00	; 0
    3aa6:	80 81       	ld	r24, Z
    3aa8:	28 2f       	mov	r18, r24
    3aaa:	e9 81       	ldd	r30, Y+1	; 0x01
    3aac:	fa 81       	ldd	r31, Y+2	; 0x02
    3aae:	81 81       	ldd	r24, Z+1	; 0x01
    3ab0:	88 2f       	mov	r24, r24
    3ab2:	90 e0       	ldi	r25, 0x00	; 0
    3ab4:	88 0f       	add	r24, r24
    3ab6:	99 1f       	adc	r25, r25
    3ab8:	88 0f       	add	r24, r24
    3aba:	99 1f       	adc	r25, r25
    3abc:	88 0f       	add	r24, r24
    3abe:	99 1f       	adc	r25, r25
    3ac0:	86 68       	ori	r24, 0x86	; 134
    3ac2:	82 2b       	or	r24, r18
    3ac4:	8c 93       	st	X, r24

	default:
		break;

	}
	UBRRH = BAUD_PRESCALE(conf->baudRate) >> 8;
    3ac6:	00 e4       	ldi	r16, 0x40	; 64
    3ac8:	10 e0       	ldi	r17, 0x00	; 0
    3aca:	e9 81       	ldd	r30, Y+1	; 0x01
    3acc:	fa 81       	ldd	r31, Y+2	; 0x02
    3ace:	83 81       	ldd	r24, Z+3	; 0x03
    3ad0:	94 81       	ldd	r25, Z+4	; 0x04
    3ad2:	88 0f       	add	r24, r24
    3ad4:	99 1f       	adc	r25, r25
    3ad6:	88 0f       	add	r24, r24
    3ad8:	99 1f       	adc	r25, r25
    3ada:	88 0f       	add	r24, r24
    3adc:	99 1f       	adc	r25, r25
    3ade:	9c 01       	movw	r18, r24
    3ae0:	44 27       	eor	r20, r20
    3ae2:	37 fd       	sbrc	r19, 7
    3ae4:	40 95       	com	r20
    3ae6:	54 2f       	mov	r21, r20
    3ae8:	80 e0       	ldi	r24, 0x00	; 0
    3aea:	92 e1       	ldi	r25, 0x12	; 18
    3aec:	aa e7       	ldi	r26, 0x7A	; 122
    3aee:	b0 e0       	ldi	r27, 0x00	; 0
    3af0:	bc 01       	movw	r22, r24
    3af2:	cd 01       	movw	r24, r26
    3af4:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <__divmodsi4>
    3af8:	da 01       	movw	r26, r20
    3afa:	c9 01       	movw	r24, r18
    3afc:	01 97       	sbiw	r24, 0x01	; 1
    3afe:	a1 09       	sbc	r26, r1
    3b00:	b1 09       	sbc	r27, r1
    3b02:	89 2f       	mov	r24, r25
    3b04:	9a 2f       	mov	r25, r26
    3b06:	ab 2f       	mov	r26, r27
    3b08:	bb 27       	eor	r27, r27
    3b0a:	a7 fd       	sbrc	r26, 7
    3b0c:	ba 95       	dec	r27
    3b0e:	f8 01       	movw	r30, r16
    3b10:	80 83       	st	Z, r24
	UBRRL = BAUD_PRESCALE(conf->baudRate);
    3b12:	09 e2       	ldi	r16, 0x29	; 41
    3b14:	10 e0       	ldi	r17, 0x00	; 0
    3b16:	e9 81       	ldd	r30, Y+1	; 0x01
    3b18:	fa 81       	ldd	r31, Y+2	; 0x02
    3b1a:	83 81       	ldd	r24, Z+3	; 0x03
    3b1c:	94 81       	ldd	r25, Z+4	; 0x04
    3b1e:	88 0f       	add	r24, r24
    3b20:	99 1f       	adc	r25, r25
    3b22:	88 0f       	add	r24, r24
    3b24:	99 1f       	adc	r25, r25
    3b26:	88 0f       	add	r24, r24
    3b28:	99 1f       	adc	r25, r25
    3b2a:	9c 01       	movw	r18, r24
    3b2c:	44 27       	eor	r20, r20
    3b2e:	37 fd       	sbrc	r19, 7
    3b30:	40 95       	com	r20
    3b32:	54 2f       	mov	r21, r20
    3b34:	80 e0       	ldi	r24, 0x00	; 0
    3b36:	92 e1       	ldi	r25, 0x12	; 18
    3b38:	aa e7       	ldi	r26, 0x7A	; 122
    3b3a:	b0 e0       	ldi	r27, 0x00	; 0
    3b3c:	bc 01       	movw	r22, r24
    3b3e:	cd 01       	movw	r24, r26
    3b40:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <__divmodsi4>
    3b44:	da 01       	movw	r26, r20
    3b46:	c9 01       	movw	r24, r18
    3b48:	81 50       	subi	r24, 0x01	; 1
    3b4a:	f8 01       	movw	r30, r16
    3b4c:	80 83       	st	Z, r24

//	for( c=0;c<10;c++);
}
    3b4e:	0f 90       	pop	r0
    3b50:	0f 90       	pop	r0
    3b52:	0f 90       	pop	r0
    3b54:	0f 90       	pop	r0
    3b56:	cf 91       	pop	r28
    3b58:	df 91       	pop	r29
    3b5a:	1f 91       	pop	r17
    3b5c:	0f 91       	pop	r16
    3b5e:	08 95       	ret

00003b60 <UART_recieveChar>:
 * NAME: recive UART
 * Description : recieving byte from the UART
 * in : null
 * out : uint8_t // Byte
 **********************/
uint16 UART_recieveChar(const UartConfig * conf) {
    3b60:	df 93       	push	r29
    3b62:	cf 93       	push	r28
    3b64:	00 d0       	rcall	.+0      	; 0x3b66 <UART_recieveChar+0x6>
    3b66:	00 d0       	rcall	.+0      	; 0x3b68 <UART_recieveChar+0x8>
    3b68:	cd b7       	in	r28, 0x3d	; 61
    3b6a:	de b7       	in	r29, 0x3e	; 62
    3b6c:	9a 83       	std	Y+2, r25	; 0x02
    3b6e:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSRA & (1 << RXC))) {}
    3b70:	eb e2       	ldi	r30, 0x2B	; 43
    3b72:	f0 e0       	ldi	r31, 0x00	; 0
    3b74:	80 81       	ld	r24, Z
    3b76:	88 23       	and	r24, r24
    3b78:	dc f7       	brge	.-10     	; 0x3b70 <UART_recieveChar+0x10>
	if(conf->noOfBits==nineBits)
    3b7a:	e9 81       	ldd	r30, Y+1	; 0x01
    3b7c:	fa 81       	ldd	r31, Y+2	; 0x02
    3b7e:	82 81       	ldd	r24, Z+2	; 0x02
    3b80:	84 30       	cpi	r24, 0x04	; 4
    3b82:	91 f4       	brne	.+36     	; 0x3ba8 <UART_recieveChar+0x48>
	return (UCSRA&(1<<RXB8)<<8)|((uint8) UDR & (0xFF));
    3b84:	eb e2       	ldi	r30, 0x2B	; 43
    3b86:	f0 e0       	ldi	r31, 0x00	; 0
    3b88:	80 81       	ld	r24, Z
    3b8a:	88 2f       	mov	r24, r24
    3b8c:	90 e0       	ldi	r25, 0x00	; 0
    3b8e:	9c 01       	movw	r18, r24
    3b90:	20 70       	andi	r18, 0x00	; 0
    3b92:	32 70       	andi	r19, 0x02	; 2
    3b94:	ec e2       	ldi	r30, 0x2C	; 44
    3b96:	f0 e0       	ldi	r31, 0x00	; 0
    3b98:	80 81       	ld	r24, Z
    3b9a:	88 2f       	mov	r24, r24
    3b9c:	90 e0       	ldi	r25, 0x00	; 0
    3b9e:	82 2b       	or	r24, r18
    3ba0:	93 2b       	or	r25, r19
    3ba2:	9c 83       	std	Y+4, r25	; 0x04
    3ba4:	8b 83       	std	Y+3, r24	; 0x03
    3ba6:	07 c0       	rjmp	.+14     	; 0x3bb6 <UART_recieveChar+0x56>
	else
	return ((uint8) UDR & (0xFF));
    3ba8:	ec e2       	ldi	r30, 0x2C	; 44
    3baa:	f0 e0       	ldi	r31, 0x00	; 0
    3bac:	80 81       	ld	r24, Z
    3bae:	28 2f       	mov	r18, r24
    3bb0:	30 e0       	ldi	r19, 0x00	; 0
    3bb2:	3c 83       	std	Y+4, r19	; 0x04
    3bb4:	2b 83       	std	Y+3, r18	; 0x03
    3bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb8:	9c 81       	ldd	r25, Y+4	; 0x04
}
    3bba:	0f 90       	pop	r0
    3bbc:	0f 90       	pop	r0
    3bbe:	0f 90       	pop	r0
    3bc0:	0f 90       	pop	r0
    3bc2:	cf 91       	pop	r28
    3bc4:	df 91       	pop	r29
    3bc6:	08 95       	ret

00003bc8 <UART_sentChar>:
 * NAME: sent UART
 * Description : sent byte from the UART0
 * in : data // byte
 * out : 0
 *********************/
void UART_sentChar(const UartConfig *conf, uint16 data) {
    3bc8:	df 93       	push	r29
    3bca:	cf 93       	push	r28
    3bcc:	00 d0       	rcall	.+0      	; 0x3bce <UART_sentChar+0x6>
    3bce:	00 d0       	rcall	.+0      	; 0x3bd0 <UART_sentChar+0x8>
    3bd0:	cd b7       	in	r28, 0x3d	; 61
    3bd2:	de b7       	in	r29, 0x3e	; 62
    3bd4:	9a 83       	std	Y+2, r25	; 0x02
    3bd6:	89 83       	std	Y+1, r24	; 0x01
    3bd8:	7c 83       	std	Y+4, r23	; 0x04
    3bda:	6b 83       	std	Y+3, r22	; 0x03
	while (!(UCSRA & (1 << UDRE))) {}
    3bdc:	eb e2       	ldi	r30, 0x2B	; 43
    3bde:	f0 e0       	ldi	r31, 0x00	; 0
    3be0:	80 81       	ld	r24, Z
    3be2:	88 2f       	mov	r24, r24
    3be4:	90 e0       	ldi	r25, 0x00	; 0
    3be6:	80 72       	andi	r24, 0x20	; 32
    3be8:	90 70       	andi	r25, 0x00	; 0
    3bea:	00 97       	sbiw	r24, 0x00	; 0
    3bec:	b9 f3       	breq	.-18     	; 0x3bdc <UART_sentChar+0x14>
	if(conf->noOfBits==nineBits)
    3bee:	e9 81       	ldd	r30, Y+1	; 0x01
    3bf0:	fa 81       	ldd	r31, Y+2	; 0x02
    3bf2:	82 81       	ldd	r24, Z+2	; 0x02
    3bf4:	84 30       	cpi	r24, 0x04	; 4
    3bf6:	19 f4       	brne	.+6      	; 0x3bfe <UART_sentChar+0x36>
		UCSRA=(data&(1<<8))<<TXB8;
    3bf8:	eb e2       	ldi	r30, 0x2B	; 43
    3bfa:	f0 e0       	ldi	r31, 0x00	; 0
    3bfc:	10 82       	st	Z, r1
	UDR = data&0xFF;
    3bfe:	ec e2       	ldi	r30, 0x2C	; 44
    3c00:	f0 e0       	ldi	r31, 0x00	; 0
    3c02:	8b 81       	ldd	r24, Y+3	; 0x03
    3c04:	80 83       	st	Z, r24

}
    3c06:	0f 90       	pop	r0
    3c08:	0f 90       	pop	r0
    3c0a:	0f 90       	pop	r0
    3c0c:	0f 90       	pop	r0
    3c0e:	cf 91       	pop	r28
    3c10:	df 91       	pop	r29
    3c12:	08 95       	ret

00003c14 <UART_recieveString>:
void UART_recieveString(const UartConfig *conf, char *str, int lenght) {
    3c14:	df 93       	push	r29
    3c16:	cf 93       	push	r28
    3c18:	cd b7       	in	r28, 0x3d	; 61
    3c1a:	de b7       	in	r29, 0x3e	; 62
    3c1c:	28 97       	sbiw	r28, 0x08	; 8
    3c1e:	0f b6       	in	r0, 0x3f	; 63
    3c20:	f8 94       	cli
    3c22:	de bf       	out	0x3e, r29	; 62
    3c24:	0f be       	out	0x3f, r0	; 63
    3c26:	cd bf       	out	0x3d, r28	; 61
    3c28:	9c 83       	std	Y+4, r25	; 0x04
    3c2a:	8b 83       	std	Y+3, r24	; 0x03
    3c2c:	7e 83       	std	Y+6, r23	; 0x06
    3c2e:	6d 83       	std	Y+5, r22	; 0x05
    3c30:	58 87       	std	Y+8, r21	; 0x08
    3c32:	4f 83       	std	Y+7, r20	; 0x07
	if(conf->noOfBits != nineBits)
    3c34:	eb 81       	ldd	r30, Y+3	; 0x03
    3c36:	fc 81       	ldd	r31, Y+4	; 0x04
    3c38:	82 81       	ldd	r24, Z+2	; 0x02
    3c3a:	84 30       	cpi	r24, 0x04	; 4
    3c3c:	31 f1       	breq	.+76     	; 0x3c8a <UART_recieveString+0x76>
	{uint8 charac;
	uint8 i = 0;
    3c3e:	19 82       	std	Y+1, r1	; 0x01

	do {
		charac = UART_recieveChar(conf);
    3c40:	8b 81       	ldd	r24, Y+3	; 0x03
    3c42:	9c 81       	ldd	r25, Y+4	; 0x04
    3c44:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <UART_recieveChar>
    3c48:	8a 83       	std	Y+2, r24	; 0x02
		str[i] = charac&(0xFF);
    3c4a:	89 81       	ldd	r24, Y+1	; 0x01
    3c4c:	28 2f       	mov	r18, r24
    3c4e:	30 e0       	ldi	r19, 0x00	; 0
    3c50:	8d 81       	ldd	r24, Y+5	; 0x05
    3c52:	9e 81       	ldd	r25, Y+6	; 0x06
    3c54:	fc 01       	movw	r30, r24
    3c56:	e2 0f       	add	r30, r18
    3c58:	f3 1f       	adc	r31, r19
    3c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c5c:	80 83       	st	Z, r24
		i++;
    3c5e:	89 81       	ldd	r24, Y+1	; 0x01
    3c60:	8f 5f       	subi	r24, 0xFF	; 255
    3c62:	89 83       	std	Y+1, r24	; 0x01
		lenght--;
    3c64:	8f 81       	ldd	r24, Y+7	; 0x07
    3c66:	98 85       	ldd	r25, Y+8	; 0x08
    3c68:	01 97       	sbiw	r24, 0x01	; 1
    3c6a:	98 87       	std	Y+8, r25	; 0x08
    3c6c:	8f 83       	std	Y+7, r24	; 0x07
	} while (lenght != 0);
    3c6e:	8f 81       	ldd	r24, Y+7	; 0x07
    3c70:	98 85       	ldd	r25, Y+8	; 0x08
    3c72:	00 97       	sbiw	r24, 0x00	; 0
    3c74:	29 f7       	brne	.-54     	; 0x3c40 <UART_recieveString+0x2c>
	str[i] = '\0';
    3c76:	89 81       	ldd	r24, Y+1	; 0x01
    3c78:	28 2f       	mov	r18, r24
    3c7a:	30 e0       	ldi	r19, 0x00	; 0
    3c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c80:	fc 01       	movw	r30, r24
    3c82:	e2 0f       	add	r30, r18
    3c84:	f3 1f       	adc	r31, r19
    3c86:	10 82       	st	Z, r1
	i = 0;
    3c88:	19 82       	std	Y+1, r1	; 0x01
	}
}
    3c8a:	28 96       	adiw	r28, 0x08	; 8
    3c8c:	0f b6       	in	r0, 0x3f	; 63
    3c8e:	f8 94       	cli
    3c90:	de bf       	out	0x3e, r29	; 62
    3c92:	0f be       	out	0x3f, r0	; 63
    3c94:	cd bf       	out	0x3d, r28	; 61
    3c96:	cf 91       	pop	r28
    3c98:	df 91       	pop	r29
    3c9a:	08 95       	ret

00003c9c <UART_sentString>:
void UART_sentString(const UartConfig *conf, char *str) {
    3c9c:	df 93       	push	r29
    3c9e:	cf 93       	push	r28
    3ca0:	00 d0       	rcall	.+0      	; 0x3ca2 <UART_sentString+0x6>
    3ca2:	00 d0       	rcall	.+0      	; 0x3ca4 <UART_sentString+0x8>
    3ca4:	0f 92       	push	r0
    3ca6:	cd b7       	in	r28, 0x3d	; 61
    3ca8:	de b7       	in	r29, 0x3e	; 62
    3caa:	9b 83       	std	Y+3, r25	; 0x03
    3cac:	8a 83       	std	Y+2, r24	; 0x02
    3cae:	7d 83       	std	Y+5, r23	; 0x05
    3cb0:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i = 0;
    3cb2:	19 82       	std	Y+1, r1	; 0x01
    3cb4:	13 c0       	rjmp	.+38     	; 0x3cdc <UART_sentString+0x40>
	while (str[i] != '\0') {
		UART_sentChar(conf, str[i]);
    3cb6:	89 81       	ldd	r24, Y+1	; 0x01
    3cb8:	28 2f       	mov	r18, r24
    3cba:	30 e0       	ldi	r19, 0x00	; 0
    3cbc:	8c 81       	ldd	r24, Y+4	; 0x04
    3cbe:	9d 81       	ldd	r25, Y+5	; 0x05
    3cc0:	fc 01       	movw	r30, r24
    3cc2:	e2 0f       	add	r30, r18
    3cc4:	f3 1f       	adc	r31, r19
    3cc6:	80 81       	ld	r24, Z
    3cc8:	28 2f       	mov	r18, r24
    3cca:	30 e0       	ldi	r19, 0x00	; 0
    3ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    3cce:	9b 81       	ldd	r25, Y+3	; 0x03
    3cd0:	b9 01       	movw	r22, r18
    3cd2:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <UART_sentChar>
		i++;
    3cd6:	89 81       	ldd	r24, Y+1	; 0x01
    3cd8:	8f 5f       	subi	r24, 0xFF	; 255
    3cda:	89 83       	std	Y+1, r24	; 0x01
	i = 0;
	}
}
void UART_sentString(const UartConfig *conf, char *str) {
	uint8 i = 0;
	while (str[i] != '\0') {
    3cdc:	89 81       	ldd	r24, Y+1	; 0x01
    3cde:	28 2f       	mov	r18, r24
    3ce0:	30 e0       	ldi	r19, 0x00	; 0
    3ce2:	8c 81       	ldd	r24, Y+4	; 0x04
    3ce4:	9d 81       	ldd	r25, Y+5	; 0x05
    3ce6:	fc 01       	movw	r30, r24
    3ce8:	e2 0f       	add	r30, r18
    3cea:	f3 1f       	adc	r31, r19
    3cec:	80 81       	ld	r24, Z
    3cee:	88 23       	and	r24, r24
    3cf0:	11 f7       	brne	.-60     	; 0x3cb6 <UART_sentString+0x1a>
		UART_sentChar(conf, str[i]);
		i++;
	}
	i = 0;
    3cf2:	19 82       	std	Y+1, r1	; 0x01
}
    3cf4:	0f 90       	pop	r0
    3cf6:	0f 90       	pop	r0
    3cf8:	0f 90       	pop	r0
    3cfa:	0f 90       	pop	r0
    3cfc:	0f 90       	pop	r0
    3cfe:	cf 91       	pop	r28
    3d00:	df 91       	pop	r29
    3d02:	08 95       	ret

00003d04 <__divmodsi4>:
    3d04:	97 fb       	bst	r25, 7
    3d06:	09 2e       	mov	r0, r25
    3d08:	05 26       	eor	r0, r21
    3d0a:	0e d0       	rcall	.+28     	; 0x3d28 <__divmodsi4_neg1>
    3d0c:	57 fd       	sbrc	r21, 7
    3d0e:	04 d0       	rcall	.+8      	; 0x3d18 <__divmodsi4_neg2>
    3d10:	14 d0       	rcall	.+40     	; 0x3d3a <__udivmodsi4>
    3d12:	0a d0       	rcall	.+20     	; 0x3d28 <__divmodsi4_neg1>
    3d14:	00 1c       	adc	r0, r0
    3d16:	38 f4       	brcc	.+14     	; 0x3d26 <__divmodsi4_exit>

00003d18 <__divmodsi4_neg2>:
    3d18:	50 95       	com	r21
    3d1a:	40 95       	com	r20
    3d1c:	30 95       	com	r19
    3d1e:	21 95       	neg	r18
    3d20:	3f 4f       	sbci	r19, 0xFF	; 255
    3d22:	4f 4f       	sbci	r20, 0xFF	; 255
    3d24:	5f 4f       	sbci	r21, 0xFF	; 255

00003d26 <__divmodsi4_exit>:
    3d26:	08 95       	ret

00003d28 <__divmodsi4_neg1>:
    3d28:	f6 f7       	brtc	.-4      	; 0x3d26 <__divmodsi4_exit>
    3d2a:	90 95       	com	r25
    3d2c:	80 95       	com	r24
    3d2e:	70 95       	com	r23
    3d30:	61 95       	neg	r22
    3d32:	7f 4f       	sbci	r23, 0xFF	; 255
    3d34:	8f 4f       	sbci	r24, 0xFF	; 255
    3d36:	9f 4f       	sbci	r25, 0xFF	; 255
    3d38:	08 95       	ret

00003d3a <__udivmodsi4>:
    3d3a:	a1 e2       	ldi	r26, 0x21	; 33
    3d3c:	1a 2e       	mov	r1, r26
    3d3e:	aa 1b       	sub	r26, r26
    3d40:	bb 1b       	sub	r27, r27
    3d42:	fd 01       	movw	r30, r26
    3d44:	0d c0       	rjmp	.+26     	; 0x3d60 <__udivmodsi4_ep>

00003d46 <__udivmodsi4_loop>:
    3d46:	aa 1f       	adc	r26, r26
    3d48:	bb 1f       	adc	r27, r27
    3d4a:	ee 1f       	adc	r30, r30
    3d4c:	ff 1f       	adc	r31, r31
    3d4e:	a2 17       	cp	r26, r18
    3d50:	b3 07       	cpc	r27, r19
    3d52:	e4 07       	cpc	r30, r20
    3d54:	f5 07       	cpc	r31, r21
    3d56:	20 f0       	brcs	.+8      	; 0x3d60 <__udivmodsi4_ep>
    3d58:	a2 1b       	sub	r26, r18
    3d5a:	b3 0b       	sbc	r27, r19
    3d5c:	e4 0b       	sbc	r30, r20
    3d5e:	f5 0b       	sbc	r31, r21

00003d60 <__udivmodsi4_ep>:
    3d60:	66 1f       	adc	r22, r22
    3d62:	77 1f       	adc	r23, r23
    3d64:	88 1f       	adc	r24, r24
    3d66:	99 1f       	adc	r25, r25
    3d68:	1a 94       	dec	r1
    3d6a:	69 f7       	brne	.-38     	; 0x3d46 <__udivmodsi4_loop>
    3d6c:	60 95       	com	r22
    3d6e:	70 95       	com	r23
    3d70:	80 95       	com	r24
    3d72:	90 95       	com	r25
    3d74:	9b 01       	movw	r18, r22
    3d76:	ac 01       	movw	r20, r24
    3d78:	bd 01       	movw	r22, r26
    3d7a:	cf 01       	movw	r24, r30
    3d7c:	08 95       	ret

00003d7e <__prologue_saves__>:
    3d7e:	2f 92       	push	r2
    3d80:	3f 92       	push	r3
    3d82:	4f 92       	push	r4
    3d84:	5f 92       	push	r5
    3d86:	6f 92       	push	r6
    3d88:	7f 92       	push	r7
    3d8a:	8f 92       	push	r8
    3d8c:	9f 92       	push	r9
    3d8e:	af 92       	push	r10
    3d90:	bf 92       	push	r11
    3d92:	cf 92       	push	r12
    3d94:	df 92       	push	r13
    3d96:	ef 92       	push	r14
    3d98:	ff 92       	push	r15
    3d9a:	0f 93       	push	r16
    3d9c:	1f 93       	push	r17
    3d9e:	cf 93       	push	r28
    3da0:	df 93       	push	r29
    3da2:	cd b7       	in	r28, 0x3d	; 61
    3da4:	de b7       	in	r29, 0x3e	; 62
    3da6:	ca 1b       	sub	r28, r26
    3da8:	db 0b       	sbc	r29, r27
    3daa:	0f b6       	in	r0, 0x3f	; 63
    3dac:	f8 94       	cli
    3dae:	de bf       	out	0x3e, r29	; 62
    3db0:	0f be       	out	0x3f, r0	; 63
    3db2:	cd bf       	out	0x3d, r28	; 61
    3db4:	09 94       	ijmp

00003db6 <__epilogue_restores__>:
    3db6:	2a 88       	ldd	r2, Y+18	; 0x12
    3db8:	39 88       	ldd	r3, Y+17	; 0x11
    3dba:	48 88       	ldd	r4, Y+16	; 0x10
    3dbc:	5f 84       	ldd	r5, Y+15	; 0x0f
    3dbe:	6e 84       	ldd	r6, Y+14	; 0x0e
    3dc0:	7d 84       	ldd	r7, Y+13	; 0x0d
    3dc2:	8c 84       	ldd	r8, Y+12	; 0x0c
    3dc4:	9b 84       	ldd	r9, Y+11	; 0x0b
    3dc6:	aa 84       	ldd	r10, Y+10	; 0x0a
    3dc8:	b9 84       	ldd	r11, Y+9	; 0x09
    3dca:	c8 84       	ldd	r12, Y+8	; 0x08
    3dcc:	df 80       	ldd	r13, Y+7	; 0x07
    3dce:	ee 80       	ldd	r14, Y+6	; 0x06
    3dd0:	fd 80       	ldd	r15, Y+5	; 0x05
    3dd2:	0c 81       	ldd	r16, Y+4	; 0x04
    3dd4:	1b 81       	ldd	r17, Y+3	; 0x03
    3dd6:	aa 81       	ldd	r26, Y+2	; 0x02
    3dd8:	b9 81       	ldd	r27, Y+1	; 0x01
    3dda:	ce 0f       	add	r28, r30
    3ddc:	d1 1d       	adc	r29, r1
    3dde:	0f b6       	in	r0, 0x3f	; 63
    3de0:	f8 94       	cli
    3de2:	de bf       	out	0x3e, r29	; 62
    3de4:	0f be       	out	0x3f, r0	; 63
    3de6:	cd bf       	out	0x3d, r28	; 61
    3de8:	ed 01       	movw	r28, r26
    3dea:	08 95       	ret

00003dec <strcmp>:
    3dec:	fb 01       	movw	r30, r22
    3dee:	dc 01       	movw	r26, r24
    3df0:	8d 91       	ld	r24, X+
    3df2:	01 90       	ld	r0, Z+
    3df4:	80 19       	sub	r24, r0
    3df6:	01 10       	cpse	r0, r1
    3df8:	d9 f3       	breq	.-10     	; 0x3df0 <strcmp+0x4>
    3dfa:	99 0b       	sbc	r25, r25
    3dfc:	08 95       	ret

00003dfe <itoa>:
    3dfe:	fb 01       	movw	r30, r22
    3e00:	9f 01       	movw	r18, r30
    3e02:	e8 94       	clt
    3e04:	42 30       	cpi	r20, 0x02	; 2
    3e06:	c4 f0       	brlt	.+48     	; 0x3e38 <itoa+0x3a>
    3e08:	45 32       	cpi	r20, 0x25	; 37
    3e0a:	b4 f4       	brge	.+44     	; 0x3e38 <itoa+0x3a>
    3e0c:	4a 30       	cpi	r20, 0x0A	; 10
    3e0e:	29 f4       	brne	.+10     	; 0x3e1a <itoa+0x1c>
    3e10:	97 fb       	bst	r25, 7
    3e12:	1e f4       	brtc	.+6      	; 0x3e1a <itoa+0x1c>
    3e14:	90 95       	com	r25
    3e16:	81 95       	neg	r24
    3e18:	9f 4f       	sbci	r25, 0xFF	; 255
    3e1a:	64 2f       	mov	r22, r20
    3e1c:	77 27       	eor	r23, r23
    3e1e:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <__udivmodhi4>
    3e22:	80 5d       	subi	r24, 0xD0	; 208
    3e24:	8a 33       	cpi	r24, 0x3A	; 58
    3e26:	0c f0       	brlt	.+2      	; 0x3e2a <itoa+0x2c>
    3e28:	89 5d       	subi	r24, 0xD9	; 217
    3e2a:	81 93       	st	Z+, r24
    3e2c:	cb 01       	movw	r24, r22
    3e2e:	00 97       	sbiw	r24, 0x00	; 0
    3e30:	a1 f7       	brne	.-24     	; 0x3e1a <itoa+0x1c>
    3e32:	16 f4       	brtc	.+4      	; 0x3e38 <itoa+0x3a>
    3e34:	5d e2       	ldi	r21, 0x2D	; 45
    3e36:	51 93       	st	Z+, r21
    3e38:	10 82       	st	Z, r1
    3e3a:	c9 01       	movw	r24, r18
    3e3c:	0c 94 20 1f 	jmp	0x3e40	; 0x3e40 <strrev>

00003e40 <strrev>:
    3e40:	dc 01       	movw	r26, r24
    3e42:	fc 01       	movw	r30, r24
    3e44:	67 2f       	mov	r22, r23
    3e46:	71 91       	ld	r23, Z+
    3e48:	77 23       	and	r23, r23
    3e4a:	e1 f7       	brne	.-8      	; 0x3e44 <strrev+0x4>
    3e4c:	32 97       	sbiw	r30, 0x02	; 2
    3e4e:	04 c0       	rjmp	.+8      	; 0x3e58 <strrev+0x18>
    3e50:	7c 91       	ld	r23, X
    3e52:	6d 93       	st	X+, r22
    3e54:	70 83       	st	Z, r23
    3e56:	62 91       	ld	r22, -Z
    3e58:	ae 17       	cp	r26, r30
    3e5a:	bf 07       	cpc	r27, r31
    3e5c:	c8 f3       	brcs	.-14     	; 0x3e50 <strrev+0x10>
    3e5e:	08 95       	ret

00003e60 <__udivmodhi4>:
    3e60:	aa 1b       	sub	r26, r26
    3e62:	bb 1b       	sub	r27, r27
    3e64:	51 e1       	ldi	r21, 0x11	; 17
    3e66:	07 c0       	rjmp	.+14     	; 0x3e76 <__udivmodhi4_ep>

00003e68 <__udivmodhi4_loop>:
    3e68:	aa 1f       	adc	r26, r26
    3e6a:	bb 1f       	adc	r27, r27
    3e6c:	a6 17       	cp	r26, r22
    3e6e:	b7 07       	cpc	r27, r23
    3e70:	10 f0       	brcs	.+4      	; 0x3e76 <__udivmodhi4_ep>
    3e72:	a6 1b       	sub	r26, r22
    3e74:	b7 0b       	sbc	r27, r23

00003e76 <__udivmodhi4_ep>:
    3e76:	88 1f       	adc	r24, r24
    3e78:	99 1f       	adc	r25, r25
    3e7a:	5a 95       	dec	r21
    3e7c:	a9 f7       	brne	.-22     	; 0x3e68 <__udivmodhi4_loop>
    3e7e:	80 95       	com	r24
    3e80:	90 95       	com	r25
    3e82:	bc 01       	movw	r22, r24
    3e84:	cd 01       	movw	r24, r26
    3e86:	08 95       	ret

00003e88 <_exit>:
    3e88:	f8 94       	cli

00003e8a <__stop_program>:
    3e8a:	ff cf       	rjmp	.-2      	; 0x3e8a <__stop_program>
