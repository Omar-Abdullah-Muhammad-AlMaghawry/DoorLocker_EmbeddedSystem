#include "i2c.h"

void TWI_init(I2cConfig * conf){
	TWSR =0x00; //prescale = 1
	TWBR = BAUD_PRESCALE_I2C(conf->baudRate);//calc baud rate
	  /* Two Wire Bus address my address if any master device want to call me: (conf->addr) (used in case this MC is a slave device)
	       General Call Recognition: Off */
	TWAR = (conf->addr)<<1; // my address = (conf->addr)
	TWCR=(1<<TWEN);//enable TWI
}

void TWI_start(void){

	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//clear the flag represent intr , enable start bit, and enable intr////(((((|=)))))
	while(!(TWCR&(1<<TWINT)));//wait for sending the start bit in the new op (start bit sent succ))
}
void TWI_stop(void){
		/*
		 * Clear the TWINT flag before sending the stop bit TWINT=1
		 * send the stop bit by TWSTO=1
		 * Enable TWI Module intr TWEN=1
		 */
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//clear the flag represent intr , enable stop bit, and enable intr
}
void TWI_write(uint8 data){
	/*putting the next byte*/
	TWDR = data;
	/*
	 * clear the TWINT before sending data TWINT = 1
	 * enable the TWI Module
	 */
	TWCR=(1<<TWINT)|(1<<TWEN);
	/*wait for sending the data (data sent succ)*/
	while(!(TWCR&(1<<TWINT)));
}
uint8 TWI_readWithAck(void){
	/*
	 * clear the TWINT before recieving data TWINT = 1
	 * enable ack
	 * enable module intr
	 */
	TWCR=(1<<TWINT)|(1<<TWEA)|(1<<TWEN);
	/*wait for twint is set (data recieved succ)*/
	while(!(TWCR&(1<<TWINT)));
	return TWDR;
}

uint8 TWI_readWithNack(void){
	/*
	 * clear the TWINT before recieving data TWINT = 1
	 * disable ack TWEA = 0
	 * enable module intr
	 */
	TWCR=(1<<TWINT)|(1<<TWEN);
	/*wait for twint is set (data recieved succ)*/
	while(!(TWCR&(1<<TWINT)));
	return TWDR;
}
uint8 TWI_getStatus(void){
	/*masking for getting the last five bits in their location*/
	return (TWSR & 0xF8);
}



