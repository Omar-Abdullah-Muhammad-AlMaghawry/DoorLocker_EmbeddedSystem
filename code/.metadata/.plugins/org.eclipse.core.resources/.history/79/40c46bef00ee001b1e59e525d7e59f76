#include "ex_eeprom.h"

void EXEEPROM_init(void) {
	I2cConfig i2cConf = { 1, 400000 };
	TWI_init(&i2cConf);
	//TWI_init0();
}
uint8 EXEEPROM_writeByte(uint16 addr, char data) {
	TWI_start();
	if (TWI_getStatus() != TW_START)
		return ERROR;

	TWI_write((uint8) (((addr & 0x0700) >> 7) | 0xA0)); //decice addr 1010 + device addr a10,a9,a8
	if (TWI_getStatus() != TW_MT_SLA_W_ACK)
		return ERROR;

	TWI_write((uint8) addr); // word addr 1st 8 bits
	if (TWI_getStatus() != TW_MT_DATA_ACK)
		return ERROR;

	TWI_write((uint8) data); //send the data to store it
	if (TWI_getStatus() != TW_MT_DATA_ACK)
		return ERROR;

	TWI_stop(); //send stop bit
	return SUCCESS;
}
/*uint8 EXEEPROM_readByte(uint16 addr, char *data) {
	TWI_start();
	if (TWI_getStatus() != TW_START)
		return ERROR;

	TWI_write((uint8) (((addr & 0x0700) >> 7) | 0xA0)); //decice addr 1010 + device addr a10,a9,a8 //write to write initial addr
	if (TWI_getStatus() != TW_MT_SLA_W_ACK)
		return ERROR;

	TWI_write((uint8) addr); //intial word addr 1st 8 bits
	if (TWI_getStatus() != TW_MT_DATA_ACK)
		return ERROR;

	TWI_start(); //send repeated
	if (TWI_getStatus() != TW_REP_START)
		return ERROR;

	TWI_write((uint8) (((addr & 0x0700) >> 7) | 0xA0 | 1)); //decice addr 1010 + device addr a10,a9,a8 // read int R/W bit
	if (TWI_getStatus() != TW_MT_SLA_R_ACK)
		return ERROR;

	*data = (char)TWI_readWithNack();	//recieve byte without ack
	if (TWI_getStatus() != TW_MR_DATA_NACK)
		return ERROR;

	TWI_stop();	//send stop bit
	return SUCCESS;

}*/
uint8 EXEEPROM_readByte(uint16 u16addr, char *u8data)
{
	/* Send the Start Bit */
    TWI_start();
    if (TWI_getStatus() != TW_START)
        return ERROR;

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
        return ERROR;

    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    if (TWI_getStatus() != TW_MT_DATA_ACK)
        return ERROR;

    /* Send the Repeated Start Bit */
    TWI_start();
    if (TWI_getStatus() != TW_REP_START)
        return ERROR;

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
        return ERROR;

    /* Read Byte from Memory without send ACK */
    *u8data =(char) TWI_readWithNACK();
    if (TWI_getStatus() != TW_MR_DATA_NACK)
        return ERROR;

    /* Send the Stop Bit */
    TWI_stop();
    return SUCCESS;
}


