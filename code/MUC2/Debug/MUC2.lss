
MUC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00001c60  00001cf4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080007c  0080007c  00001d10  2**0
                  ALLOC
  3 .stab         00001c44  00000000  00000000  00001d10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f7b  00000000  00000000  00003954  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000048cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000067c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000076b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008460  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000085c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000884d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000901b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e6       	ldi	r30, 0x60	; 96
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 38       	cpi	r26, 0x81	; 129
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 71 09 	call	0x12e2	; 0x12e2 <main>
      8a:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e6       	ldi	r26, 0x6C	; 108
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 13 0e 	jmp	0x1c26	; 0x1c26 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8c e6       	ldi	r24, 0x6C	; 108
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 13 0e 	jmp	0x1c26	; 0x1c26 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 23 0e 	jmp	0x1c46	; 0x1c46 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DCMOTOR_init>:
#include "dcmotor.h"

void DCMOTOR_init(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	DCMOTOR_DIR |= (1<<IN1)|(1<<IN2);
     b4e:	a4 e3       	ldi	r26, 0x34	; 52
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e4 e3       	ldi	r30, 0x34	; 52
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 61       	ori	r24, 0x18	; 24
     b5a:	8c 93       	st	X, r24
	DCMOTOR_OUTPUT &= ~((1<<IN1)|(1<<IN2));
     b5c:	a5 e3       	ldi	r26, 0x35	; 53
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e5 e3       	ldi	r30, 0x35	; 53
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	87 7e       	andi	r24, 0xE7	; 231
     b68:	8c 93       	st	X, r24
}
     b6a:	cf 91       	pop	r28
     b6c:	df 91       	pop	r29
     b6e:	08 95       	ret

00000b70 <DCMOTOR_clockWise>:
void DCMOTOR_clockWise(void){
     b70:	df 93       	push	r29
     b72:	cf 93       	push	r28
     b74:	cd b7       	in	r28, 0x3d	; 61
     b76:	de b7       	in	r29, 0x3e	; 62
	DCMOTOR_OUTPUT &= ~(1<<IN1);
     b78:	a5 e3       	ldi	r26, 0x35	; 53
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e5 e3       	ldi	r30, 0x35	; 53
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	87 7f       	andi	r24, 0xF7	; 247
     b84:	8c 93       	st	X, r24
	DCMOTOR_OUTPUT |= (1<<IN2);
     b86:	a5 e3       	ldi	r26, 0x35	; 53
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e5 e3       	ldi	r30, 0x35	; 53
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	80 61       	ori	r24, 0x10	; 16
     b92:	8c 93       	st	X, r24
}
     b94:	cf 91       	pop	r28
     b96:	df 91       	pop	r29
     b98:	08 95       	ret

00000b9a <DCMOTOR_antiClockWise>:
void DCMOTOR_antiClockWise(void){
     b9a:	df 93       	push	r29
     b9c:	cf 93       	push	r28
     b9e:	cd b7       	in	r28, 0x3d	; 61
     ba0:	de b7       	in	r29, 0x3e	; 62
	DCMOTOR_OUTPUT &= ~(1<<IN2);
     ba2:	a5 e3       	ldi	r26, 0x35	; 53
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e5 e3       	ldi	r30, 0x35	; 53
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	8f 7e       	andi	r24, 0xEF	; 239
     bae:	8c 93       	st	X, r24
	DCMOTOR_OUTPUT |= (1<<IN1);
     bb0:	a5 e3       	ldi	r26, 0x35	; 53
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e5 e3       	ldi	r30, 0x35	; 53
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	88 60       	ori	r24, 0x08	; 8
     bbc:	8c 93       	st	X, r24
}
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <DCMOTOR_stop>:
void DCMOTOR_stop(void){
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
	DCMOTOR_OUTPUT &= ~(1<<IN1);
     bcc:	a5 e3       	ldi	r26, 0x35	; 53
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e5 e3       	ldi	r30, 0x35	; 53
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	87 7f       	andi	r24, 0xF7	; 247
     bd8:	8c 93       	st	X, r24
	DCMOTOR_OUTPUT &= ~(1<<IN2);
     bda:	a5 e3       	ldi	r26, 0x35	; 53
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e5 e3       	ldi	r30, 0x35	; 53
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	8f 7e       	andi	r24, 0xEF	; 239
     be6:	8c 93       	st	X, r24
}
     be8:	cf 91       	pop	r28
     bea:	df 91       	pop	r29
     bec:	08 95       	ret

00000bee <EXEEPROM_init>:


#include "ex_eeprom.h"

void EXEEPROM_init(void) {
     bee:	df 93       	push	r29
     bf0:	cf 93       	push	r28
     bf2:	cd b7       	in	r28, 0x3d	; 61
     bf4:	de b7       	in	r29, 0x3e	; 62
     bf6:	28 97       	sbiw	r28, 0x08	; 8
     bf8:	0f b6       	in	r0, 0x3f	; 63
     bfa:	f8 94       	cli
     bfc:	de bf       	out	0x3e, r29	; 62
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	cd bf       	out	0x3d, r28	; 61
	I2cConfig i2cConf = { 1, 400000 };
     c02:	ce 01       	movw	r24, r28
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	9d 83       	std	Y+5, r25	; 0x05
     c08:	8c 83       	std	Y+4, r24	; 0x04
     c0a:	e4 e7       	ldi	r30, 0x74	; 116
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	ff 83       	std	Y+7, r31	; 0x07
     c10:	ee 83       	std	Y+6, r30	; 0x06
     c12:	f3 e0       	ldi	r31, 0x03	; 3
     c14:	f8 87       	std	Y+8, r31	; 0x08
     c16:	ee 81       	ldd	r30, Y+6	; 0x06
     c18:	ff 81       	ldd	r31, Y+7	; 0x07
     c1a:	00 80       	ld	r0, Z
     c1c:	8e 81       	ldd	r24, Y+6	; 0x06
     c1e:	9f 81       	ldd	r25, Y+7	; 0x07
     c20:	01 96       	adiw	r24, 0x01	; 1
     c22:	9f 83       	std	Y+7, r25	; 0x07
     c24:	8e 83       	std	Y+6, r24	; 0x06
     c26:	ec 81       	ldd	r30, Y+4	; 0x04
     c28:	fd 81       	ldd	r31, Y+5	; 0x05
     c2a:	00 82       	st	Z, r0
     c2c:	8c 81       	ldd	r24, Y+4	; 0x04
     c2e:	9d 81       	ldd	r25, Y+5	; 0x05
     c30:	01 96       	adiw	r24, 0x01	; 1
     c32:	9d 83       	std	Y+5, r25	; 0x05
     c34:	8c 83       	std	Y+4, r24	; 0x04
     c36:	98 85       	ldd	r25, Y+8	; 0x08
     c38:	91 50       	subi	r25, 0x01	; 1
     c3a:	98 87       	std	Y+8, r25	; 0x08
     c3c:	e8 85       	ldd	r30, Y+8	; 0x08
     c3e:	ee 23       	and	r30, r30
     c40:	51 f7       	brne	.-44     	; 0xc16 <EXEEPROM_init+0x28>
	TWI_init(&i2cConf);
     c42:	ce 01       	movw	r24, r28
     c44:	01 96       	adiw	r24, 0x01	; 1
     c46:	0e 94 cf 06 	call	0xd9e	; 0xd9e <TWI_init>
	//TWI_init0();
}
     c4a:	28 96       	adiw	r28, 0x08	; 8
     c4c:	0f b6       	in	r0, 0x3f	; 63
     c4e:	f8 94       	cli
     c50:	de bf       	out	0x3e, r29	; 62
     c52:	0f be       	out	0x3f, r0	; 63
     c54:	cd bf       	out	0x3d, r28	; 61
     c56:	cf 91       	pop	r28
     c58:	df 91       	pop	r29
     c5a:	08 95       	ret

00000c5c <EXEEPROM_writeByte>:
uint8 EXEEPROM_writeByte(uint16 addr, char data) {
     c5c:	df 93       	push	r29
     c5e:	cf 93       	push	r28
     c60:	00 d0       	rcall	.+0      	; 0xc62 <EXEEPROM_writeByte+0x6>
     c62:	00 d0       	rcall	.+0      	; 0xc64 <EXEEPROM_writeByte+0x8>
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
     c68:	9a 83       	std	Y+2, r25	; 0x02
     c6a:	89 83       	std	Y+1, r24	; 0x01
     c6c:	6b 83       	std	Y+3, r22	; 0x03
	TWI_start();
     c6e:	0e 94 33 07 	call	0xe66	; 0xe66 <TWI_start>
	if (TWI_getStatus() != TW_START)
     c72:	0e 94 8b 07 	call	0xf16	; 0xf16 <TWI_getStatus>
     c76:	88 30       	cpi	r24, 0x08	; 8
     c78:	11 f0       	breq	.+4      	; 0xc7e <EXEEPROM_writeByte+0x22>
		return ERROR;
     c7a:	1c 82       	std	Y+4, r1	; 0x04
     c7c:	28 c0       	rjmp	.+80     	; 0xcce <EXEEPROM_writeByte+0x72>

	TWI_write((uint8) (((addr & 0x0700) >> 7) | 0xA0)); //decice addr 1010 + device addr a10,a9,a8
     c7e:	89 81       	ldd	r24, Y+1	; 0x01
     c80:	9a 81       	ldd	r25, Y+2	; 0x02
     c82:	80 70       	andi	r24, 0x00	; 0
     c84:	97 70       	andi	r25, 0x07	; 7
     c86:	88 0f       	add	r24, r24
     c88:	89 2f       	mov	r24, r25
     c8a:	88 1f       	adc	r24, r24
     c8c:	99 0b       	sbc	r25, r25
     c8e:	91 95       	neg	r25
     c90:	80 6a       	ori	r24, 0xA0	; 160
     c92:	0e 94 4e 07 	call	0xe9c	; 0xe9c <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     c96:	0e 94 8b 07 	call	0xf16	; 0xf16 <TWI_getStatus>
     c9a:	88 31       	cpi	r24, 0x18	; 24
     c9c:	11 f0       	breq	.+4      	; 0xca2 <EXEEPROM_writeByte+0x46>
		return ERROR;
     c9e:	1c 82       	std	Y+4, r1	; 0x04
     ca0:	16 c0       	rjmp	.+44     	; 0xcce <EXEEPROM_writeByte+0x72>

	TWI_write((uint8) addr); // word addr 1st 8 bits
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	0e 94 4e 07 	call	0xe9c	; 0xe9c <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK)
     ca8:	0e 94 8b 07 	call	0xf16	; 0xf16 <TWI_getStatus>
     cac:	88 32       	cpi	r24, 0x28	; 40
     cae:	11 f0       	breq	.+4      	; 0xcb4 <EXEEPROM_writeByte+0x58>
		return ERROR;
     cb0:	1c 82       	std	Y+4, r1	; 0x04
     cb2:	0d c0       	rjmp	.+26     	; 0xcce <EXEEPROM_writeByte+0x72>

	TWI_write((uint8) data); //send the data to store it
     cb4:	8b 81       	ldd	r24, Y+3	; 0x03
     cb6:	0e 94 4e 07 	call	0xe9c	; 0xe9c <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK)
     cba:	0e 94 8b 07 	call	0xf16	; 0xf16 <TWI_getStatus>
     cbe:	88 32       	cpi	r24, 0x28	; 40
     cc0:	11 f0       	breq	.+4      	; 0xcc6 <EXEEPROM_writeByte+0x6a>
		return ERROR;
     cc2:	1c 82       	std	Y+4, r1	; 0x04
     cc4:	04 c0       	rjmp	.+8      	; 0xcce <EXEEPROM_writeByte+0x72>

	TWI_stop(); //send stop bit
     cc6:	0e 94 43 07 	call	0xe86	; 0xe86 <TWI_stop>
	return SUCCESS;
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	8c 83       	std	Y+4, r24	; 0x04
     cce:	8c 81       	ldd	r24, Y+4	; 0x04
}
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	cf 91       	pop	r28
     cda:	df 91       	pop	r29
     cdc:	08 95       	ret

00000cde <EXEEPROM_readByte>:

uint8 EXEEPROM_readByte(uint16 addr, char *data) {
     cde:	df 93       	push	r29
     ce0:	cf 93       	push	r28
     ce2:	00 d0       	rcall	.+0      	; 0xce4 <EXEEPROM_readByte+0x6>
     ce4:	00 d0       	rcall	.+0      	; 0xce6 <EXEEPROM_readByte+0x8>
     ce6:	0f 92       	push	r0
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	9a 83       	std	Y+2, r25	; 0x02
     cee:	89 83       	std	Y+1, r24	; 0x01
     cf0:	7c 83       	std	Y+4, r23	; 0x04
     cf2:	6b 83       	std	Y+3, r22	; 0x03
	TWI_start();
     cf4:	0e 94 33 07 	call	0xe66	; 0xe66 <TWI_start>
	if (TWI_getStatus() != TW_START)
     cf8:	0e 94 8b 07 	call	0xf16	; 0xf16 <TWI_getStatus>
     cfc:	88 30       	cpi	r24, 0x08	; 8
     cfe:	11 f0       	breq	.+4      	; 0xd04 <EXEEPROM_readByte+0x26>
		return ERROR;
     d00:	1d 82       	std	Y+5, r1	; 0x05
     d02:	44 c0       	rjmp	.+136    	; 0xd8c <EXEEPROM_readByte+0xae>

	TWI_write((uint8) (((addr & 0x0700) >> 7) | 0xA0)); //decice addr 1010 + device addr a10,a9,a8 //write to write initial addr
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	9a 81       	ldd	r25, Y+2	; 0x02
     d08:	80 70       	andi	r24, 0x00	; 0
     d0a:	97 70       	andi	r25, 0x07	; 7
     d0c:	88 0f       	add	r24, r24
     d0e:	89 2f       	mov	r24, r25
     d10:	88 1f       	adc	r24, r24
     d12:	99 0b       	sbc	r25, r25
     d14:	91 95       	neg	r25
     d16:	80 6a       	ori	r24, 0xA0	; 160
     d18:	0e 94 4e 07 	call	0xe9c	; 0xe9c <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     d1c:	0e 94 8b 07 	call	0xf16	; 0xf16 <TWI_getStatus>
     d20:	88 31       	cpi	r24, 0x18	; 24
     d22:	11 f0       	breq	.+4      	; 0xd28 <EXEEPROM_readByte+0x4a>
		return ERROR;
     d24:	1d 82       	std	Y+5, r1	; 0x05
     d26:	32 c0       	rjmp	.+100    	; 0xd8c <EXEEPROM_readByte+0xae>

	TWI_write((uint8) addr); //intial word addr 1st 8 bits
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	0e 94 4e 07 	call	0xe9c	; 0xe9c <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK)
     d2e:	0e 94 8b 07 	call	0xf16	; 0xf16 <TWI_getStatus>
     d32:	88 32       	cpi	r24, 0x28	; 40
     d34:	11 f0       	breq	.+4      	; 0xd3a <EXEEPROM_readByte+0x5c>
		return ERROR;
     d36:	1d 82       	std	Y+5, r1	; 0x05
     d38:	29 c0       	rjmp	.+82     	; 0xd8c <EXEEPROM_readByte+0xae>

	TWI_start(); //send repeated
     d3a:	0e 94 33 07 	call	0xe66	; 0xe66 <TWI_start>
	if (TWI_getStatus() != TW_REP_START)
     d3e:	0e 94 8b 07 	call	0xf16	; 0xf16 <TWI_getStatus>
     d42:	80 31       	cpi	r24, 0x10	; 16
     d44:	11 f0       	breq	.+4      	; 0xd4a <EXEEPROM_readByte+0x6c>
		return ERROR;
     d46:	1d 82       	std	Y+5, r1	; 0x05
     d48:	21 c0       	rjmp	.+66     	; 0xd8c <EXEEPROM_readByte+0xae>

	TWI_write((uint8) (((addr & 0x0700) >> 7) | 0xA0 | 1)); //decice addr 1010 + device addr a10,a9,a8 // read int R/W bit
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	9a 81       	ldd	r25, Y+2	; 0x02
     d4e:	80 70       	andi	r24, 0x00	; 0
     d50:	97 70       	andi	r25, 0x07	; 7
     d52:	88 0f       	add	r24, r24
     d54:	89 2f       	mov	r24, r25
     d56:	88 1f       	adc	r24, r24
     d58:	99 0b       	sbc	r25, r25
     d5a:	91 95       	neg	r25
     d5c:	81 6a       	ori	r24, 0xA1	; 161
     d5e:	0e 94 4e 07 	call	0xe9c	; 0xe9c <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_R_ACK)
     d62:	0e 94 8b 07 	call	0xf16	; 0xf16 <TWI_getStatus>
     d66:	80 34       	cpi	r24, 0x40	; 64
     d68:	11 f0       	breq	.+4      	; 0xd6e <EXEEPROM_readByte+0x90>
		return ERROR;
     d6a:	1d 82       	std	Y+5, r1	; 0x05
     d6c:	0f c0       	rjmp	.+30     	; 0xd8c <EXEEPROM_readByte+0xae>

	*data = (char)TWI_readWithNack();	//recieve byte without ack
     d6e:	0e 94 78 07 	call	0xef0	; 0xef0 <TWI_readWithNack>
     d72:	eb 81       	ldd	r30, Y+3	; 0x03
     d74:	fc 81       	ldd	r31, Y+4	; 0x04
     d76:	80 83       	st	Z, r24
	if (TWI_getStatus() != TW_MR_DATA_NACK)
     d78:	0e 94 8b 07 	call	0xf16	; 0xf16 <TWI_getStatus>
     d7c:	88 35       	cpi	r24, 0x58	; 88
     d7e:	11 f0       	breq	.+4      	; 0xd84 <EXEEPROM_readByte+0xa6>
		return ERROR;
     d80:	1d 82       	std	Y+5, r1	; 0x05
     d82:	04 c0       	rjmp	.+8      	; 0xd8c <EXEEPROM_readByte+0xae>

	TWI_stop();	//send stop bit
     d84:	0e 94 43 07 	call	0xe86	; 0xe86 <TWI_stop>
	return SUCCESS;
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	8d 83       	std	Y+5, r24	; 0x05
     d8c:	8d 81       	ldd	r24, Y+5	; 0x05

}
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	08 95       	ret

00000d9e <TWI_init>:

#include "i2c.h"

void TWI_init(I2cConfig * conf){
     d9e:	0f 93       	push	r16
     da0:	1f 93       	push	r17
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	00 d0       	rcall	.+0      	; 0xda8 <TWI_init+0xa>
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
     dac:	9a 83       	std	Y+2, r25	; 0x02
     dae:	89 83       	std	Y+1, r24	; 0x01
	TWBR = BAUD_PRESCALE_I2C(conf->baudRate);//calc baud rate
     db0:	00 e2       	ldi	r16, 0x20	; 32
     db2:	10 e0       	ldi	r17, 0x00	; 0
     db4:	e9 81       	ldd	r30, Y+1	; 0x01
     db6:	fa 81       	ldd	r31, Y+2	; 0x02
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	92 81       	ldd	r25, Z+2	; 0x02
     dbc:	9c 01       	movw	r18, r24
     dbe:	44 27       	eor	r20, r20
     dc0:	37 fd       	sbrc	r19, 7
     dc2:	40 95       	com	r20
     dc4:	54 2f       	mov	r21, r20
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	92 e1       	ldi	r25, 0x12	; 18
     dca:	aa e7       	ldi	r26, 0x7A	; 122
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	bc 01       	movw	r22, r24
     dd0:	cd 01       	movw	r24, r26
     dd2:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__divmodsi4>
     dd6:	da 01       	movw	r26, r20
     dd8:	c9 01       	movw	r24, r18
     dda:	40 97       	sbiw	r24, 0x10	; 16
     ddc:	a1 09       	sbc	r26, r1
     dde:	b1 09       	sbc	r27, r1
     de0:	22 e0       	ldi	r18, 0x02	; 2
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	40 e0       	ldi	r20, 0x00	; 0
     de6:	50 e0       	ldi	r21, 0x00	; 0
     de8:	bc 01       	movw	r22, r24
     dea:	cd 01       	movw	r24, r26
     dec:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__divmodsi4>
     df0:	da 01       	movw	r26, r20
     df2:	c9 01       	movw	r24, r18
     df4:	f8 01       	movw	r30, r16
     df6:	80 83       	st	Z, r24
	TWSR =0x00; //prescale = 1
     df8:	e1 e2       	ldi	r30, 0x21	; 33
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	10 82       	st	Z, r1
	  /* Two Wire Bus address my address if any master device want to call me: (conf->addr) (used in case this MC is a slave device)
	       General Call Recognition: Off */
	TWAR = 0;
     dfe:	e2 e2       	ldi	r30, 0x22	; 34
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	10 82       	st	Z, r1
	TWAR = (TWAR&0xFE)|((conf->addr)<<1); // my address = (conf->addr)
     e04:	a2 e2       	ldi	r26, 0x22	; 34
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e2 e2       	ldi	r30, 0x22	; 34
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	28 2f       	mov	r18, r24
     e10:	2e 7f       	andi	r18, 0xFE	; 254
     e12:	e9 81       	ldd	r30, Y+1	; 0x01
     e14:	fa 81       	ldd	r31, Y+2	; 0x02
     e16:	80 81       	ld	r24, Z
     e18:	88 2f       	mov	r24, r24
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	82 2b       	or	r24, r18
     e22:	8c 93       	st	X, r24
	TWCR=(1<<TWEN);//enable TWI
     e24:	e6 e5       	ldi	r30, 0x56	; 86
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	84 e0       	ldi	r24, 0x04	; 4
     e2a:	80 83       	st	Z, r24
}
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	cf 91       	pop	r28
     e32:	df 91       	pop	r29
     e34:	1f 91       	pop	r17
     e36:	0f 91       	pop	r16
     e38:	08 95       	ret

00000e3a <TWI_init0>:
void TWI_init0(void)
{
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
     e42:	e0 e2       	ldi	r30, 0x20	; 32
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	82 e0       	ldi	r24, 0x02	; 2
     e48:	80 83       	st	Z, r24
	TWSR = 0x00;
     e4a:	e1 e2       	ldi	r30, 0x21	; 33
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	10 82       	st	Z, r1

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :)
     e50:	e2 e2       	ldi	r30, 0x22	; 34
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	82 e0       	ldi	r24, 0x02	; 2
     e56:	80 83       	st	Z, r24

    TWCR = (1<<TWEN); /* enable TWI */
     e58:	e6 e5       	ldi	r30, 0x56	; 86
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	84 e0       	ldi	r24, 0x04	; 4
     e5e:	80 83       	st	Z, r24
}
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <TWI_start>:


void TWI_start(void){
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62

	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//clear the flag represent intr , enable start bit, and enable intr////(((((|=)))))
     e6e:	e6 e5       	ldi	r30, 0x56	; 86
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	84 ea       	ldi	r24, 0xA4	; 164
     e74:	80 83       	st	Z, r24
	while(!(TWCR&(1<<TWINT)));//wait for sending the start bit in the new op (start bit sent succ))
     e76:	e6 e5       	ldi	r30, 0x56	; 86
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	88 23       	and	r24, r24
     e7e:	dc f7       	brge	.-10     	; 0xe76 <TWI_start+0x10>
}
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	08 95       	ret

00000e86 <TWI_stop>:
void TWI_stop(void){
     e86:	df 93       	push	r29
     e88:	cf 93       	push	r28
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
		/*
		 * Clear the TWINT flag before sending the stop bit TWINT=1
		 * send the stop bit by TWSTO=1
		 * Enable TWI Module intr TWEN=1
		 */
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//clear the flag represent intr , enable stop bit, and enable intr
     e8e:	e6 e5       	ldi	r30, 0x56	; 86
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	84 e9       	ldi	r24, 0x94	; 148
     e94:	80 83       	st	Z, r24
}
     e96:	cf 91       	pop	r28
     e98:	df 91       	pop	r29
     e9a:	08 95       	ret

00000e9c <TWI_write>:
void TWI_write(uint8 data){
     e9c:	df 93       	push	r29
     e9e:	cf 93       	push	r28
     ea0:	0f 92       	push	r0
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	89 83       	std	Y+1, r24	; 0x01
	/*putting the next byte*/
	TWDR = data;
     ea8:	e3 e2       	ldi	r30, 0x23	; 35
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	80 83       	st	Z, r24
	/*
	 * clear the TWINT before sending data TWINT = 1
	 * enable the TWI Module
	 */
	TWCR=(1<<TWINT)|(1<<TWEN);
     eb0:	e6 e5       	ldi	r30, 0x56	; 86
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	84 e8       	ldi	r24, 0x84	; 132
     eb6:	80 83       	st	Z, r24
	/*wait for sending the data (data sent succ)*/
	while(!(TWCR&(1<<TWINT)));
     eb8:	e6 e5       	ldi	r30, 0x56	; 86
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	88 23       	and	r24, r24
     ec0:	dc f7       	brge	.-10     	; 0xeb8 <TWI_write+0x1c>
}
     ec2:	0f 90       	pop	r0
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <TWI_readWithAck>:
uint8 TWI_readWithAck(void){
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
	/*
	 * clear the TWINT before recieving data TWINT = 1
	 * enable ack
	 * enable module intr
	 */
	TWCR=(1<<TWINT)|(1<<TWEA)|(1<<TWEN);
     ed2:	e6 e5       	ldi	r30, 0x56	; 86
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	84 ec       	ldi	r24, 0xC4	; 196
     ed8:	80 83       	st	Z, r24
	/*wait for twint is set (data recieved succ)*/
	while(!(TWCR&(1<<TWINT)));
     eda:	e6 e5       	ldi	r30, 0x56	; 86
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	88 23       	and	r24, r24
     ee2:	dc f7       	brge	.-10     	; 0xeda <TWI_readWithAck+0x10>
	return TWDR;
     ee4:	e3 e2       	ldi	r30, 0x23	; 35
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
}
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	08 95       	ret

00000ef0 <TWI_readWithNack>:

uint8 TWI_readWithNack(void){
     ef0:	df 93       	push	r29
     ef2:	cf 93       	push	r28
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
	/*
	 * clear the TWINT before recieving data TWINT = 1
	 * disable ack TWEA = 0
	 * enable module intr
	 */
	TWCR=(1<<TWINT)|(1<<TWEN);
     ef8:	e6 e5       	ldi	r30, 0x56	; 86
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	84 e8       	ldi	r24, 0x84	; 132
     efe:	80 83       	st	Z, r24
	/*wait for twint is set (data recieved succ)*/
	while(!(TWCR&(1<<TWINT)));
     f00:	e6 e5       	ldi	r30, 0x56	; 86
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	88 23       	and	r24, r24
     f08:	dc f7       	brge	.-10     	; 0xf00 <TWI_readWithNack+0x10>
	return TWDR;
     f0a:	e3 e2       	ldi	r30, 0x23	; 35
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
}
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	08 95       	ret

00000f16 <TWI_getStatus>:
uint8 TWI_getStatus(void)
{
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	0f 92       	push	r0
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
     f20:	e1 e2       	ldi	r30, 0x21	; 33
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	88 7f       	andi	r24, 0xF8	; 248
     f28:	89 83       	std	Y+1, r24	; 0x01
    return status;
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f2c:	0f 90       	pop	r0
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <check_with_eeprom>:

uint8 volatile tick = 0;
uint8 volatile mSec = 0;
uint8 volatile sec = 0;

uint8 check_with_eeprom(char *ptr1, char *ptr2) {
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	27 97       	sbiw	r28, 0x07	; 7
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	de bf       	out	0x3e, r29	; 62
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	cd bf       	out	0x3d, r28	; 61
     f48:	9c 83       	std	Y+4, r25	; 0x04
     f4a:	8b 83       	std	Y+3, r24	; 0x03
     f4c:	7e 83       	std	Y+6, r23	; 0x06
     f4e:	6d 83       	std	Y+5, r22	; 0x05
	int i;
	for (i = 0; i < 5; i++) {
     f50:	1a 82       	std	Y+2, r1	; 0x02
     f52:	19 82       	std	Y+1, r1	; 0x01
     f54:	27 c0       	rjmp	.+78     	; 0xfa4 <check_with_eeprom+0x70>
		//read the saved 5 bits from the address 0x0311
		EXEEPROM_readByte(0x03 + i, &ptr2[i]);
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	9a 81       	ldd	r25, Y+2	; 0x02
     f5a:	03 96       	adiw	r24, 0x03	; 3
     f5c:	ac 01       	movw	r20, r24
     f5e:	29 81       	ldd	r18, Y+1	; 0x01
     f60:	3a 81       	ldd	r19, Y+2	; 0x02
     f62:	8d 81       	ldd	r24, Y+5	; 0x05
     f64:	9e 81       	ldd	r25, Y+6	; 0x06
     f66:	28 0f       	add	r18, r24
     f68:	39 1f       	adc	r19, r25
     f6a:	ca 01       	movw	r24, r20
     f6c:	b9 01       	movw	r22, r18
     f6e:	0e 94 6f 06 	call	0xcde	; 0xcde <EXEEPROM_readByte>
		if (ptr1[i] != ptr2[i]) { //compare the saved bit with the input data
     f72:	29 81       	ldd	r18, Y+1	; 0x01
     f74:	3a 81       	ldd	r19, Y+2	; 0x02
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	9c 81       	ldd	r25, Y+4	; 0x04
     f7a:	fc 01       	movw	r30, r24
     f7c:	e2 0f       	add	r30, r18
     f7e:	f3 1f       	adc	r31, r19
     f80:	40 81       	ld	r20, Z
     f82:	29 81       	ldd	r18, Y+1	; 0x01
     f84:	3a 81       	ldd	r19, Y+2	; 0x02
     f86:	8d 81       	ldd	r24, Y+5	; 0x05
     f88:	9e 81       	ldd	r25, Y+6	; 0x06
     f8a:	fc 01       	movw	r30, r24
     f8c:	e2 0f       	add	r30, r18
     f8e:	f3 1f       	adc	r31, r19
     f90:	80 81       	ld	r24, Z
     f92:	48 17       	cp	r20, r24
     f94:	11 f0       	breq	.+4      	; 0xf9a <check_with_eeprom+0x66>
			return ERROR;
     f96:	1f 82       	std	Y+7, r1	; 0x07
     f98:	0c c0       	rjmp	.+24     	; 0xfb2 <check_with_eeprom+0x7e>
uint8 volatile mSec = 0;
uint8 volatile sec = 0;

uint8 check_with_eeprom(char *ptr1, char *ptr2) {
	int i;
	for (i = 0; i < 5; i++) {
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	9a 81       	ldd	r25, Y+2	; 0x02
     f9e:	01 96       	adiw	r24, 0x01	; 1
     fa0:	9a 83       	std	Y+2, r25	; 0x02
     fa2:	89 83       	std	Y+1, r24	; 0x01
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	9a 81       	ldd	r25, Y+2	; 0x02
     fa8:	85 30       	cpi	r24, 0x05	; 5
     faa:	91 05       	cpc	r25, r1
     fac:	a4 f2       	brlt	.-88     	; 0xf56 <check_with_eeprom+0x22>
		EXEEPROM_readByte(0x03 + i, &ptr2[i]);
		if (ptr1[i] != ptr2[i]) { //compare the saved bit with the input data
			return ERROR;
		}
	}
	return SUCCESS;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	8f 83       	std	Y+7, r24	; 0x07
     fb2:	8f 81       	ldd	r24, Y+7	; 0x07
}
     fb4:	27 96       	adiw	r28, 0x07	; 7
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <getPassFromEeprom>:
void getPassFromEeprom(char * str) {
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	00 d0       	rcall	.+0      	; 0xfcc <getPassFromEeprom+0x6>
     fcc:	00 d0       	rcall	.+0      	; 0xfce <getPassFromEeprom+0x8>
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	9c 83       	std	Y+4, r25	; 0x04
     fd4:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for (i = 0; i < 5; i++) {
     fd6:	1a 82       	std	Y+2, r1	; 0x02
     fd8:	19 82       	std	Y+1, r1	; 0x01
     fda:	14 c0       	rjmp	.+40     	; 0x1004 <getPassFromEeprom+0x3e>
		//read the saved 5 bits from the address 0x0311
		EXEEPROM_readByte(0x0311 + i, str+i);
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	9a 81       	ldd	r25, Y+2	; 0x02
     fe0:	8f 5e       	subi	r24, 0xEF	; 239
     fe2:	9c 4f       	sbci	r25, 0xFC	; 252
     fe4:	ac 01       	movw	r20, r24
     fe6:	29 81       	ldd	r18, Y+1	; 0x01
     fe8:	3a 81       	ldd	r19, Y+2	; 0x02
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	9c 81       	ldd	r25, Y+4	; 0x04
     fee:	28 0f       	add	r18, r24
     ff0:	39 1f       	adc	r19, r25
     ff2:	ca 01       	movw	r24, r20
     ff4:	b9 01       	movw	r22, r18
     ff6:	0e 94 6f 06 	call	0xcde	; 0xcde <EXEEPROM_readByte>
	}
	return SUCCESS;
}
void getPassFromEeprom(char * str) {
	int i;
	for (i = 0; i < 5; i++) {
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	9a 81       	ldd	r25, Y+2	; 0x02
     ffe:	01 96       	adiw	r24, 0x01	; 1
    1000:	9a 83       	std	Y+2, r25	; 0x02
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	9a 81       	ldd	r25, Y+2	; 0x02
    1008:	85 30       	cpi	r24, 0x05	; 5
    100a:	91 05       	cpc	r25, r1
    100c:	3c f3       	brlt	.-50     	; 0xfdc <getPassFromEeprom+0x16>
		//read the saved 5 bits from the address 0x0311
		EXEEPROM_readByte(0x0311 + i, str+i);
	}
}
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	08 95       	ret

0000101c <setPassToEeprom>:
void setPassToEeprom(char *str) {
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	62 97       	sbiw	r28, 0x12	; 18
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	f8 94       	cli
    102a:	de bf       	out	0x3e, r29	; 62
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	cd bf       	out	0x3d, r28	; 61
    1030:	9a 8b       	std	Y+18, r25	; 0x12
    1032:	89 8b       	std	Y+17, r24	; 0x11
	int i;
	for (i = 0; i < 5; i++) {
    1034:	18 8a       	std	Y+16, r1	; 0x10
    1036:	1f 86       	std	Y+15, r1	; 0x0f
    1038:	88 c0       	rjmp	.+272    	; 0x114a <setPassToEeprom+0x12e>
		//write the saved 5 bits from the address 0x0311
		EXEEPROM_writeByte(0x0311 + i, str[i]);
    103a:	8f 85       	ldd	r24, Y+15	; 0x0f
    103c:	98 89       	ldd	r25, Y+16	; 0x10
    103e:	8f 5e       	subi	r24, 0xEF	; 239
    1040:	9c 4f       	sbci	r25, 0xFC	; 252
    1042:	ac 01       	movw	r20, r24
    1044:	2f 85       	ldd	r18, Y+15	; 0x0f
    1046:	38 89       	ldd	r19, Y+16	; 0x10
    1048:	89 89       	ldd	r24, Y+17	; 0x11
    104a:	9a 89       	ldd	r25, Y+18	; 0x12
    104c:	fc 01       	movw	r30, r24
    104e:	e2 0f       	add	r30, r18
    1050:	f3 1f       	adc	r31, r19
    1052:	20 81       	ld	r18, Z
    1054:	ca 01       	movw	r24, r20
    1056:	62 2f       	mov	r22, r18
    1058:	0e 94 2e 06 	call	0xc5c	; 0xc5c <EXEEPROM_writeByte>
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	a8 ec       	ldi	r26, 0xC8	; 200
    1062:	b2 e4       	ldi	r27, 0x42	; 66
    1064:	8b 87       	std	Y+11, r24	; 0x0b
    1066:	9c 87       	std	Y+12, r25	; 0x0c
    1068:	ad 87       	std	Y+13, r26	; 0x0d
    106a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    106c:	6b 85       	ldd	r22, Y+11	; 0x0b
    106e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1070:	8d 85       	ldd	r24, Y+13	; 0x0d
    1072:	9e 85       	ldd	r25, Y+14	; 0x0e
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	4a e7       	ldi	r20, 0x7A	; 122
    107a:	53 e4       	ldi	r21, 0x43	; 67
    107c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	8f 83       	std	Y+7, r24	; 0x07
    1086:	98 87       	std	Y+8, r25	; 0x08
    1088:	a9 87       	std	Y+9, r26	; 0x09
    108a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    108c:	6f 81       	ldd	r22, Y+7	; 0x07
    108e:	78 85       	ldd	r23, Y+8	; 0x08
    1090:	89 85       	ldd	r24, Y+9	; 0x09
    1092:	9a 85       	ldd	r25, Y+10	; 0x0a
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	40 e8       	ldi	r20, 0x80	; 128
    109a:	5f e3       	ldi	r21, 0x3F	; 63
    109c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10a0:	88 23       	and	r24, r24
    10a2:	2c f4       	brge	.+10     	; 0x10ae <setPassToEeprom+0x92>
		__ticks = 1;
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	9e 83       	std	Y+6, r25	; 0x06
    10aa:	8d 83       	std	Y+5, r24	; 0x05
    10ac:	3f c0       	rjmp	.+126    	; 0x112c <setPassToEeprom+0x110>
	else if (__tmp > 65535)
    10ae:	6f 81       	ldd	r22, Y+7	; 0x07
    10b0:	78 85       	ldd	r23, Y+8	; 0x08
    10b2:	89 85       	ldd	r24, Y+9	; 0x09
    10b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	3f ef       	ldi	r19, 0xFF	; 255
    10ba:	4f e7       	ldi	r20, 0x7F	; 127
    10bc:	57 e4       	ldi	r21, 0x47	; 71
    10be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10c2:	18 16       	cp	r1, r24
    10c4:	4c f5       	brge	.+82     	; 0x1118 <setPassToEeprom+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    10cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	40 e2       	ldi	r20, 0x20	; 32
    10d4:	51 e4       	ldi	r21, 0x41	; 65
    10d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
    10de:	bc 01       	movw	r22, r24
    10e0:	cd 01       	movw	r24, r26
    10e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	9e 83       	std	Y+6, r25	; 0x06
    10ec:	8d 83       	std	Y+5, r24	; 0x05
    10ee:	0f c0       	rjmp	.+30     	; 0x110e <setPassToEeprom+0xf2>
    10f0:	89 e1       	ldi	r24, 0x19	; 25
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	9c 83       	std	Y+4, r25	; 0x04
    10f6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	f1 f7       	brne	.-4      	; 0x10fc <setPassToEeprom+0xe0>
    1100:	9c 83       	std	Y+4, r25	; 0x04
    1102:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1104:	8d 81       	ldd	r24, Y+5	; 0x05
    1106:	9e 81       	ldd	r25, Y+6	; 0x06
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	9e 83       	std	Y+6, r25	; 0x06
    110c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    110e:	8d 81       	ldd	r24, Y+5	; 0x05
    1110:	9e 81       	ldd	r25, Y+6	; 0x06
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	69 f7       	brne	.-38     	; 0x10f0 <setPassToEeprom+0xd4>
    1116:	14 c0       	rjmp	.+40     	; 0x1140 <setPassToEeprom+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1118:	6f 81       	ldd	r22, Y+7	; 0x07
    111a:	78 85       	ldd	r23, Y+8	; 0x08
    111c:	89 85       	ldd	r24, Y+9	; 0x09
    111e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	9e 83       	std	Y+6, r25	; 0x06
    112a:	8d 83       	std	Y+5, r24	; 0x05
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	9e 81       	ldd	r25, Y+6	; 0x06
    1130:	9a 83       	std	Y+2, r25	; 0x02
    1132:	89 83       	std	Y+1, r24	; 0x01
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	9a 81       	ldd	r25, Y+2	; 0x02
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	f1 f7       	brne	.-4      	; 0x1138 <setPassToEeprom+0x11c>
    113c:	9a 83       	std	Y+2, r25	; 0x02
    113e:	89 83       	std	Y+1, r24	; 0x01
		EXEEPROM_readByte(0x0311 + i, str+i);
	}
}
void setPassToEeprom(char *str) {
	int i;
	for (i = 0; i < 5; i++) {
    1140:	8f 85       	ldd	r24, Y+15	; 0x0f
    1142:	98 89       	ldd	r25, Y+16	; 0x10
    1144:	01 96       	adiw	r24, 0x01	; 1
    1146:	98 8b       	std	Y+16, r25	; 0x10
    1148:	8f 87       	std	Y+15, r24	; 0x0f
    114a:	8f 85       	ldd	r24, Y+15	; 0x0f
    114c:	98 89       	ldd	r25, Y+16	; 0x10
    114e:	85 30       	cpi	r24, 0x05	; 5
    1150:	91 05       	cpc	r25, r1
    1152:	0c f4       	brge	.+2      	; 0x1156 <setPassToEeprom+0x13a>
    1154:	72 cf       	rjmp	.-284    	; 0x103a <setPassToEeprom+0x1e>
		//write the saved 5 bits from the address 0x0311
		EXEEPROM_writeByte(0x0311 + i, str[i]);
		_delay_ms(100);
	}

}
    1156:	62 96       	adiw	r28, 0x12	; 18
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	de bf       	out	0x3e, r29	; 62
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	cd bf       	out	0x3d, r28	; 61
    1162:	cf 91       	pop	r28
    1164:	df 91       	pop	r29
    1166:	08 95       	ret

00001168 <setPassToEepromFirst>:
void setPassToEepromFirst(char *str) {
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	62 97       	sbiw	r28, 0x12	; 18
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
    117c:	9a 8b       	std	Y+18, r25	; 0x12
    117e:	89 8b       	std	Y+17, r24	; 0x11
	//write the saved 5 bits from the address 0x0311
	int i;
		for (i = 0; i < 5; i++) {
    1180:	18 8a       	std	Y+16, r1	; 0x10
    1182:	1f 86       	std	Y+15, r1	; 0x0f
    1184:	88 c0       	rjmp	.+272    	; 0x1296 <setPassToEepromFirst+0x12e>
			//write the saved 5 bits from the address 0x0311
			EXEEPROM_writeByte(0x0311 + i, str[i]);
    1186:	8f 85       	ldd	r24, Y+15	; 0x0f
    1188:	98 89       	ldd	r25, Y+16	; 0x10
    118a:	8f 5e       	subi	r24, 0xEF	; 239
    118c:	9c 4f       	sbci	r25, 0xFC	; 252
    118e:	ac 01       	movw	r20, r24
    1190:	2f 85       	ldd	r18, Y+15	; 0x0f
    1192:	38 89       	ldd	r19, Y+16	; 0x10
    1194:	89 89       	ldd	r24, Y+17	; 0x11
    1196:	9a 89       	ldd	r25, Y+18	; 0x12
    1198:	fc 01       	movw	r30, r24
    119a:	e2 0f       	add	r30, r18
    119c:	f3 1f       	adc	r31, r19
    119e:	20 81       	ld	r18, Z
    11a0:	ca 01       	movw	r24, r20
    11a2:	62 2f       	mov	r22, r18
    11a4:	0e 94 2e 06 	call	0xc5c	; 0xc5c <EXEEPROM_writeByte>
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	a8 ec       	ldi	r26, 0xC8	; 200
    11ae:	b2 e4       	ldi	r27, 0x42	; 66
    11b0:	8b 87       	std	Y+11, r24	; 0x0b
    11b2:	9c 87       	std	Y+12, r25	; 0x0c
    11b4:	ad 87       	std	Y+13, r26	; 0x0d
    11b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    11bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    11be:	9e 85       	ldd	r25, Y+14	; 0x0e
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	4a e7       	ldi	r20, 0x7A	; 122
    11c6:	53 e4       	ldi	r21, 0x43	; 67
    11c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11cc:	dc 01       	movw	r26, r24
    11ce:	cb 01       	movw	r24, r22
    11d0:	8f 83       	std	Y+7, r24	; 0x07
    11d2:	98 87       	std	Y+8, r25	; 0x08
    11d4:	a9 87       	std	Y+9, r26	; 0x09
    11d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11d8:	6f 81       	ldd	r22, Y+7	; 0x07
    11da:	78 85       	ldd	r23, Y+8	; 0x08
    11dc:	89 85       	ldd	r24, Y+9	; 0x09
    11de:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	40 e8       	ldi	r20, 0x80	; 128
    11e6:	5f e3       	ldi	r21, 0x3F	; 63
    11e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ec:	88 23       	and	r24, r24
    11ee:	2c f4       	brge	.+10     	; 0x11fa <setPassToEepromFirst+0x92>
		__ticks = 1;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	9e 83       	std	Y+6, r25	; 0x06
    11f6:	8d 83       	std	Y+5, r24	; 0x05
    11f8:	3f c0       	rjmp	.+126    	; 0x1278 <setPassToEepromFirst+0x110>
	else if (__tmp > 65535)
    11fa:	6f 81       	ldd	r22, Y+7	; 0x07
    11fc:	78 85       	ldd	r23, Y+8	; 0x08
    11fe:	89 85       	ldd	r24, Y+9	; 0x09
    1200:	9a 85       	ldd	r25, Y+10	; 0x0a
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	3f ef       	ldi	r19, 0xFF	; 255
    1206:	4f e7       	ldi	r20, 0x7F	; 127
    1208:	57 e4       	ldi	r21, 0x47	; 71
    120a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    120e:	18 16       	cp	r1, r24
    1210:	4c f5       	brge	.+82     	; 0x1264 <setPassToEepromFirst+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1212:	6b 85       	ldd	r22, Y+11	; 0x0b
    1214:	7c 85       	ldd	r23, Y+12	; 0x0c
    1216:	8d 85       	ldd	r24, Y+13	; 0x0d
    1218:	9e 85       	ldd	r25, Y+14	; 0x0e
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	40 e2       	ldi	r20, 0x20	; 32
    1220:	51 e4       	ldi	r21, 0x41	; 65
    1222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1226:	dc 01       	movw	r26, r24
    1228:	cb 01       	movw	r24, r22
    122a:	bc 01       	movw	r22, r24
    122c:	cd 01       	movw	r24, r26
    122e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	9e 83       	std	Y+6, r25	; 0x06
    1238:	8d 83       	std	Y+5, r24	; 0x05
    123a:	0f c0       	rjmp	.+30     	; 0x125a <setPassToEepromFirst+0xf2>
    123c:	89 e1       	ldi	r24, 0x19	; 25
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	9c 83       	std	Y+4, r25	; 0x04
    1242:	8b 83       	std	Y+3, r24	; 0x03
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	9c 81       	ldd	r25, Y+4	; 0x04
    1248:	01 97       	sbiw	r24, 0x01	; 1
    124a:	f1 f7       	brne	.-4      	; 0x1248 <setPassToEepromFirst+0xe0>
    124c:	9c 83       	std	Y+4, r25	; 0x04
    124e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1250:	8d 81       	ldd	r24, Y+5	; 0x05
    1252:	9e 81       	ldd	r25, Y+6	; 0x06
    1254:	01 97       	sbiw	r24, 0x01	; 1
    1256:	9e 83       	std	Y+6, r25	; 0x06
    1258:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    125a:	8d 81       	ldd	r24, Y+5	; 0x05
    125c:	9e 81       	ldd	r25, Y+6	; 0x06
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	69 f7       	brne	.-38     	; 0x123c <setPassToEepromFirst+0xd4>
    1262:	14 c0       	rjmp	.+40     	; 0x128c <setPassToEepromFirst+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1264:	6f 81       	ldd	r22, Y+7	; 0x07
    1266:	78 85       	ldd	r23, Y+8	; 0x08
    1268:	89 85       	ldd	r24, Y+9	; 0x09
    126a:	9a 85       	ldd	r25, Y+10	; 0x0a
    126c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	9e 83       	std	Y+6, r25	; 0x06
    1276:	8d 83       	std	Y+5, r24	; 0x05
    1278:	8d 81       	ldd	r24, Y+5	; 0x05
    127a:	9e 81       	ldd	r25, Y+6	; 0x06
    127c:	9a 83       	std	Y+2, r25	; 0x02
    127e:	89 83       	std	Y+1, r24	; 0x01
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	9a 81       	ldd	r25, Y+2	; 0x02
    1284:	01 97       	sbiw	r24, 0x01	; 1
    1286:	f1 f7       	brne	.-4      	; 0x1284 <setPassToEepromFirst+0x11c>
    1288:	9a 83       	std	Y+2, r25	; 0x02
    128a:	89 83       	std	Y+1, r24	; 0x01

}
void setPassToEepromFirst(char *str) {
	//write the saved 5 bits from the address 0x0311
	int i;
		for (i = 0; i < 5; i++) {
    128c:	8f 85       	ldd	r24, Y+15	; 0x0f
    128e:	98 89       	ldd	r25, Y+16	; 0x10
    1290:	01 96       	adiw	r24, 0x01	; 1
    1292:	98 8b       	std	Y+16, r25	; 0x10
    1294:	8f 87       	std	Y+15, r24	; 0x0f
    1296:	8f 85       	ldd	r24, Y+15	; 0x0f
    1298:	98 89       	ldd	r25, Y+16	; 0x10
    129a:	85 30       	cpi	r24, 0x05	; 5
    129c:	91 05       	cpc	r25, r1
    129e:	0c f4       	brge	.+2      	; 0x12a2 <setPassToEepromFirst+0x13a>
    12a0:	72 cf       	rjmp	.-284    	; 0x1186 <setPassToEepromFirst+0x1e>
			//write the saved 5 bits from the address 0x0311
			EXEEPROM_writeByte(0x0311 + i, str[i]);
			_delay_ms(100);
		}

}
    12a2:	62 96       	adiw	r28, 0x12	; 18
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	08 95       	ret

000012b4 <ISR_Count>:
void ISR_Count(void) {
    12b4:	df 93       	push	r29
    12b6:	cf 93       	push	r28
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62

	tick++;
    12bc:	80 91 7c 00 	lds	r24, 0x007C
    12c0:	8f 5f       	subi	r24, 0xFF	; 255
    12c2:	80 93 7c 00 	sts	0x007C, r24
	if (tick == NO_PER_SEC) {
    12c6:	80 91 7c 00 	lds	r24, 0x007C
    12ca:	80 32       	cpi	r24, 0x20	; 32
    12cc:	39 f4       	brne	.+14     	; 0x12dc <ISR_Count+0x28>
		sec++;
    12ce:	80 91 7e 00 	lds	r24, 0x007E
    12d2:	8f 5f       	subi	r24, 0xFF	; 255
    12d4:	80 93 7e 00 	sts	0x007E, r24
		tick = 0;
    12d8:	10 92 7c 00 	sts	0x007C, r1
	}

}
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <main>:

int main(void) {
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	64 97       	sbiw	r28, 0x14	; 20
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	de bf       	out	0x3e, r29	; 62
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	cd bf       	out	0x3d, r28	; 61

	UartConfig UartConf = { disableParity, oneStop, eightBits, 9600 };
    12f6:	9e 01       	movw	r18, r28
    12f8:	2b 5f       	subi	r18, 0xFB	; 251
    12fa:	3f 4f       	sbci	r19, 0xFF	; 255
    12fc:	39 8b       	std	Y+17, r19	; 0x11
    12fe:	28 8b       	std	Y+16, r18	; 0x10
    1300:	87 e7       	ldi	r24, 0x77	; 119
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	9b 8b       	std	Y+19, r25	; 0x13
    1306:	8a 8b       	std	Y+18, r24	; 0x12
    1308:	95 e0       	ldi	r25, 0x05	; 5
    130a:	9c 8b       	std	Y+20, r25	; 0x14
    130c:	ea 89       	ldd	r30, Y+18	; 0x12
    130e:	fb 89       	ldd	r31, Y+19	; 0x13
    1310:	00 80       	ld	r0, Z
    1312:	2a 89       	ldd	r18, Y+18	; 0x12
    1314:	3b 89       	ldd	r19, Y+19	; 0x13
    1316:	2f 5f       	subi	r18, 0xFF	; 255
    1318:	3f 4f       	sbci	r19, 0xFF	; 255
    131a:	3b 8b       	std	Y+19, r19	; 0x13
    131c:	2a 8b       	std	Y+18, r18	; 0x12
    131e:	e8 89       	ldd	r30, Y+16	; 0x10
    1320:	f9 89       	ldd	r31, Y+17	; 0x11
    1322:	00 82       	st	Z, r0
    1324:	28 89       	ldd	r18, Y+16	; 0x10
    1326:	39 89       	ldd	r19, Y+17	; 0x11
    1328:	2f 5f       	subi	r18, 0xFF	; 255
    132a:	3f 4f       	sbci	r19, 0xFF	; 255
    132c:	39 8b       	std	Y+17, r19	; 0x11
    132e:	28 8b       	std	Y+16, r18	; 0x10
    1330:	3c 89       	ldd	r19, Y+20	; 0x14
    1332:	31 50       	subi	r19, 0x01	; 1
    1334:	3c 8b       	std	Y+20, r19	; 0x14
    1336:	8c 89       	ldd	r24, Y+20	; 0x14
    1338:	88 23       	and	r24, r24
    133a:	41 f7       	brne	.-48     	; 0x130c <main+0x2a>
	Timer0Config Timer0Conf = { CTC, 0, clk_1024, 245 };
    133c:	82 e0       	ldi	r24, 0x02	; 2
    133e:	8a 87       	std	Y+10, r24	; 0x0a
    1340:	1b 86       	std	Y+11, r1	; 0x0b
    1342:	85 e0       	ldi	r24, 0x05	; 5
    1344:	8c 87       	std	Y+12, r24	; 0x0c
    1346:	85 ef       	ldi	r24, 0xF5	; 245
    1348:	8d 87       	std	Y+13, r24	; 0x0d
	char *write = "!!!!!";
    134a:	80 e6       	ldi	r24, 0x60	; 96
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	9c 83       	std	Y+4, r25	; 0x04
    1350:	8b 83       	std	Y+3, r24	; 0x03
	char *read = "#####";
    1352:	86 e6       	ldi	r24, 0x66	; 102
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	9a 83       	std	Y+2, r25	; 0x02
    1358:	89 83       	std	Y+1, r24	; 0x01
	SREG |= (1 << 7);
    135a:	af e5       	ldi	r26, 0x5F	; 95
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	ef e5       	ldi	r30, 0x5F	; 95
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	80 68       	ori	r24, 0x80	; 128
    1366:	8c 93       	st	X, r24
	UART_init(&UartConf);
    1368:	ce 01       	movw	r24, r28
    136a:	05 96       	adiw	r24, 0x05	; 5
    136c:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <UART_init>
	EXEEPROM_init();
    1370:	0e 94 f7 05 	call	0xbee	; 0xbee <EXEEPROM_init>
	TIMER0_init(&Timer0Conf);
    1374:	ce 01       	movw	r24, r28
    1376:	0a 96       	adiw	r24, 0x0a	; 10
    1378:	0e 94 4c 0a 	call	0x1498	; 0x1498 <TIMER0_init>
	TIMER0_setCallBack(ISR_Count);
    137c:	8a e5       	ldi	r24, 0x5A	; 90
    137e:	99 e0       	ldi	r25, 0x09	; 9
    1380:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <TIMER0_setCallBack>
	DCMOTOR_init();
    1384:	0e 94 a3 05 	call	0xb46	; 0xb46 <DCMOTOR_init>
	BUZZER_DIR |= (1 << BUZZER_LOC);
    1388:	a4 e3       	ldi	r26, 0x34	; 52
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e4 e3       	ldi	r30, 0x34	; 52
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	84 60       	ori	r24, 0x04	; 4
    1394:	8c 93       	st	X, r24

	setPassToEepromFirst(write);
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	9c 81       	ldd	r25, Y+4	; 0x04
    139a:	0e 94 b4 08 	call	0x1168	; 0x1168 <setPassToEepromFirst>
	while (1) {
		switch ((char) UART_recieveChar(&UartConf)) {
    139e:	ce 01       	movw	r24, r28
    13a0:	05 96       	adiw	r24, 0x05	; 5
    13a2:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <UART_recieveChar>
    13a6:	e8 2f       	mov	r30, r24
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	ff 87       	std	Y+15, r31	; 0x0f
    13ac:	ee 87       	std	Y+14, r30	; 0x0e
    13ae:	2e 85       	ldd	r18, Y+14	; 0x0e
    13b0:	3f 85       	ldd	r19, Y+15	; 0x0f
    13b2:	2f 34       	cpi	r18, 0x4F	; 79
    13b4:	31 05       	cpc	r19, r1
    13b6:	89 f1       	breq	.+98     	; 0x141a <main+0x138>
    13b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    13ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    13bc:	80 35       	cpi	r24, 0x50	; 80
    13be:	91 05       	cpc	r25, r1
    13c0:	34 f4       	brge	.+12     	; 0x13ce <main+0xec>
    13c2:	ee 85       	ldd	r30, Y+14	; 0x0e
    13c4:	ff 85       	ldd	r31, Y+15	; 0x0f
    13c6:	ee 34       	cpi	r30, 0x4E	; 78
    13c8:	f1 05       	cpc	r31, r1
    13ca:	c9 f0       	breq	.+50     	; 0x13fe <main+0x11c>
    13cc:	e8 cf       	rjmp	.-48     	; 0x139e <main+0xbc>
    13ce:	2e 85       	ldd	r18, Y+14	; 0x0e
    13d0:	3f 85       	ldd	r19, Y+15	; 0x0f
    13d2:	20 35       	cpi	r18, 0x50	; 80
    13d4:	31 05       	cpc	r19, r1
    13d6:	39 f0       	breq	.+14     	; 0x13e6 <main+0x104>
    13d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    13da:	9f 85       	ldd	r25, Y+15	; 0x0f
    13dc:	87 35       	cpi	r24, 0x57	; 87
    13de:	91 05       	cpc	r25, r1
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <main+0x102>
    13e2:	3e c0       	rjmp	.+124    	; 0x1460 <main+0x17e>
    13e4:	dc cf       	rjmp	.-72     	; 0x139e <main+0xbc>
		case 'P':
			getPassFromEeprom(read);
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ea:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <getPassFromEeprom>
			UART_sentString(&UartConf, read);
    13ee:	ce 01       	movw	r24, r28
    13f0:	05 96       	adiw	r24, 0x05	; 5
    13f2:	29 81       	ldd	r18, Y+1	; 0x01
    13f4:	3a 81       	ldd	r19, Y+2	; 0x02
    13f6:	b9 01       	movw	r22, r18
    13f8:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <UART_sentString>
    13fc:	d0 cf       	rjmp	.-96     	; 0x139e <main+0xbc>
			break;
		case 'N':
			UART_recieveString(&UartConf, write, 5);
    13fe:	ce 01       	movw	r24, r28
    1400:	05 96       	adiw	r24, 0x05	; 5
    1402:	2b 81       	ldd	r18, Y+3	; 0x03
    1404:	3c 81       	ldd	r19, Y+4	; 0x04
    1406:	b9 01       	movw	r22, r18
    1408:	45 e0       	ldi	r20, 0x05	; 5
    140a:	50 e0       	ldi	r21, 0x00	; 0
    140c:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <UART_recieveString>
			setPassToEeprom(write);
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	9c 81       	ldd	r25, Y+4	; 0x04
    1414:	0e 94 0e 08 	call	0x101c	; 0x101c <setPassToEeprom>
    1418:	c2 cf       	rjmp	.-124    	; 0x139e <main+0xbc>
			break;
		case 'O':
		sec =1;
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	80 93 7e 00 	sts	0x007E, r24
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <main+0x144>

			while (sec % 15)
				DCMOTOR_clockWise();
    1422:	0e 94 b8 05 	call	0xb70	; 0xb70 <DCMOTOR_clockWise>
			setPassToEeprom(write);
			break;
		case 'O':
		sec =1;

			while (sec % 15)
    1426:	80 91 7e 00 	lds	r24, 0x007E
    142a:	9f e0       	ldi	r25, 0x0F	; 15
    142c:	69 2f       	mov	r22, r25
    142e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__udivmodqi4>
    1432:	89 2f       	mov	r24, r25
    1434:	88 23       	and	r24, r24
    1436:	a9 f7       	brne	.-22     	; 0x1422 <main+0x140>
				DCMOTOR_clockWise();
			sec =1;
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	80 93 7e 00 	sts	0x007E, r24
			DCMOTOR_stop();
    143e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <DCMOTOR_stop>
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <main+0x166>
			while (sec % 15)
				DCMOTOR_antiClockWise();
    1444:	0e 94 cd 05 	call	0xb9a	; 0xb9a <DCMOTOR_antiClockWise>

			while (sec % 15)
				DCMOTOR_clockWise();
			sec =1;
			DCMOTOR_stop();
			while (sec % 15)
    1448:	80 91 7e 00 	lds	r24, 0x007E
    144c:	9f e0       	ldi	r25, 0x0F	; 15
    144e:	69 2f       	mov	r22, r25
    1450:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__udivmodqi4>
    1454:	89 2f       	mov	r24, r25
    1456:	88 23       	and	r24, r24
    1458:	a9 f7       	brne	.-22     	; 0x1444 <main+0x162>
				DCMOTOR_antiClockWise();
			DCMOTOR_stop();
    145a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <DCMOTOR_stop>
    145e:	9f cf       	rjmp	.-194    	; 0x139e <main+0xbc>
		//	TIMER0_deInit();
			break;
		case 'W':
			//tick = 1;
			sec = 1;
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	80 93 7e 00 	sts	0x007E, r24
    1466:	07 c0       	rjmp	.+14     	; 0x1476 <main+0x194>
			//TIMER0_init(&Timer0Conf);
			//TIMER0_setCallBack(ISR_Count);
			while (sec % 30)
				BUZZER_OUTPUT |= (1 << BUZZER_LOC);
    1468:	a5 e3       	ldi	r26, 0x35	; 53
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e5 e3       	ldi	r30, 0x35	; 53
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	84 60       	ori	r24, 0x04	; 4
    1474:	8c 93       	st	X, r24
		case 'W':
			//tick = 1;
			sec = 1;
			//TIMER0_init(&Timer0Conf);
			//TIMER0_setCallBack(ISR_Count);
			while (sec % 30)
    1476:	80 91 7e 00 	lds	r24, 0x007E
    147a:	9e e1       	ldi	r25, 0x1E	; 30
    147c:	69 2f       	mov	r22, r25
    147e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__udivmodqi4>
    1482:	89 2f       	mov	r24, r25
    1484:	88 23       	and	r24, r24
    1486:	81 f7       	brne	.-32     	; 0x1468 <main+0x186>
				BUZZER_OUTPUT |= (1 << BUZZER_LOC);

			BUZZER_OUTPUT &= ~(1 << BUZZER_LOC);
    1488:	a5 e3       	ldi	r26, 0x35	; 53
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e5 e3       	ldi	r30, 0x35	; 53
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	8b 7f       	andi	r24, 0xFB	; 251
    1494:	8c 93       	st	X, r24
    1496:	83 cf       	rjmp	.-250    	; 0x139e <main+0xbc>

00001498 <TIMER0_init>:
#include "timer0.h"

static volatile void (*callBackfn)(void) = NULL_ptr;

void TIMER0_init(Timer0Config *conf) {
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	00 d0       	rcall	.+0      	; 0x149e <TIMER0_init+0x6>
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
    14a2:	9a 83       	std	Y+2, r25	; 0x02
    14a4:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = conf->initialVal; //initial value
    14a6:	a2 e5       	ldi	r26, 0x52	; 82
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e9 81       	ldd	r30, Y+1	; 0x01
    14ac:	fa 81       	ldd	r31, Y+2	; 0x02
    14ae:	81 81       	ldd	r24, Z+1	; 0x01
    14b0:	8c 93       	st	X, r24

	if (conf->mode == normal)
    14b2:	e9 81       	ldd	r30, Y+1	; 0x01
    14b4:	fa 81       	ldd	r31, Y+2	; 0x02
    14b6:	80 81       	ld	r24, Z
    14b8:	88 23       	and	r24, r24
    14ba:	41 f4       	brne	.+16     	; 0x14cc <TIMER0_init+0x34>
		TIMSK |= (1 << TOIE0); //enable intr
    14bc:	a9 e5       	ldi	r26, 0x59	; 89
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e9 e5       	ldi	r30, 0x59	; 89
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	81 60       	ori	r24, 0x01	; 1
    14c8:	8c 93       	st	X, r24
    14ca:	07 c0       	rjmp	.+14     	; 0x14da <TIMER0_init+0x42>
	else
		TIMSK |= (1 << OCIE0); //enable intr
    14cc:	a9 e5       	ldi	r26, 0x59	; 89
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e9 e5       	ldi	r30, 0x59	; 89
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	82 60       	ori	r24, 0x02	; 2
    14d8:	8c 93       	st	X, r24

	TCCR0 = 0;
    14da:	e3 e5       	ldi	r30, 0x53	; 83
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	10 82       	st	Z, r1

	if ((conf->mode == normal) || (conf->mode == CTC))
    14e0:	e9 81       	ldd	r30, Y+1	; 0x01
    14e2:	fa 81       	ldd	r31, Y+2	; 0x02
    14e4:	80 81       	ld	r24, Z
    14e6:	88 23       	and	r24, r24
    14e8:	29 f0       	breq	.+10     	; 0x14f4 <TIMER0_init+0x5c>
    14ea:	e9 81       	ldd	r30, Y+1	; 0x01
    14ec:	fa 81       	ldd	r31, Y+2	; 0x02
    14ee:	80 81       	ld	r24, Z
    14f0:	82 30       	cpi	r24, 0x02	; 2
    14f2:	41 f4       	brne	.+16     	; 0x1504 <TIMER0_init+0x6c>
		TCCR0 |= (1 << FOC0); //non PWM
    14f4:	a3 e5       	ldi	r26, 0x53	; 83
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e3 e5       	ldi	r30, 0x53	; 83
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	80 68       	ori	r24, 0x80	; 128
    1500:	8c 93       	st	X, r24
    1502:	07 c0       	rjmp	.+14     	; 0x1512 <TIMER0_init+0x7a>
	else
		TCCR0 &= ~(1 << FOC0); //PWM
    1504:	a3 e5       	ldi	r26, 0x53	; 83
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e3 e5       	ldi	r30, 0x53	; 83
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	8f 77       	andi	r24, 0x7F	; 127
    1510:	8c 93       	st	X, r24

	TCCR0 = (TCCR0 & 0xF8) | conf->prescale; //prescaling = 0, 1 ,2,3,4,5 in first 3 bits
    1512:	a3 e5       	ldi	r26, 0x53	; 83
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e3 e5       	ldi	r30, 0x53	; 83
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	98 2f       	mov	r25, r24
    151e:	98 7f       	andi	r25, 0xF8	; 248
    1520:	e9 81       	ldd	r30, Y+1	; 0x01
    1522:	fa 81       	ldd	r31, Y+2	; 0x02
    1524:	82 81       	ldd	r24, Z+2	; 0x02
    1526:	89 2b       	or	r24, r25
    1528:	8c 93       	st	X, r24

	/*define the mode of timer by chosing the 3rd bit (wgm01) and put the second bit on it*/
	TCCR0 = (TCCR0 & 0xF7) | ((conf->mode & 0x02) << WGM01);
    152a:	a3 e5       	ldi	r26, 0x53	; 83
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e3 e5       	ldi	r30, 0x53	; 83
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	28 2f       	mov	r18, r24
    1536:	27 7f       	andi	r18, 0xF7	; 247
    1538:	e9 81       	ldd	r30, Y+1	; 0x01
    153a:	fa 81       	ldd	r31, Y+2	; 0x02
    153c:	80 81       	ld	r24, Z
    153e:	88 2f       	mov	r24, r24
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	82 70       	andi	r24, 0x02	; 2
    1544:	90 70       	andi	r25, 0x00	; 0
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	82 2b       	or	r24, r18
    1554:	8c 93       	st	X, r24
	/*define the mode of timer by chosing the 6th bit (wgm00) and put the 1st bit on it*/
	TCCR0 = (TCCR0 & 0xBF) | ((conf->mode & 0x01) << WGM00);
    1556:	a3 e5       	ldi	r26, 0x53	; 83
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e3 e5       	ldi	r30, 0x53	; 83
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	28 2f       	mov	r18, r24
    1562:	2f 7b       	andi	r18, 0xBF	; 191
    1564:	e9 81       	ldd	r30, Y+1	; 0x01
    1566:	fa 81       	ldd	r31, Y+2	; 0x02
    1568:	80 81       	ld	r24, Z
    156a:	88 2f       	mov	r24, r24
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	81 70       	andi	r24, 0x01	; 1
    1570:	90 70       	andi	r25, 0x00	; 0
    1572:	00 24       	eor	r0, r0
    1574:	96 95       	lsr	r25
    1576:	87 95       	ror	r24
    1578:	07 94       	ror	r0
    157a:	96 95       	lsr	r25
    157c:	87 95       	ror	r24
    157e:	07 94       	ror	r0
    1580:	98 2f       	mov	r25, r24
    1582:	80 2d       	mov	r24, r0
    1584:	82 2b       	or	r24, r18
    1586:	8c 93       	st	X, r24

	if (conf->mode == fastPWM) {
    1588:	e9 81       	ldd	r30, Y+1	; 0x01
    158a:	fa 81       	ldd	r31, Y+2	; 0x02
    158c:	80 81       	ld	r24, Z
    158e:	83 30       	cpi	r24, 0x03	; 3
    1590:	71 f4       	brne	.+28     	; 0x15ae <TIMER0_init+0x116>
		TCCR0 |= (1 << COM01); //non inverting mode
    1592:	a3 e5       	ldi	r26, 0x53	; 83
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e3 e5       	ldi	r30, 0x53	; 83
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	80 62       	ori	r24, 0x20	; 32
    159e:	8c 93       	st	X, r24
		DDRB = DDRB | (1 << PB3); // Configure PB3/OC0 Pin as output pin
    15a0:	a7 e3       	ldi	r26, 0x37	; 55
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e7 e3       	ldi	r30, 0x37	; 55
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	88 60       	ori	r24, 0x08	; 8
    15ac:	8c 93       	st	X, r24
	}
	/*putting the compare val*/
	if (conf->mode != normal)
    15ae:	e9 81       	ldd	r30, Y+1	; 0x01
    15b0:	fa 81       	ldd	r31, Y+2	; 0x02
    15b2:	80 81       	ld	r24, Z
    15b4:	88 23       	and	r24, r24
    15b6:	41 f0       	breq	.+16     	; 0x15c8 <TIMER0_init+0x130>
		OCR0 = conf->compareVal;
    15b8:	ec e5       	ldi	r30, 0x5C	; 92
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	a9 81       	ldd	r26, Y+1	; 0x01
    15be:	ba 81       	ldd	r27, Y+2	; 0x02
    15c0:	13 96       	adiw	r26, 0x03	; 3
    15c2:	8c 91       	ld	r24, X
    15c4:	13 97       	sbiw	r26, 0x03	; 3
    15c6:	80 83       	st	Z, r24
	 TCCR0 |= (1<<WGM00)|(1<<WGM01)|(1<<COM01);
	 OCR0=conf->compareVal; // compare value
	 DDRB |=(1<<3);
	 break;
	 }*/
}
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	08 95       	ret

000015d2 <TIMER0_setCallBack>:

void TIMER0_setCallBack(void (*callBackFNParameter)(void)) {
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	00 d0       	rcall	.+0      	; 0x15d8 <TIMER0_setCallBack+0x6>
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	9a 83       	std	Y+2, r25	; 0x02
    15de:	89 83       	std	Y+1, r24	; 0x01
	callBackfn = callBackFNParameter;
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	9a 81       	ldd	r25, Y+2	; 0x02
    15e4:	90 93 80 00 	sts	0x0080, r25
    15e8:	80 93 7f 00 	sts	0x007F, r24
}
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <__vector_19>:
ISR(TIMER0_COMP_vect) {
    15f6:	1f 92       	push	r1
    15f8:	0f 92       	push	r0
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	0f 92       	push	r0
    15fe:	11 24       	eor	r1, r1
    1600:	2f 93       	push	r18
    1602:	3f 93       	push	r19
    1604:	4f 93       	push	r20
    1606:	5f 93       	push	r21
    1608:	6f 93       	push	r22
    160a:	7f 93       	push	r23
    160c:	8f 93       	push	r24
    160e:	9f 93       	push	r25
    1610:	af 93       	push	r26
    1612:	bf 93       	push	r27
    1614:	ef 93       	push	r30
    1616:	ff 93       	push	r31
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
	if (callBackfn != NULL_ptr) {
    1620:	80 91 7f 00 	lds	r24, 0x007F
    1624:	90 91 80 00 	lds	r25, 0x0080
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	29 f0       	breq	.+10     	; 0x1636 <__vector_19+0x40>
		(*callBackfn)();
    162c:	e0 91 7f 00 	lds	r30, 0x007F
    1630:	f0 91 80 00 	lds	r31, 0x0080
    1634:	09 95       	icall
	}
}
    1636:	cf 91       	pop	r28
    1638:	df 91       	pop	r29
    163a:	ff 91       	pop	r31
    163c:	ef 91       	pop	r30
    163e:	bf 91       	pop	r27
    1640:	af 91       	pop	r26
    1642:	9f 91       	pop	r25
    1644:	8f 91       	pop	r24
    1646:	7f 91       	pop	r23
    1648:	6f 91       	pop	r22
    164a:	5f 91       	pop	r21
    164c:	4f 91       	pop	r20
    164e:	3f 91       	pop	r19
    1650:	2f 91       	pop	r18
    1652:	0f 90       	pop	r0
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	0f 90       	pop	r0
    1658:	1f 90       	pop	r1
    165a:	18 95       	reti

0000165c <__vector_9>:
ISR(TIMER0_OVF_vect) {
    165c:	1f 92       	push	r1
    165e:	0f 92       	push	r0
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	0f 92       	push	r0
    1664:	11 24       	eor	r1, r1
    1666:	2f 93       	push	r18
    1668:	3f 93       	push	r19
    166a:	4f 93       	push	r20
    166c:	5f 93       	push	r21
    166e:	6f 93       	push	r22
    1670:	7f 93       	push	r23
    1672:	8f 93       	push	r24
    1674:	9f 93       	push	r25
    1676:	af 93       	push	r26
    1678:	bf 93       	push	r27
    167a:	ef 93       	push	r30
    167c:	ff 93       	push	r31
    167e:	df 93       	push	r29
    1680:	cf 93       	push	r28
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
	if (callBackfn != NULL_ptr)
    1686:	80 91 7f 00 	lds	r24, 0x007F
    168a:	90 91 80 00 	lds	r25, 0x0080
    168e:	00 97       	sbiw	r24, 0x00	; 0
    1690:	29 f0       	breq	.+10     	; 0x169c <__vector_9+0x40>
		(*callBackfn)();
    1692:	e0 91 7f 00 	lds	r30, 0x007F
    1696:	f0 91 80 00 	lds	r31, 0x0080
    169a:	09 95       	icall
}
    169c:	cf 91       	pop	r28
    169e:	df 91       	pop	r29
    16a0:	ff 91       	pop	r31
    16a2:	ef 91       	pop	r30
    16a4:	bf 91       	pop	r27
    16a6:	af 91       	pop	r26
    16a8:	9f 91       	pop	r25
    16aa:	8f 91       	pop	r24
    16ac:	7f 91       	pop	r23
    16ae:	6f 91       	pop	r22
    16b0:	5f 91       	pop	r21
    16b2:	4f 91       	pop	r20
    16b4:	3f 91       	pop	r19
    16b6:	2f 91       	pop	r18
    16b8:	0f 90       	pop	r0
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	0f 90       	pop	r0
    16be:	1f 90       	pop	r1
    16c0:	18 95       	reti

000016c2 <TIMER0_deInit>:
void TIMER0_deInit(void) {
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0;
    16ca:	e2 e5       	ldi	r30, 0x52	; 82
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	10 82       	st	Z, r1
	TCCR0 = 0;
    16d0:	e3 e5       	ldi	r30, 0x53	; 83
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	10 82       	st	Z, r1
	OCR0 = 0;
    16d6:	ec e5       	ldi	r30, 0x5C	; 92
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	10 82       	st	Z, r1
	TIMSK &= ~((1 << TOIE0) | (1 << OCIE0));
    16dc:	a9 e5       	ldi	r26, 0x59	; 89
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e9 e5       	ldi	r30, 0x59	; 89
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	8c 7f       	andi	r24, 0xFC	; 252
    16e8:	8c 93       	st	X, r24
}
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	08 95       	ret

000016f0 <UART_init>:

/*
 NAME: INIT UART
 Description : initialization the UART
 */
void UART_init(const UartConfig *conf) {
    16f0:	0f 93       	push	r16
    16f2:	1f 93       	push	r17
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	00 d0       	rcall	.+0      	; 0x16fa <UART_init+0xa>
    16fa:	00 d0       	rcall	.+0      	; 0x16fc <UART_init+0xc>
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	9a 83       	std	Y+2, r25	; 0x02
    1702:	89 83       	std	Y+1, r24	; 0x01

	UCSRA = (1 << U2X); //enable double trans
    1704:	eb e2       	ldi	r30, 0x2B	; 43
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	82 e0       	ldi	r24, 0x02	; 2
    170a:	80 83       	st	Z, r24

	UCSRB = (1 << RXEN) | (1 << TXEN); //enable recive and send
    170c:	ea e2       	ldi	r30, 0x2A	; 42
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	88 e1       	ldi	r24, 0x18	; 24
    1712:	80 83       	st	Z, r24
	switch (conf->noOfBits) {
    1714:	e9 81       	ldd	r30, Y+1	; 0x01
    1716:	fa 81       	ldd	r31, Y+2	; 0x02
    1718:	82 81       	ldd	r24, Z+2	; 0x02
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	3c 83       	std	Y+4, r19	; 0x04
    1720:	2b 83       	std	Y+3, r18	; 0x03
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	9c 81       	ldd	r25, Y+4	; 0x04
    1726:	82 30       	cpi	r24, 0x02	; 2
    1728:	91 05       	cpc	r25, r1
    172a:	09 f4       	brne	.+2      	; 0x172e <UART_init+0x3e>
    172c:	75 c0       	rjmp	.+234    	; 0x1818 <UART_init+0x128>
    172e:	eb 81       	ldd	r30, Y+3	; 0x03
    1730:	fc 81       	ldd	r31, Y+4	; 0x04
    1732:	e3 30       	cpi	r30, 0x03	; 3
    1734:	f1 05       	cpc	r31, r1
    1736:	5c f4       	brge	.+22     	; 0x174e <UART_init+0x5e>
    1738:	2b 81       	ldd	r18, Y+3	; 0x03
    173a:	3c 81       	ldd	r19, Y+4	; 0x04
    173c:	21 15       	cp	r18, r1
    173e:	31 05       	cpc	r19, r1
    1740:	99 f0       	breq	.+38     	; 0x1768 <UART_init+0x78>
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	9c 81       	ldd	r25, Y+4	; 0x04
    1746:	81 30       	cpi	r24, 0x01	; 1
    1748:	91 05       	cpc	r25, r1
    174a:	d1 f1       	breq	.+116    	; 0x17c0 <UART_init+0xd0>
    174c:	e8 c0       	rjmp	.+464    	; 0x191e <UART_init+0x22e>
    174e:	eb 81       	ldd	r30, Y+3	; 0x03
    1750:	fc 81       	ldd	r31, Y+4	; 0x04
    1752:	e3 30       	cpi	r30, 0x03	; 3
    1754:	f1 05       	cpc	r31, r1
    1756:	09 f4       	brne	.+2      	; 0x175a <UART_init+0x6a>
    1758:	8b c0       	rjmp	.+278    	; 0x1870 <UART_init+0x180>
    175a:	2b 81       	ldd	r18, Y+3	; 0x03
    175c:	3c 81       	ldd	r19, Y+4	; 0x04
    175e:	24 30       	cpi	r18, 0x04	; 4
    1760:	31 05       	cpc	r19, r1
    1762:	09 f4       	brne	.+2      	; 0x1766 <UART_init+0x76>
    1764:	b1 c0       	rjmp	.+354    	; 0x18c8 <UART_init+0x1d8>
    1766:	db c0       	rjmp	.+438    	; 0x191e <UART_init+0x22e>
	case fiveBits:
		if ((conf->parityType) == disableParity) {
    1768:	e9 81       	ldd	r30, Y+1	; 0x01
    176a:	fa 81       	ldd	r31, Y+2	; 0x02
    176c:	80 81       	ld	r24, Z
    176e:	88 23       	and	r24, r24
    1770:	21 f4       	brne	.+8      	; 0x177a <UART_init+0x8a>
			UCSRC = 0;
    1772:	e0 e4       	ldi	r30, 0x40	; 64
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	10 82       	st	Z, r1
    1778:	0e c0       	rjmp	.+28     	; 0x1796 <UART_init+0xa6>
		} else if ((conf->parityType) == evenParity) {
    177a:	e9 81       	ldd	r30, Y+1	; 0x01
    177c:	fa 81       	ldd	r31, Y+2	; 0x02
    177e:	80 81       	ld	r24, Z
    1780:	82 30       	cpi	r24, 0x02	; 2
    1782:	29 f4       	brne	.+10     	; 0x178e <UART_init+0x9e>
			UCSRC = (1 << UPM1);
    1784:	e0 e4       	ldi	r30, 0x40	; 64
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 e2       	ldi	r24, 0x20	; 32
    178a:	80 83       	st	Z, r24
    178c:	04 c0       	rjmp	.+8      	; 0x1796 <UART_init+0xa6>
		} else {
			UCSRC = (1 << UPM1) | (1 << UPM0);
    178e:	e0 e4       	ldi	r30, 0x40	; 64
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 e3       	ldi	r24, 0x30	; 48
    1794:	80 83       	st	Z, r24
		}
		UCSRC |= (1 << URSEL) | ((conf->noOfStopBits) << USBS);
    1796:	a0 e4       	ldi	r26, 0x40	; 64
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e0 e4       	ldi	r30, 0x40	; 64
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	28 2f       	mov	r18, r24
    17a2:	e9 81       	ldd	r30, Y+1	; 0x01
    17a4:	fa 81       	ldd	r31, Y+2	; 0x02
    17a6:	81 81       	ldd	r24, Z+1	; 0x01
    17a8:	88 2f       	mov	r24, r24
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	88 0f       	add	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	88 0f       	add	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	80 68       	ori	r24, 0x80	; 128
    17ba:	82 2b       	or	r24, r18
    17bc:	8c 93       	st	X, r24
    17be:	af c0       	rjmp	.+350    	; 0x191e <UART_init+0x22e>
		break;
	case sexBits:
		if ((conf->parityType) == disableParity) {
    17c0:	e9 81       	ldd	r30, Y+1	; 0x01
    17c2:	fa 81       	ldd	r31, Y+2	; 0x02
    17c4:	80 81       	ld	r24, Z
    17c6:	88 23       	and	r24, r24
    17c8:	21 f4       	brne	.+8      	; 0x17d2 <UART_init+0xe2>
			UCSRC = 0;
    17ca:	e0 e4       	ldi	r30, 0x40	; 64
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	10 82       	st	Z, r1
    17d0:	0e c0       	rjmp	.+28     	; 0x17ee <UART_init+0xfe>
		} else if ((conf->parityType) == evenParity) {
    17d2:	e9 81       	ldd	r30, Y+1	; 0x01
    17d4:	fa 81       	ldd	r31, Y+2	; 0x02
    17d6:	80 81       	ld	r24, Z
    17d8:	82 30       	cpi	r24, 0x02	; 2
    17da:	29 f4       	brne	.+10     	; 0x17e6 <UART_init+0xf6>
			UCSRC = (1 << UPM1);
    17dc:	e0 e4       	ldi	r30, 0x40	; 64
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 e2       	ldi	r24, 0x20	; 32
    17e2:	80 83       	st	Z, r24
    17e4:	04 c0       	rjmp	.+8      	; 0x17ee <UART_init+0xfe>
		} else {
			UCSRC = (1 << UPM1) | (1 << UPM0);
    17e6:	e0 e4       	ldi	r30, 0x40	; 64
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 e3       	ldi	r24, 0x30	; 48
    17ec:	80 83       	st	Z, r24
		}
		UCSRC |= (1 << URSEL) | ((conf->noOfStopBits) << USBS) | (1 << UCSZ0);
    17ee:	a0 e4       	ldi	r26, 0x40	; 64
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e0 e4       	ldi	r30, 0x40	; 64
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	28 2f       	mov	r18, r24
    17fa:	e9 81       	ldd	r30, Y+1	; 0x01
    17fc:	fa 81       	ldd	r31, Y+2	; 0x02
    17fe:	81 81       	ldd	r24, Z+1	; 0x01
    1800:	88 2f       	mov	r24, r24
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	88 0f       	add	r24, r24
    1806:	99 1f       	adc	r25, r25
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	82 68       	ori	r24, 0x82	; 130
    1812:	82 2b       	or	r24, r18
    1814:	8c 93       	st	X, r24
    1816:	83 c0       	rjmp	.+262    	; 0x191e <UART_init+0x22e>
		break;
	case sevenBits:
		if ((conf->parityType) == disableParity) {
    1818:	e9 81       	ldd	r30, Y+1	; 0x01
    181a:	fa 81       	ldd	r31, Y+2	; 0x02
    181c:	80 81       	ld	r24, Z
    181e:	88 23       	and	r24, r24
    1820:	21 f4       	brne	.+8      	; 0x182a <UART_init+0x13a>
			UCSRC = 0;
    1822:	e0 e4       	ldi	r30, 0x40	; 64
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	10 82       	st	Z, r1
    1828:	0e c0       	rjmp	.+28     	; 0x1846 <UART_init+0x156>
		} else if ((conf->parityType) == evenParity) {
    182a:	e9 81       	ldd	r30, Y+1	; 0x01
    182c:	fa 81       	ldd	r31, Y+2	; 0x02
    182e:	80 81       	ld	r24, Z
    1830:	82 30       	cpi	r24, 0x02	; 2
    1832:	29 f4       	brne	.+10     	; 0x183e <UART_init+0x14e>
			UCSRC = (1 << UPM1);
    1834:	e0 e4       	ldi	r30, 0x40	; 64
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 e2       	ldi	r24, 0x20	; 32
    183a:	80 83       	st	Z, r24
    183c:	04 c0       	rjmp	.+8      	; 0x1846 <UART_init+0x156>
		} else {
			UCSRC = (1 << UPM1) | (1 << UPM0);
    183e:	e0 e4       	ldi	r30, 0x40	; 64
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 e3       	ldi	r24, 0x30	; 48
    1844:	80 83       	st	Z, r24
		}
		UCSRC |= (1 << URSEL) | ((conf->noOfStopBits) << USBS) | (1 << UCSZ1);
    1846:	a0 e4       	ldi	r26, 0x40	; 64
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e0 e4       	ldi	r30, 0x40	; 64
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	28 2f       	mov	r18, r24
    1852:	e9 81       	ldd	r30, Y+1	; 0x01
    1854:	fa 81       	ldd	r31, Y+2	; 0x02
    1856:	81 81       	ldd	r24, Z+1	; 0x01
    1858:	88 2f       	mov	r24, r24
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	84 68       	ori	r24, 0x84	; 132
    186a:	82 2b       	or	r24, r18
    186c:	8c 93       	st	X, r24
    186e:	57 c0       	rjmp	.+174    	; 0x191e <UART_init+0x22e>
		break;
	case eightBits:
		if ((conf->parityType) == disableParity) {
    1870:	e9 81       	ldd	r30, Y+1	; 0x01
    1872:	fa 81       	ldd	r31, Y+2	; 0x02
    1874:	80 81       	ld	r24, Z
    1876:	88 23       	and	r24, r24
    1878:	21 f4       	brne	.+8      	; 0x1882 <UART_init+0x192>
			UCSRC = 0;
    187a:	e0 e4       	ldi	r30, 0x40	; 64
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	10 82       	st	Z, r1
    1880:	0e c0       	rjmp	.+28     	; 0x189e <UART_init+0x1ae>
		} else if ((conf->parityType) == evenParity) {
    1882:	e9 81       	ldd	r30, Y+1	; 0x01
    1884:	fa 81       	ldd	r31, Y+2	; 0x02
    1886:	80 81       	ld	r24, Z
    1888:	82 30       	cpi	r24, 0x02	; 2
    188a:	29 f4       	brne	.+10     	; 0x1896 <UART_init+0x1a6>
			UCSRC = (1 << UPM1);
    188c:	e0 e4       	ldi	r30, 0x40	; 64
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 e2       	ldi	r24, 0x20	; 32
    1892:	80 83       	st	Z, r24
    1894:	04 c0       	rjmp	.+8      	; 0x189e <UART_init+0x1ae>
		} else {
			UCSRC = (1 << UPM1) | (1 << UPM0);
    1896:	e0 e4       	ldi	r30, 0x40	; 64
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 e3       	ldi	r24, 0x30	; 48
    189c:	80 83       	st	Z, r24
		}
		UCSRC |= (1 << URSEL) | ((conf->noOfStopBits) << USBS) | (1 << UCSZ0)
    189e:	a0 e4       	ldi	r26, 0x40	; 64
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	e0 e4       	ldi	r30, 0x40	; 64
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	28 2f       	mov	r18, r24
    18aa:	e9 81       	ldd	r30, Y+1	; 0x01
    18ac:	fa 81       	ldd	r31, Y+2	; 0x02
    18ae:	81 81       	ldd	r24, Z+1	; 0x01
    18b0:	88 2f       	mov	r24, r24
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	88 0f       	add	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	88 0f       	add	r24, r24
    18be:	99 1f       	adc	r25, r25
    18c0:	86 68       	ori	r24, 0x86	; 134
    18c2:	82 2b       	or	r24, r18
    18c4:	8c 93       	st	X, r24
    18c6:	2b c0       	rjmp	.+86     	; 0x191e <UART_init+0x22e>
				| (1 << UCSZ1);
		break;
	case nineBits:
		if ((conf->parityType) == disableParity) {
    18c8:	e9 81       	ldd	r30, Y+1	; 0x01
    18ca:	fa 81       	ldd	r31, Y+2	; 0x02
    18cc:	80 81       	ld	r24, Z
    18ce:	88 23       	and	r24, r24
    18d0:	21 f4       	brne	.+8      	; 0x18da <UART_init+0x1ea>
			UCSRC = 0;
    18d2:	e0 e4       	ldi	r30, 0x40	; 64
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	10 82       	st	Z, r1
    18d8:	0e c0       	rjmp	.+28     	; 0x18f6 <UART_init+0x206>
		} else if ((conf->parityType) == evenParity) {
    18da:	e9 81       	ldd	r30, Y+1	; 0x01
    18dc:	fa 81       	ldd	r31, Y+2	; 0x02
    18de:	80 81       	ld	r24, Z
    18e0:	82 30       	cpi	r24, 0x02	; 2
    18e2:	29 f4       	brne	.+10     	; 0x18ee <UART_init+0x1fe>
			UCSRC = (1 << UPM1);
    18e4:	e0 e4       	ldi	r30, 0x40	; 64
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 e2       	ldi	r24, 0x20	; 32
    18ea:	80 83       	st	Z, r24
    18ec:	04 c0       	rjmp	.+8      	; 0x18f6 <UART_init+0x206>
		} else {
			UCSRC = (1 << UPM1) | (1 << UPM0);
    18ee:	e0 e4       	ldi	r30, 0x40	; 64
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 e3       	ldi	r24, 0x30	; 48
    18f4:	80 83       	st	Z, r24
		}
		UCSRC |= (1 << URSEL) | ((conf->noOfStopBits) << USBS) | (1 << UCSZ0)
    18f6:	a0 e4       	ldi	r26, 0x40	; 64
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	e0 e4       	ldi	r30, 0x40	; 64
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	28 2f       	mov	r18, r24
    1902:	e9 81       	ldd	r30, Y+1	; 0x01
    1904:	fa 81       	ldd	r31, Y+2	; 0x02
    1906:	81 81       	ldd	r24, Z+1	; 0x01
    1908:	88 2f       	mov	r24, r24
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	86 68       	ori	r24, 0x86	; 134
    191a:	82 2b       	or	r24, r18
    191c:	8c 93       	st	X, r24

	default:
		break;

	}
	UBRRH = BAUD_PRESCALE(conf->baudRate) >> 8;
    191e:	00 e4       	ldi	r16, 0x40	; 64
    1920:	10 e0       	ldi	r17, 0x00	; 0
    1922:	e9 81       	ldd	r30, Y+1	; 0x01
    1924:	fa 81       	ldd	r31, Y+2	; 0x02
    1926:	83 81       	ldd	r24, Z+3	; 0x03
    1928:	94 81       	ldd	r25, Z+4	; 0x04
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	88 0f       	add	r24, r24
    1930:	99 1f       	adc	r25, r25
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	9c 01       	movw	r18, r24
    1938:	44 27       	eor	r20, r20
    193a:	37 fd       	sbrc	r19, 7
    193c:	40 95       	com	r20
    193e:	54 2f       	mov	r21, r20
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	92 e1       	ldi	r25, 0x12	; 18
    1944:	aa e7       	ldi	r26, 0x7A	; 122
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	bc 01       	movw	r22, r24
    194a:	cd 01       	movw	r24, r26
    194c:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__divmodsi4>
    1950:	da 01       	movw	r26, r20
    1952:	c9 01       	movw	r24, r18
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	a1 09       	sbc	r26, r1
    1958:	b1 09       	sbc	r27, r1
    195a:	89 2f       	mov	r24, r25
    195c:	9a 2f       	mov	r25, r26
    195e:	ab 2f       	mov	r26, r27
    1960:	bb 27       	eor	r27, r27
    1962:	a7 fd       	sbrc	r26, 7
    1964:	ba 95       	dec	r27
    1966:	f8 01       	movw	r30, r16
    1968:	80 83       	st	Z, r24
	UBRRL = BAUD_PRESCALE(conf->baudRate);
    196a:	09 e2       	ldi	r16, 0x29	; 41
    196c:	10 e0       	ldi	r17, 0x00	; 0
    196e:	e9 81       	ldd	r30, Y+1	; 0x01
    1970:	fa 81       	ldd	r31, Y+2	; 0x02
    1972:	83 81       	ldd	r24, Z+3	; 0x03
    1974:	94 81       	ldd	r25, Z+4	; 0x04
    1976:	88 0f       	add	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	88 0f       	add	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	9c 01       	movw	r18, r24
    1984:	44 27       	eor	r20, r20
    1986:	37 fd       	sbrc	r19, 7
    1988:	40 95       	com	r20
    198a:	54 2f       	mov	r21, r20
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	92 e1       	ldi	r25, 0x12	; 18
    1990:	aa e7       	ldi	r26, 0x7A	; 122
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	bc 01       	movw	r22, r24
    1996:	cd 01       	movw	r24, r26
    1998:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__divmodsi4>
    199c:	da 01       	movw	r26, r20
    199e:	c9 01       	movw	r24, r18
    19a0:	81 50       	subi	r24, 0x01	; 1
    19a2:	f8 01       	movw	r30, r16
    19a4:	80 83       	st	Z, r24

//	for( c=0;c<10;c++);
}
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	1f 91       	pop	r17
    19b4:	0f 91       	pop	r16
    19b6:	08 95       	ret

000019b8 <UART_recieveChar>:
 * NAME: recive UART
 * Description : recieving byte from the UART
 * in : null
 * out : uint8_t // Byte
 **********************/
uint16 UART_recieveChar(const UartConfig * conf) {
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	00 d0       	rcall	.+0      	; 0x19be <UART_recieveChar+0x6>
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <UART_recieveChar+0x8>
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	9a 83       	std	Y+2, r25	; 0x02
    19c6:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSRA & (1 << RXC))) {}
    19c8:	eb e2       	ldi	r30, 0x2B	; 43
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	88 23       	and	r24, r24
    19d0:	dc f7       	brge	.-10     	; 0x19c8 <UART_recieveChar+0x10>
	if(conf->noOfBits==nineBits)
    19d2:	e9 81       	ldd	r30, Y+1	; 0x01
    19d4:	fa 81       	ldd	r31, Y+2	; 0x02
    19d6:	82 81       	ldd	r24, Z+2	; 0x02
    19d8:	84 30       	cpi	r24, 0x04	; 4
    19da:	91 f4       	brne	.+36     	; 0x1a00 <UART_recieveChar+0x48>
	return (UCSRA&(1<<RXB8)<<8)|((uint8) UDR & (0xFF));
    19dc:	eb e2       	ldi	r30, 0x2B	; 43
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	88 2f       	mov	r24, r24
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	9c 01       	movw	r18, r24
    19e8:	20 70       	andi	r18, 0x00	; 0
    19ea:	32 70       	andi	r19, 0x02	; 2
    19ec:	ec e2       	ldi	r30, 0x2C	; 44
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	88 2f       	mov	r24, r24
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	82 2b       	or	r24, r18
    19f8:	93 2b       	or	r25, r19
    19fa:	9c 83       	std	Y+4, r25	; 0x04
    19fc:	8b 83       	std	Y+3, r24	; 0x03
    19fe:	07 c0       	rjmp	.+14     	; 0x1a0e <UART_recieveChar+0x56>
	else
	return ((uint8) UDR & (0xFF));
    1a00:	ec e2       	ldi	r30, 0x2C	; 44
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	3c 83       	std	Y+4, r19	; 0x04
    1a0c:	2b 83       	std	Y+3, r18	; 0x03
    1a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a10:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	cf 91       	pop	r28
    1a1c:	df 91       	pop	r29
    1a1e:	08 95       	ret

00001a20 <UART_sentChar>:
 * NAME: sent UART
 * Description : sent byte from the UART0
 * in : data // byte
 * out : 0
 *********************/
void UART_sentChar(const UartConfig *conf, uint16 data) {
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	00 d0       	rcall	.+0      	; 0x1a26 <UART_sentChar+0x6>
    1a26:	00 d0       	rcall	.+0      	; 0x1a28 <UART_sentChar+0x8>
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
    1a2c:	9a 83       	std	Y+2, r25	; 0x02
    1a2e:	89 83       	std	Y+1, r24	; 0x01
    1a30:	7c 83       	std	Y+4, r23	; 0x04
    1a32:	6b 83       	std	Y+3, r22	; 0x03
	while (!(UCSRA & (1 << UDRE))) {}
    1a34:	eb e2       	ldi	r30, 0x2B	; 43
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	88 2f       	mov	r24, r24
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	80 72       	andi	r24, 0x20	; 32
    1a40:	90 70       	andi	r25, 0x00	; 0
    1a42:	00 97       	sbiw	r24, 0x00	; 0
    1a44:	b9 f3       	breq	.-18     	; 0x1a34 <UART_sentChar+0x14>
	if(conf->noOfBits==nineBits)
    1a46:	e9 81       	ldd	r30, Y+1	; 0x01
    1a48:	fa 81       	ldd	r31, Y+2	; 0x02
    1a4a:	82 81       	ldd	r24, Z+2	; 0x02
    1a4c:	84 30       	cpi	r24, 0x04	; 4
    1a4e:	19 f4       	brne	.+6      	; 0x1a56 <UART_sentChar+0x36>
		UCSRA=(data&(1<<8))<<TXB8;
    1a50:	eb e2       	ldi	r30, 0x2B	; 43
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	10 82       	st	Z, r1
	UDR = data&0xFF;
    1a56:	ec e2       	ldi	r30, 0x2C	; 44
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	80 83       	st	Z, r24

}
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	08 95       	ret

00001a6c <UART_recieveString>:
void UART_recieveString(const UartConfig *conf, char *str, int lenght) {
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	28 97       	sbiw	r28, 0x08	; 8
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	9c 83       	std	Y+4, r25	; 0x04
    1a82:	8b 83       	std	Y+3, r24	; 0x03
    1a84:	7e 83       	std	Y+6, r23	; 0x06
    1a86:	6d 83       	std	Y+5, r22	; 0x05
    1a88:	58 87       	std	Y+8, r21	; 0x08
    1a8a:	4f 83       	std	Y+7, r20	; 0x07
	if(conf->noOfBits != nineBits)
    1a8c:	eb 81       	ldd	r30, Y+3	; 0x03
    1a8e:	fc 81       	ldd	r31, Y+4	; 0x04
    1a90:	82 81       	ldd	r24, Z+2	; 0x02
    1a92:	84 30       	cpi	r24, 0x04	; 4
    1a94:	31 f1       	breq	.+76     	; 0x1ae2 <UART_recieveString+0x76>
	{uint8 charac;
	uint8 i = 0;
    1a96:	19 82       	std	Y+1, r1	; 0x01

	do {
		charac = UART_recieveChar(conf);
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <UART_recieveChar>
    1aa0:	8a 83       	std	Y+2, r24	; 0x02
		str[i] = charac&(0xFF);
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aaa:	9e 81       	ldd	r25, Y+6	; 0x06
    1aac:	fc 01       	movw	r30, r24
    1aae:	e2 0f       	add	r30, r18
    1ab0:	f3 1f       	adc	r31, r19
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	80 83       	st	Z, r24
		i++;
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	8f 5f       	subi	r24, 0xFF	; 255
    1aba:	89 83       	std	Y+1, r24	; 0x01
		lenght--;
    1abc:	8f 81       	ldd	r24, Y+7	; 0x07
    1abe:	98 85       	ldd	r25, Y+8	; 0x08
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	98 87       	std	Y+8, r25	; 0x08
    1ac4:	8f 83       	std	Y+7, r24	; 0x07
	} while (lenght != 0);
    1ac6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ac8:	98 85       	ldd	r25, Y+8	; 0x08
    1aca:	00 97       	sbiw	r24, 0x00	; 0
    1acc:	29 f7       	brne	.-54     	; 0x1a98 <UART_recieveString+0x2c>
	str[i] = '\0';
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad8:	fc 01       	movw	r30, r24
    1ada:	e2 0f       	add	r30, r18
    1adc:	f3 1f       	adc	r31, r19
    1ade:	10 82       	st	Z, r1
	i = 0;
    1ae0:	19 82       	std	Y+1, r1	; 0x01
	}
}
    1ae2:	28 96       	adiw	r28, 0x08	; 8
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	de bf       	out	0x3e, r29	; 62
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	cd bf       	out	0x3d, r28	; 61
    1aee:	cf 91       	pop	r28
    1af0:	df 91       	pop	r29
    1af2:	08 95       	ret

00001af4 <UART_sentString>:
void UART_sentString(const UartConfig *conf, char *str) {
    1af4:	df 93       	push	r29
    1af6:	cf 93       	push	r28
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <UART_sentString+0x6>
    1afa:	00 d0       	rcall	.+0      	; 0x1afc <UART_sentString+0x8>
    1afc:	0f 92       	push	r0
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
    1b02:	9b 83       	std	Y+3, r25	; 0x03
    1b04:	8a 83       	std	Y+2, r24	; 0x02
    1b06:	7d 83       	std	Y+5, r23	; 0x05
    1b08:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i = 0;
    1b0a:	19 82       	std	Y+1, r1	; 0x01
    1b0c:	13 c0       	rjmp	.+38     	; 0x1b34 <UART_sentString+0x40>
	while (str[i] != '\0') {
		UART_sentChar(conf, str[i]);
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	28 2f       	mov	r18, r24
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	8c 81       	ldd	r24, Y+4	; 0x04
    1b16:	9d 81       	ldd	r25, Y+5	; 0x05
    1b18:	fc 01       	movw	r30, r24
    1b1a:	e2 0f       	add	r30, r18
    1b1c:	f3 1f       	adc	r31, r19
    1b1e:	80 81       	ld	r24, Z
    1b20:	28 2f       	mov	r18, r24
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	9b 81       	ldd	r25, Y+3	; 0x03
    1b28:	b9 01       	movw	r22, r18
    1b2a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <UART_sentChar>
		i++;
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	8f 5f       	subi	r24, 0xFF	; 255
    1b32:	89 83       	std	Y+1, r24	; 0x01
	i = 0;
	}
}
void UART_sentString(const UartConfig *conf, char *str) {
	uint8 i = 0;
	while (str[i] != '\0') {
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3e:	fc 01       	movw	r30, r24
    1b40:	e2 0f       	add	r30, r18
    1b42:	f3 1f       	adc	r31, r19
    1b44:	80 81       	ld	r24, Z
    1b46:	88 23       	and	r24, r24
    1b48:	11 f7       	brne	.-60     	; 0x1b0e <UART_sentString+0x1a>
		UART_sentChar(conf, str[i]);
		i++;
	}
	i = 0;
    1b4a:	19 82       	std	Y+1, r1	; 0x01
}
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	cf 91       	pop	r28
    1b58:	df 91       	pop	r29
    1b5a:	08 95       	ret

00001b5c <__udivmodqi4>:
    1b5c:	99 1b       	sub	r25, r25
    1b5e:	79 e0       	ldi	r23, 0x09	; 9
    1b60:	04 c0       	rjmp	.+8      	; 0x1b6a <__udivmodqi4_ep>

00001b62 <__udivmodqi4_loop>:
    1b62:	99 1f       	adc	r25, r25
    1b64:	96 17       	cp	r25, r22
    1b66:	08 f0       	brcs	.+2      	; 0x1b6a <__udivmodqi4_ep>
    1b68:	96 1b       	sub	r25, r22

00001b6a <__udivmodqi4_ep>:
    1b6a:	88 1f       	adc	r24, r24
    1b6c:	7a 95       	dec	r23
    1b6e:	c9 f7       	brne	.-14     	; 0x1b62 <__udivmodqi4_loop>
    1b70:	80 95       	com	r24
    1b72:	08 95       	ret

00001b74 <__divmodsi4>:
    1b74:	97 fb       	bst	r25, 7
    1b76:	09 2e       	mov	r0, r25
    1b78:	05 26       	eor	r0, r21
    1b7a:	0e d0       	rcall	.+28     	; 0x1b98 <__divmodsi4_neg1>
    1b7c:	57 fd       	sbrc	r21, 7
    1b7e:	04 d0       	rcall	.+8      	; 0x1b88 <__divmodsi4_neg2>
    1b80:	14 d0       	rcall	.+40     	; 0x1baa <__udivmodsi4>
    1b82:	0a d0       	rcall	.+20     	; 0x1b98 <__divmodsi4_neg1>
    1b84:	00 1c       	adc	r0, r0
    1b86:	38 f4       	brcc	.+14     	; 0x1b96 <__divmodsi4_exit>

00001b88 <__divmodsi4_neg2>:
    1b88:	50 95       	com	r21
    1b8a:	40 95       	com	r20
    1b8c:	30 95       	com	r19
    1b8e:	21 95       	neg	r18
    1b90:	3f 4f       	sbci	r19, 0xFF	; 255
    1b92:	4f 4f       	sbci	r20, 0xFF	; 255
    1b94:	5f 4f       	sbci	r21, 0xFF	; 255

00001b96 <__divmodsi4_exit>:
    1b96:	08 95       	ret

00001b98 <__divmodsi4_neg1>:
    1b98:	f6 f7       	brtc	.-4      	; 0x1b96 <__divmodsi4_exit>
    1b9a:	90 95       	com	r25
    1b9c:	80 95       	com	r24
    1b9e:	70 95       	com	r23
    1ba0:	61 95       	neg	r22
    1ba2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba8:	08 95       	ret

00001baa <__udivmodsi4>:
    1baa:	a1 e2       	ldi	r26, 0x21	; 33
    1bac:	1a 2e       	mov	r1, r26
    1bae:	aa 1b       	sub	r26, r26
    1bb0:	bb 1b       	sub	r27, r27
    1bb2:	fd 01       	movw	r30, r26
    1bb4:	0d c0       	rjmp	.+26     	; 0x1bd0 <__udivmodsi4_ep>

00001bb6 <__udivmodsi4_loop>:
    1bb6:	aa 1f       	adc	r26, r26
    1bb8:	bb 1f       	adc	r27, r27
    1bba:	ee 1f       	adc	r30, r30
    1bbc:	ff 1f       	adc	r31, r31
    1bbe:	a2 17       	cp	r26, r18
    1bc0:	b3 07       	cpc	r27, r19
    1bc2:	e4 07       	cpc	r30, r20
    1bc4:	f5 07       	cpc	r31, r21
    1bc6:	20 f0       	brcs	.+8      	; 0x1bd0 <__udivmodsi4_ep>
    1bc8:	a2 1b       	sub	r26, r18
    1bca:	b3 0b       	sbc	r27, r19
    1bcc:	e4 0b       	sbc	r30, r20
    1bce:	f5 0b       	sbc	r31, r21

00001bd0 <__udivmodsi4_ep>:
    1bd0:	66 1f       	adc	r22, r22
    1bd2:	77 1f       	adc	r23, r23
    1bd4:	88 1f       	adc	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	1a 94       	dec	r1
    1bda:	69 f7       	brne	.-38     	; 0x1bb6 <__udivmodsi4_loop>
    1bdc:	60 95       	com	r22
    1bde:	70 95       	com	r23
    1be0:	80 95       	com	r24
    1be2:	90 95       	com	r25
    1be4:	9b 01       	movw	r18, r22
    1be6:	ac 01       	movw	r20, r24
    1be8:	bd 01       	movw	r22, r26
    1bea:	cf 01       	movw	r24, r30
    1bec:	08 95       	ret

00001bee <__prologue_saves__>:
    1bee:	2f 92       	push	r2
    1bf0:	3f 92       	push	r3
    1bf2:	4f 92       	push	r4
    1bf4:	5f 92       	push	r5
    1bf6:	6f 92       	push	r6
    1bf8:	7f 92       	push	r7
    1bfa:	8f 92       	push	r8
    1bfc:	9f 92       	push	r9
    1bfe:	af 92       	push	r10
    1c00:	bf 92       	push	r11
    1c02:	cf 92       	push	r12
    1c04:	df 92       	push	r13
    1c06:	ef 92       	push	r14
    1c08:	ff 92       	push	r15
    1c0a:	0f 93       	push	r16
    1c0c:	1f 93       	push	r17
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    1c16:	ca 1b       	sub	r28, r26
    1c18:	db 0b       	sbc	r29, r27
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	f8 94       	cli
    1c1e:	de bf       	out	0x3e, r29	; 62
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	cd bf       	out	0x3d, r28	; 61
    1c24:	09 94       	ijmp

00001c26 <__epilogue_restores__>:
    1c26:	2a 88       	ldd	r2, Y+18	; 0x12
    1c28:	39 88       	ldd	r3, Y+17	; 0x11
    1c2a:	48 88       	ldd	r4, Y+16	; 0x10
    1c2c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c2e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c30:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c32:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c34:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c36:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c38:	b9 84       	ldd	r11, Y+9	; 0x09
    1c3a:	c8 84       	ldd	r12, Y+8	; 0x08
    1c3c:	df 80       	ldd	r13, Y+7	; 0x07
    1c3e:	ee 80       	ldd	r14, Y+6	; 0x06
    1c40:	fd 80       	ldd	r15, Y+5	; 0x05
    1c42:	0c 81       	ldd	r16, Y+4	; 0x04
    1c44:	1b 81       	ldd	r17, Y+3	; 0x03
    1c46:	aa 81       	ldd	r26, Y+2	; 0x02
    1c48:	b9 81       	ldd	r27, Y+1	; 0x01
    1c4a:	ce 0f       	add	r28, r30
    1c4c:	d1 1d       	adc	r29, r1
    1c4e:	0f b6       	in	r0, 0x3f	; 63
    1c50:	f8 94       	cli
    1c52:	de bf       	out	0x3e, r29	; 62
    1c54:	0f be       	out	0x3f, r0	; 63
    1c56:	cd bf       	out	0x3d, r28	; 61
    1c58:	ed 01       	movw	r28, r26
    1c5a:	08 95       	ret

00001c5c <_exit>:
    1c5c:	f8 94       	cli

00001c5e <__stop_program>:
    1c5e:	ff cf       	rjmp	.-2      	; 0x1c5e <__stop_program>
